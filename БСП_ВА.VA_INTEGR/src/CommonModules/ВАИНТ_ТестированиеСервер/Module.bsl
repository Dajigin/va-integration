//@strict-types
#Область СлужебныйПрограммныйИнтерфейс
// Проверяет наличие интегрированной в конфигурацию библиотеки тестирования.
// 
// Возвращаемое значение:
//  Булево - Истина, если библиотека тестирования интегрирована в конфигурацию.
Функция ЕстьБиблиотекаТестирование() Экспорт
	ЕстьБиблиотека = Ложь;
	Если Метаданные.Подсистемы.Найти("АвтоТестирование") <> Неопределено Тогда
		ЕстьБиблиотека = Истина;
	КонецЕсли;
	Возврат ЕстьБиблиотека;
КонецФункции

Функция УдалитьНовыеЗаписиНезависимыхРегистровСведений()
//	ИмяРегистраСведений = Источник.ДополнительныеСвойства.ИмяРегистра;

//	ПараметрыОтбора = ЗначениеИзСтрокиВнутр(Источник.ДополнительныеСвойства.ПараметрыОтбораСтрокой); // Структура -
//
//
//	
//	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
//	
//	Для Каждого ПараметрОтбора Из ПараметрыОтбора Цикл
//		НаборЗаписей.Отбор[ПараметрОтбора.Ключ].Установить(ПараметрОтбора.Значение, Истина);
//	КонецЦикла;
		
КонецФункции
#КонецОбласти
 
#Область СлужебныйПрограммныйИнтерфейс
// Описание объекта по имени формы.
// 
// Параметры:
//  ИмяФормы - Строка - Имя формы
// 
// Возвращаемое значение:
//  Структура - Описание объекта по имени формы:
// * ТипВладельца - Строка -
// * ИмяВладельца - Строка -
// * Формы - Массив из Строка - массив имен форм.
Функция ОписаниеОбъектаПоИмениФормы(ИмяФормы) Экспорт
	КонечнаяПозиция = СтрНайти(ИмяФормы, ".Форма.");
	ИмяВладельца = Лев(ИмяФормы, КонечнаяПозиция-1);
	КонечнаяПозиция = СтрНайти(ИмяФормы, ".");
	ТипОбъекта = Лев(ИмяФормы, КонечнаяПозиция-1);
	ОбъектВладелец = Метаданные.НайтиПоПолномуИмени(ИмяВладельца);
	Результат = Новый Структура("ТипВладельца, ИмяВладельца, Формы",ТипОбъекта, ОбъектВладелец.Имя, Новый Массив);

	
	Для Каждого ФормаЭлемента Из ОбъектВладелец.Формы Цикл 
		Результат.Формы.Добавить(ФормаЭлемента.Имя); 
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Преобразует соответствие в дерево значений
// 
// Параметры:
// 	ПреобразуемоеСоответствие - Соответствие
// 	* Ключ - Строка
// 	* Значение - Структура
// 		** ПодчиненныеЭлементы - Соответствие
// 	Дерево - ДеревоЗначений - дерево, которое формируется по структуре соответствия.
//  ДобавитьКорень - Булево - если истина до будет дополнительно добавлен корень.
Процедура СоответствиеВДеревоЗначений(ПреобразуемоеСоответствие, Дерево, ДобавитьКорень = Ложь) Экспорт
	Если ДобавитьКорень Тогда
		СтрокаКорня = Дерево.Строки.Добавить();
		СоответствиеВДеревоЗначений(ПреобразуемоеСоответствие, СтрокаКорня, Ложь);
		Возврат;
	КонецЕсли;
	Если ПреобразуемоеСоответствие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого КлючИЗначение Из ПреобразуемоеСоответствие Цикл
		СтруктураЭлемента = КлючИЗначение.Значение; 
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЭлемента);
		СоответствиеВДеревоЗначений(СтруктураЭлемента.ПодчиненныеЭлементы, НоваяСтрока);
	КонецЦикла; 
КонецПроцедуры
#КонецОбласти
