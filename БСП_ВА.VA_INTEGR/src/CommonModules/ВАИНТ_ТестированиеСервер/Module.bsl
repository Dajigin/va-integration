

Процедура ВАИНТ_ПриЗаписиДокументОбъект(Источник, Отказ) Экспорт
	
	ЗапросМаксНомер = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВАИНТ_СозданныеОбъектыИмеющиеДату.НомерЗаписи КАК НомерЗаписи
	|ИЗ
	|	РегистрСведений.ВАИНТ_СозданныеОбъектыИмеющиеДату КАК ВАИНТ_СозданныеОбъектыИмеющиеДату
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи УБЫВ");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрСведений.ВАИНТ_СозданныеОбъектыИмеющиеДату";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	РезультатЗапросаМаксНомер = ЗапросМаксНомер.Выполнить();
	Если РезультатЗапросаМаксНомер.Пустой() Тогда
		НовыйНомерЗаписи = 1;
	Иначе
		Выборка = РезультатЗапросаМаксНомер.Выбрать();
		Выборка.Следующий();
		НовыйНомерЗаписи = Выборка.НомерЗаписи + 1;
	КонецЕсли;
	
	Менеджер = РегистрыСведений.ВАИНТ_СозданныеОбъектыИмеющиеДату.СоздатьМенеджерЗаписи();
	Менеджер.НомерЗаписи = НовыйНомерЗаписи;
	Менеджер.УникальныйИдентификатор = Источник.Ссылка.УникальныйИдентификатор();
	Менеджер.ИмяТипа = Источник.Метаданные().ПолноеИмя();
	Менеджер.Записать();
КонецПроцедуры

Процедура ВАИНТ_ПриЗаписиСправочникОбъект(Источник, Отказ) Экспорт
	// TODO: Вставить содержимое обработчика.
КонецПроцедуры

Процедура ВАИНТ_ПриЗаписиРегистрСведенийНаборЗаписей(Источник, Отказ, Замещение) Экспорт
	// TODO: проверить, что регистр сведений независимый и не входит в подсистему БСП.
КонецПроцедуры


#Область СлужебныйПрограммныйИнтерфейс
Функция ОписаниеОбъектаПоИмениФормы(ИмяФормы) Экспорт
	КонечнаяПозиция = СтрНайти(ИмяФормы, ".Форма.");
	ИмяВладельца = Лев(ИмяФормы, КонечнаяПозиция-1);
	КонечнаяПозиция = СтрНайти(ИмяФормы, ".");
	ТипОбъекта = Лев(ИмяФормы, КонечнаяПозиция-1);
	ОбъектВладелец = Метаданные.НайтиПоПолномуИмени(ИмяВладельца);
	Результат = Новый Структура("ТипВладельца, ИмяВладельца, Формы",ТипОбъекта, ОбъектВладелец.Имя, Новый Массив);

	Для Каждого ФормаЭлемента Из ОбъектВладелец.Формы Цикл
		Результат.Формы.Добавить(ФормаЭлемента.Имя);
	КонецЦикла;
	Возврат Результат;
КонецФункции


// Преобразует соответствие в дерево значений
// 
// Параметры:
// 	ПреобразуемоеСоответствие - Соответствие - соответствие полями:
// 	* Ключ - Строка - наименование
// 	* Значение - Структура - структура с обязателиным полем "ПодчиненныеЭлементы" типа Соответствие
// 							 Остальные поля копируются в соответствующие поля дерева значений.
// 	Дерево - ДеревоЗначений - дерево, которое формируется по структуре соответствия.
//  ДобавитьКорень - Булево - если истина до будет дополнительно добавлен корень.
Процедура СоответствиеВДеревоЗначений(ПреобразуемоеСоответствие, Дерево, ДобавитьКорень = Ложь) Экспорт
	Если ДобавитьКорень Тогда
		СтрокаКорня = Дерево.Строки.Добавить();
		СоответствиеВДеревоЗначений(ПреобразуемоеСоответствие, СтрокаКорня, Ложь);
		Возврат;
	КонецЕсли;
	Если ПреобразуемоеСоответствие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого КлючИЗначение Из ПреобразуемоеСоответствие Цикл
		СтруктураЭлемента = КлючИЗначение.Значение;
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЭлемента);
		СоответствиеВДеревоЗначений(СтруктураЭлемента.ПодчиненныеЭлементы, НоваяСтрока);
	КонецЦикла; 
КонецПроцедуры
#КонецОбласти

