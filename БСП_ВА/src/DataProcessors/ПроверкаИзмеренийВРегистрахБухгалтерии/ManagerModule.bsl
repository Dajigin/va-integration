#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Заполняет настройки для подсистемы проверки и корректировки данных.
//
// Параметры:
//   Сведения - Структура - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок()
//
Процедура ПроверкаИКорректировкаДанных_ЗаполнитьСведения(Сведения) Экспорт
	
	Сведения.Наименование = НСтр("ru = 'Проверка измерений в регистрах бухгалтерии'");
	Сведения.Описание = НСтр("ru = 'Ищет записи, в которых у счета используется признак учета и соответствующее измерение имеет значение Null'");
	Сведения.ФормаНастроек = "Обработка.ПроверкаИзмеренийВРегистрахБухгалтерии.Форма.ФормаНастроек";
	Сведения.Настройки.Вставить("ВыбранныеРегистры", Новый Массив);
	
КонецПроцедуры

// Проверяет корректность настроек для подсистемы проверки и корректировки данных.
//
// Параметры:
//   Настройки - Структура - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок().
//   ВременныеДанные - Структура - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок().
//   Исправлять - Булево - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок().
//   Отказ - Булево - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок().
//
Процедура ПроверкаИКорректировкаДанных_ПроверитьНастройки(Настройки, ВременныеДанные, Исправлять, Отказ) Экспорт
	
	Если Исправлять Тогда
		// Для выбранных регистров должны быть указаны эталонные данные.
		Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
			Если Настройки.ВыбранныеРегистры.Найти(РегистрБухгалтерии.Имя) = Неопределено 
				И Не Настройки.ВыбранныеРегистры.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Значение = Неопределено;
			Если ВременныеДанные = Неопределено 
				Или Не ВременныеДанные.Свойство(РегистрБухгалтерии.Имя, Значение) 
				Или ТипЗнч(Значение.Получить()) <> Тип("ДвоичныеДанные") Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск и исправление проблем для подсистемы проверки и корректировки данных.
//
// Параметры:
//   Настройки - Структура - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок().
//   ВременныеДанные - Структура - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок().
//   Исправлять - Булево - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок().
//   Результат - Структура - описание см. ПроверкаИКорректировкаДанныхПереопределяемый.ПриЗаполненииПроверок():
//
Процедура ПроверкаИКорректировкаДанных_ПроверитьДанные(Настройки, ВременныеДанные, Исправлять, Результат) Экспорт
	
	ВыбранныеРегистры = Настройки.ВыбранныеРегистры;
	Если ВыбранныеРегистры.Количество() = 0 Тогда
		ВыбранныеРегистры = Новый Массив;
		Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
			ВыбранныеРегистры.Добавить(РегистрБухгалтерии.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Если Исправлять Тогда
		Исправить(ВыбранныеРегистры, ВременныеДанные, Результат);
	Иначе
		Проверить(ВыбранныеРегистры, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПроверкаСхемыXDTO() Экспорт
	
	Для Каждого РБ Из  Метаданные.РегистрыБухгалтерии Цикл
		
		ТипXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/enterprise/current-config", "AccountingRegisterRecord." + РБ.Имя);
		Проверено = Ложь;
		
		Для Каждого Измерение Из РБ.Измерения Цикл
			Если Измерение.ПризнакУчета <> Неопределено Тогда
				Если Измерение.Тип.Типы().Количество() = 1 Тогда
					ИмяСвойства = Измерение.Имя;
					Если РБ.Корреспонденция И Не Измерение.Балансовый Тогда
						ИмяСвойства = ИмяСвойства + "Dr";
					КонецЕсли;
					Свойство = ТипXDTO.Свойства.Получить(ИмяСвойства);
					Если Свойство = Неопределено Тогда
						ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка в схеме XDTO - %1'"), ТипXDTO.Имя);
					КонецЕсли;
					Если Свойство.Тип.Имя = "anyType" Тогда
						Возврат Ложь;
					КонецЕсли;
					Проверено = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Проверено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Ресурс Из РБ.Ресурсы Цикл
			Если Ресурс.ПризнакУчета <> Неопределено Тогда
				Если Ресурс.Тип.Типы().Количество() = 1 Тогда
					ИмяСвойства = Ресурс.Имя;
					Если РБ.Корреспонденция И Не Ресурс.Балансовый Тогда
						ИмяСвойства = ИмяСвойства + "Dr";
					КонецЕсли;
					Свойство = ТипXDTO.Свойства.Получить(ИмяСвойства);
					Если Свойство = Неопределено Тогда
						ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка в схеме XDTO - %1'"), ТипXDTO.Имя);
					КонецЕсли;
					Если Свойство.Тип.Имя = "anyType" Тогда
						Возврат Ложь;
					КонецЕсли;
					Проверено = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаДляОтчета(ВыбранныеРегистры)
	
	ТекстЗапроса = "";
	
	Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		
		Если ВыбранныеРегистры.Найти(РегистрБухгалтерии.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Для Каждого Измерение Из РегистрБухгалтерии.Измерения Цикл
			
			Если Измерение.ПризнакУчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			КонецЕсли;
			
			Если Не Измерение.Балансовый И РегистрБухгалтерии.Корреспонденция Тогда
				
				ТекстЗапроса = ТекстЗапроса + 
				"ВЫБРАТЬ
				|	РБ.Регистратор,
				|	РБ.НомерСтроки,
				|	""" + РегистрБухгалтерии.Имя + """ КАК РегистрИмя,
				|	""" + Измерение.Имя + "Дт"" КАК ИзмерениеИмя
				|ИЗ
				|	РегистрБухгалтерии." + РегистрБухгалтерии.Имя + " КАК РБ
				|ГДЕ
				|	РБ." + Измерение.Имя + "Дт ЕСТЬ NULL И РБ.СчетДт." + Измерение.ПризнакУчета.Имя + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	РБ.Регистратор,
				|	РБ.НомерСтроки,
				|	""" + РегистрБухгалтерии.Имя + """ КАК РегистрИмя,
				|	""" + Измерение.Имя + "Кт"" КАК ИзмерениеИмя
				|ИЗ
				|	РегистрБухгалтерии." + РегистрБухгалтерии.Имя + " КАК РБ
				|ГДЕ
				|	РБ." + Измерение.Имя + "Кт ЕСТЬ NULL И РБ.СчетКт." + Измерение.ПризнакУчета.Имя;
			Иначе
				ТекстЗапроса = ТекстЗапроса + 
				"ВЫБРАТЬ
				|	РБ.Регистратор,
				|	РБ.НомерСтроки,
				|	""" + РегистрБухгалтерии.Имя + """ КАК РегистрИмя,
				|	""" + Измерение.Имя + """ КАК ИзмерениеИмя
				|ИЗ
				|	РегистрБухгалтерии." + РегистрБухгалтерии.Имя + " КАК РБ
				|ГДЕ
				|	РБ." + Измерение.Имя + " ЕСТЬ NULL";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРегистраторов(ИмяРегистра)
	
	ТекстЗапроса = "";
	РегистрБухгалтерии = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	
	Для Каждого Измерение Из РегистрБухгалтерии.Измерения Цикл
		
		Если Измерение.ПризнакУчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ
			|
			|";
		КонецЕсли;
		
		Если Не Измерение.Балансовый И РегистрБухгалтерии.Корреспонденция Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РБ.Регистратор
			|ИЗ
			|	РегистрБухгалтерии." + РегистрБухгалтерии.Имя + " КАК РБ
			|ГДЕ
			|	РБ." + Измерение.Имя + "Дт ЕСТЬ NULL И РБ.СчетДт." + Измерение.ПризнакУчета.Имя + "
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РБ.Регистратор
			|ИЗ
			|	РегистрБухгалтерии." + РегистрБухгалтерии.Имя + " КАК РБ
			|ГДЕ
			|	РБ." + Измерение.Имя + "Кт ЕСТЬ NULL И РБ.СчетКт." + Измерение.ПризнакУчета.Имя;
		Иначе
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РБ.Регистратор
			|ИЗ
			|	РегистрБухгалтерии." + РегистрБухгалтерии.Имя + " КАК РБ
			|ГДЕ
			|	РБ." + Измерение.Имя + " ЕСТЬ NULL";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбработатьРегистрБухгалтерии(ИмяФайлаРБ, Регистраторы, ИмяРегистра, ИсправленныеПроблемы)
	
	ТипРегистрБухгалтерииНаборЗаписей = Тип("РегистрБухгалтерииНаборЗаписей." + ИмяРегистра);
	ОтключитьТекущиеИтоги(ИмяРегистра);
	
	ПоляДляКоррекции = ПолучитьПоляДляКоррекции(ИмяРегистра);
	Если ПоляДляКоррекции.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Коррекция не требуется, так как в структуре регистра отсутствуют измерения связанные с признаком учета.'");
	КонецЕсли;
	
	ПоляДляСравнения = ПолучитьПоляДляСравнения(ИмяРегистра);
	
	ЧтениеХМЛ = Новый ЧтениеXML();
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайлаРБ);
	ЧтениеХМЛ.ПерейтиКСодержимому(ПробельныеСимволыXML.ПоУмолчанию);
	
	Если ЧтениеХМЛ.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеХМЛ.Имя <> "Data" Тогда
		ВызватьИсключение НСтр("ru = 'Неверный формат PackageContents.xml! (начало узла Data)'");
	КонецЕсли;
	ЧтениеХМЛ.Прочитать();
	Попытка
		Пока ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.Имя = "DumpElement" Цикл
			ЧтениеХМЛ.Прочитать();
			НаборЗаписей = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипРегистрБухгалтерииНаборЗаписей);
			ДанныеЛога = ОбработатьНаборЗаписей(НаборЗаписей, ПоляДляКоррекции, ПоляДляСравнения, Регистраторы, ИмяРегистра, ИсправленныеПроблемы);
			Если ДанныеЛога <> Неопределено Тогда
				СчетчикИзменено = СчетчикИзменено + 1;
			КонецЕсли;
			ЧтениеХМЛ.Прочитать();
		КонецЦикла;
	Исключение
		ВызватьИсключение НСтр("ru = 'Не удалось прочитать данные регистра, необходимо загрузить архив в новую базу, обновить до текущей версии и выгрузить.'");
	КонецПопытки;
	
	ЧтениеХМЛ.Закрыть();
	
	ВосстановитьТекущиеИтоги(ИмяРегистра);
	
КонецПроцедуры

Функция ЗначениеВСтрокуXML(Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Процедура ОтключитьТекущиеИтоги(ИмяРегистра)

	Менеджер = РегистрыБухгалтерии[ИмяРегистра];
	Менеджер.УстановитьИспользованиеТекущихИтогов(Ложь);
	Менеджер.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов('00010101', '00010101');
	Менеджер.ПересчитатьИтоги();

КонецПроцедуры

Процедура ВосстановитьТекущиеИтоги(ИмяРегистра)

	МаксПериод = КонецМесяца(ТекущаяДатаСеанса());
	МинПериод = НачалоКвартала(МаксПериод);
	Менеджер = РегистрыБухгалтерии[ИмяРегистра];
	Менеджер.УстановитьИспользованиеТекущихИтогов(Истина);
	Менеджер.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(МинПериод, МаксПериод);
	Менеджер.ПересчитатьИтоги();

КонецПроцедуры

Функция ПолучитьПоляДляКоррекции(ИмяРегистра)
	Поля = Новый Массив;
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	Корреспонденция = МетаданныеРегистра.Корреспонденция;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если Измерение.ПризнакУчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не Измерение.Балансовый И Корреспонденция Тогда
			Поля.Добавить(Измерение.Имя + "Дт");
			Поля.Добавить(Измерение.Имя + "Кт");
		Иначе
			Поля.Добавить(Измерение.Имя);
		КонецЕсли;
	КонецЦикла;
	Возврат Поля;
КонецФункции

Функция ПолучитьПоляДляСравнения(ИмяРегистра)
	Поля = Новый Массив;
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	ПланСчетов = МетаданныеРегистра.ПланСчетов;
	Корреспонденция = МетаданныеРегистра.Корреспонденция;
	Поля.Добавить("Период");
	Если ПланСчетов <> Неопределено Тогда
		Если Корреспонденция Тогда
			Поля.Добавить("СчетДт");
			Поля.Добавить("СчетКт");
		Иначе
			Поля.Добавить("Счет");
		КонецЕсли;
		
		Если ПланСчетов.МаксКоличествоСубконто > 0 Тогда
			Если Корреспонденция Тогда
				Поля.Добавить("СубконтоДт");
				Поля.Добавить("СубконтоКт");
			Иначе
				Поля.Добавить("Субконто");
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
	
	Если Не Корреспонденция Тогда
		Поля.Добавить("ВидДвижения");
	КонецЕсли;
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если Измерение.ПризнакУчета <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не Измерение.Балансовый И Корреспонденция Тогда
			Поля.Добавить(Измерение.Имя + "Дт");
			Поля.Добавить(Измерение.Имя + "Кт");
		Иначе
			Поля.Добавить(Измерение.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Если Не Ресурс.Балансовый И Корреспонденция Тогда
			Поля.Добавить(Ресурс.Имя + "Дт");
			Поля.Добавить(Ресурс.Имя + "Кт");
		Иначе
			Поля.Добавить(Ресурс.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поля;
	
КонецФункции

Функция ОбработатьНаборЗаписей(ПрочитанныйНаборЗаписей, ПоляДляКоррекции, ПоляДляСравнения, Регистраторы, ИмяРегистра, ИсправленныеПроблемы)
	
	Регистратор = ПрочитанныйНаборЗаписей.Отбор.Регистратор.Значение;
	Если Регистраторы.Найти(Регистратор) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписиДляОбработки = Новый Массив;
	ИндексСтроки = 0;
	Для Каждого ПрочитаннаяЗапись Из ПрочитанныйНаборЗаписей Цикл
		Для Каждого Поле Из ПоляДляКоррекции Цикл
			Если ПрочитаннаяЗапись[Поле] <> NULL Тогда
				ЗаписиДляОбработки.Добавить(Новый Структура("ИндексСтроки, Запись", ИндексСтроки, ПрочитаннаяЗапись));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИндексСтроки = ИндексСтроки + 1;;
	КонецЦикла;
	Если ЗаписиДляОбработки.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	НаборСтарый = ЗначениеВСтрокуXML(НаборЗаписей);
	
	Изменено = Ложь;
	Для Каждого ЗаписьДляОбработки Из ЗаписиДляОбработки Цикл
		Обработана = Ложь;
		Найдена = Ложь;
		Если ЗаписьДляОбработки.ИндексСтроки < НаборЗаписей.Количество() Тогда
			ЗаписьИБ = НаборЗаписей[ЗаписьДляОбработки.ИндексСтроки];
			Если ПроверитьПоляНаСовпадение(ЗаписьИБ, ЗаписьДляОбработки.Запись, ПоляДляСравнения) Тогда
				Найдена = Истина;
				Если ОбработатьЗначения(ЗаписьИБ, ЗаписьДляОбработки.Запись, ПоляДляКоррекции, ИсправленныеПроблемы, ИмяРегистра) Тогда
					Обработана = Истина;
					Изменено = Истина;
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
	
	Если Изменено Тогда
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(); 
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьПоляНаСовпадение(ЗаписьИБ, ПрочитаннаяЗапись, ПоляДляСравнения)
	Изменено = Ложь;
	Для каждого Поле Из ПоляДляСравнения Цикл
		Если Поле = "Субконто" Тогда
			Равно = СравнитьСубконто(ЗаписьИБ.Субконто, ПрочитаннаяЗапись.Субконто);
		ИначеЕсли Поле = "СубконтоДт" Тогда
			Равно = СравнитьСубконто(ЗаписьИБ.СубконтоДт, ПрочитаннаяЗапись.СубконтоДт);
		ИначеЕсли Поле = "СубконтоКт" Тогда
			Равно = СравнитьСубконто(ЗаписьИБ.СубконтоКт, ПрочитаннаяЗапись.СубконтоКт);
		Иначе
			Равно = ЗаписьИБ[Поле] =  ПрочитаннаяЗапись[Поле];
		КонецЕсли;
		Если Не Равно Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ОбработатьЗначения(ЗаписьИБ, ПрочитаннаяЗапись, ПоляДляКоррекции, ИсправленныеПроблемы, ИмяРегистра)
	
	Изменено = Ложь;
	
	Для Каждого Поле Из ПоляДляКоррекции Цикл
		Если ЗаписьИБ[Поле] = NULL И ПрочитаннаяЗапись[Поле] <> NULL Тогда
			
			СтрокаИзменений = ИсправленныеПроблемы.Добавить();
			СтрокаИзменений.Регистратор = ЗаписьИБ.Регистратор;
			СтрокаИзменений.НомерСтроки = ЗаписьИБ.НомерСтроки;
			СтрокаИзменений.РегистрИмя = ИмяРегистра;
			СтрокаИзменений.ИзмерениеИмя = Поле;
			СтрокаИзменений.СтароеЗначение = ЗаписьИБ[Поле];
			СтрокаИзменений.НовоеЗначение = ПрочитаннаяЗапись[Поле];
			
			ЗаписьИБ[Поле] = ПрочитаннаяЗапись[Поле];
			Изменено = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Изменено;
	
КонецФункции

Функция СравнитьСубконто(СубконтоИБ, ПрочитанныеСубконто)
	
	Если СубконтоИБ.Количество() <> ПрочитанныеСубконто.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементСубконто Из ПрочитанныеСубконто Цикл
		ПрочитанноеЗначение = ЭлементСубконто.Значение;
		ЗначениеИБ = СубконтоИБ[ЭлементСубконто.Ключ];
		Если ЗначениеЗаполнено(ЗначениеИБ) Или ЗначениеЗаполнено(ПрочитанноеЗначение) Тогда
			Если ЗначениеИБ <> ПрочитанноеЗначение Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПредставленияИзмерений()
	
	ПредставленияИзмерений = Новый ТаблицаЗначений;
	ПредставленияИзмерений.Колонки.Добавить("РегистрИмя", Новый ОписаниеТипов("Строка"));
	ПредставленияИзмерений.Колонки.Добавить("ИзмерениеИмя", Новый ОписаниеТипов("Строка"));
	ПредставленияИзмерений.Колонки.Добавить("РегистрПредставление", Новый ОписаниеТипов("Строка"));
	ПредставленияИзмерений.Колонки.Добавить("ИзмерениеПредставление", Новый ОписаниеТипов("Строка"));
	
	Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		
		Для Каждого Измерение Из РегистрБухгалтерии.Измерения Цикл
			
			Если Измерение.ПризнакУчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Измерение.Балансовый И РегистрБухгалтерии.Корреспонденция Тогда
				
				СтрокаТаблицы = ПредставленияИзмерений.Добавить();
				СтрокаТаблицы.РегистрИмя = РегистрБухгалтерии.Имя;
				СтрокаТаблицы.РегистрПредставление = РегистрБухгалтерии.Синоним;
				СтрокаТаблицы.ИзмерениеИмя = Измерение.Имя + "Дт";
				СтрокаТаблицы.ИзмерениеПредставление = Измерение.Синоним + " Дт";
				
				СтрокаТаблицы = ПредставленияИзмерений.Добавить();
				СтрокаТаблицы.РегистрИмя = РегистрБухгалтерии.Имя;
				СтрокаТаблицы.РегистрПредставление = РегистрБухгалтерии.Синоним;
				СтрокаТаблицы.ИзмерениеИмя = Измерение.Имя + "Кт";
				СтрокаТаблицы.ИзмерениеПредставление = Измерение.Синоним + " Кт";
				
			Иначе
				СтрокаТаблицы = ПредставленияИзмерений.Добавить();
				СтрокаТаблицы.РегистрИмя = РегистрБухгалтерии.Имя;
				СтрокаТаблицы.РегистрПредставление = РегистрБухгалтерии.Синоним;
				СтрокаТаблицы.ИзмерениеИмя = Измерение.Имя;
				СтрокаТаблицы.ИзмерениеПредставление = Измерение.Синоним;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПредставленияИзмерений;
	
КонецФункции

Функция СформироватьОтчет(ВыбранныеРегистры, ИсправленныеПроблемы = Неопределено)
	
	ТекстЗапроса = ТекстЗапросаДляОтчета(ВыбранныеРегистры);
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СхемаКомпоновки = Обработки.ПроверкаИзмеренийВРегистрахБухгалтерии.ПолучитьМакет("Отчет");
	СхемаКомпоновки.НаборыДанных.Объединение.Элементы.НайденныеПроблемы.Запрос = ТекстЗапроса;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Представления", ПредставленияИзмерений());
	
	Если ИсправленныеПроблемы = Неопределено Тогда
		ВнешниеНаборыДанных.Вставить("ИсправленныеПроблемы", ТаблицаИсправленныеПроблемы());
		НастройкиСКД = СхемаКомпоновки.ВариантыНастроек[0].Настройки;
	Иначе
		ВнешниеНаборыДанных.Вставить("ИсправленныеПроблемы", ИсправленныеПроблемы);
		НастройкиСКД = СхемаКомпоновки.ВариантыНастроек[1].Настройки;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиСКД);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТабличныйДокумент = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТаблицаИсправленныеПроблемы()
	
	ТипыРегистраторов = Новый Массив;
	ТипыИзмерений = Новый Массив;
	ТипыСчетов = Новый Массив;
	Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		ДополнитьМассив(ТипыРегистраторов, РегистрБухгалтерии.СтандартныеРеквизиты.Регистратор.Тип.Типы());
		Для Каждого Измерение Из РегистрБухгалтерии.Измерения Цикл
			Если Измерение.ПризнакУчета <> Неопределено Тогда
				ДополнитьМассив(ТипыИзмерений, Измерение.Тип.Типы());
			КонецЕсли;
		КонецЦикла;
		ДополнитьМассив(ТипыСчетов, РегистрБухгалтерии.ПланСчетов.СтандартныеРеквизиты.Ссылка.Тип.Типы());
	КонецЦикла;
	
	ИсправленныеПроблемы = Новый ТаблицаЗначений;
	ИсправленныеПроблемы.Колонки.Добавить("Регистратор", Новый ОписаниеТипов(ТипыРегистраторов));
	ИсправленныеПроблемы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсправленныеПроблемы.Колонки.Добавить("ДтКт", Новый ОписаниеТипов("Строка"));
	ИсправленныеПроблемы.Колонки.Добавить("Счет", Новый ОписаниеТипов(ТипыСчетов));
	ИсправленныеПроблемы.Колонки.Добавить("РегистрИмя", Новый ОписаниеТипов("Строка"));
	ИсправленныеПроблемы.Колонки.Добавить("ИзмерениеИмя", Новый ОписаниеТипов("Строка"));
	ИсправленныеПроблемы.Колонки.Добавить("СтароеЗначение", Новый ОписаниеТипов(ТипыИзмерений));
	ИсправленныеПроблемы.Колонки.Добавить("НовоеЗначение", Новый ОписаниеТипов(ТипыИзмерений));
	
	Возврат ИсправленныеПроблемы;
	
КонецФункции

Процедура ДополнитьМассив(МассивПриемник, МассивИсточник)
	
	УникальныеЗначения = Новый Соответствие;
	
	Для Каждого Значение Из МассивПриемник Цикл
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
	Для Каждого Значение Из МассивИсточник Цикл
		Если УникальныеЗначения[Значение] = Неопределено Тогда
			МассивПриемник.Добавить(Значение);
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура Проверить(ВыбранныеРегистры, Результат)
	
	ТабличныйДокумент = СформироватьОтчет(ВыбранныеРегистры);
	
	Если ТабличныйДокумент = Неопределено Или ТабличныйДокумент.ВысотаТаблицы <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбнаруженоПроблем = ТабличныйДокумент.ВысотаТаблицы - 3;
	
	Если ОбнаруженоПроблем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат.ОбнаруженыПроблемы = Истина;
	Результат.ПредставлениеРезультата = СтрШаблон(НСтр("ru = 'Обнаружено проблем: %1'"), ОбнаруженоПроблем);
	Результат.ТабличныйДокумент = ТабличныйДокумент;
	
КонецПроцедуры

Процедура Исправить(ВыбранныеРегистры, ВременныеДанные, Результат)
	
	Если Не ПроверкаСхемыXDTO() Тогда
		ВызватьИсключение НСтр("ru = 'Для исправления требуется обновление XDTO схемы в ИБ'");
	КонецЕсли;
	
	ИсправленныеПроблемы = ТаблицаИсправленныеПроблемы();
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	Для Каждого КлючИЗначение Из ВременныеДанные Цикл
		
		Если ВыбранныеРегистры.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КлючИЗначение.Значение.Получить().Записать(ИмяФайла);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаРегистраторов(КлючИЗначение.Ключ);
		Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
		ОбработатьРегистрБухгалтерии(ИмяФайла, Регистраторы, КлючИЗначение.Ключ, ИсправленныеПроблемы);
		
	КонецЦикла;
	
	ИсправленныеПроблемы.Колонки.Добавить("Исправлено", Новый ОписаниеТипов("Булево"));
	ИсправленныеПроблемы.ЗаполнитьЗначения(Истина, "Исправлено");
	
	ТабличныйДокумент = СформироватьОтчет(ВыбранныеРегистры, ИсправленныеПроблемы);
	
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайла);
	
	ИсправленоПроблем = ИсправленныеПроблемы.Количество();
	НеИсправленоПроблем = ТабличныйДокумент.ВысотаТаблицы - ИсправленоПроблем - 7;
	
	Результат.ОбнаруженыПроблемы = НеИсправленоПроблем > 0;
	Результат.ТабличныйДокумент = ТабличныйДокумент;
	
	Если ИсправленоПроблем = 0 И НеИсправленоПроблем = 0 Тогда
		Результат.ТабличныйДокумент = Неопределено;
		Возврат;
	ИначеЕсли ИсправленоПроблем = 0 Тогда
		Результат.ПредставлениеРезультата = СтрШаблон(НСтр("ru = 'Найдено проблем: %1'"), НеИсправленоПроблем);
	ИначеЕсли НеИсправленоПроблем = 0 Тогда
		Результат.ПредставлениеРезультата = СтрШаблон(НСтр("ru = 'Исправлено проблем: %1'"), ИсправленоПроблем);
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не удалось исправить проблем: %1, исправлено проблем: %2'");
		Результат.ПредставлениеРезультата = СтрШаблон(ШаблонСообщения, НеИсправленоПроблем, ИсправленоПроблем);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли