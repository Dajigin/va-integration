
#Область ОбработчикиСобытийФормы
    
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Элементы.Предупреждение.Видимость = Ложь;
    СвойстваВерсии = ПрограммныйИнтерфейсСервиса.СвойстваВерсииИнтерфейса();
    Если СвойстваВерсии.Версия < 5 Тогда
        ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Автоматическая оплата сервиса не поддерживается.'"),,,, Отказ);
        Возврат;
    КонецЕсли; 
    
    Абонент = ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения();
    КодАбонента = Абонент.Код;
    Если Абонент.РольПользователя <> Перечисления.РолиПользователейАбонентов.ВладелецАбонента Тогда
        ПоказатьОшибку(НСтр("ru = 'Оплата сервиса доступна только пользователю с ролью ''Владелец абонента''.'"));
    КонецЕсли;
    
    ОбслуживающиеОрганизации.Загрузить(ПрограммныйИнтерфейсСервиса.ОбслуживающиеОрганизацииАбонента());
    Для Каждого Строка Из ОбслуживающиеОрганизации Цикл
        Элементы.КодОО.СписокВыбора.Добавить(Строка.Код, Строка.Наименование);
    КонецЦикла;
    Элементы.ПредставлениеОО.Видимость = (ОбслуживающиеОрганизации.Количество() = 1);
    Элементы.КодОО.Видимость = (ОбслуживающиеОрганизации.Количество() > 1);
    
    Если ОбслуживающиеОрганизации.Количество() > 0 Тогда
        КодОО = ОбслуживающиеОрганизации[0].Код;
        ПредставлениеОО = ОбслуживающиеОрганизации[0].Наименование;
    КонецЕсли;
    
    ИмяФормыОбработкиОтвета = Тарификация.ИмяФормыОбработкиОтвета();
    
    ПриИзмененииОбслуживающейОрганизации();
    
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодОбслуживающейОрганизацииПриИзменении(Элемент)
    
    ПриИзмененииОбслуживающейОрганизации();
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеТарифы(Команда)
    
    ПараметрыФормы = Новый Структура("КодОбслуживающейОрганизации", КодОО);
    Оповещение = Новый ОписаниеОповещения("ВсеТарифыЗакрытие", ЭтотОбъект);
     
    ОткрытьФорму("Обработка.ОплатаСервиса.Форма.ВыбораТарифа", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
    
КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы - команда продления тарифа.
&НаКлиенте
Процедура Подключаемый_ПродлитьТариф(Команда)
    
    Идентификаторы = СтрРазделить(СтрЗаменить(Команда.Имя, "Вариант", ""),"_",Ложь);
    ИдентификаторГруппы = Число(Идентификаторы[0]);
    КодПериода = Идентификаторы[1];
    
    Если ЗапроситьСчетНаОплату(ИдентификаторГруппы, КодПериода) Тогда
        ОткрытьФормуОбработкиДанных();
    КонецЕсли;
    
КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы - команда открытия описания тарифа.
&НаКлиенте
Процедура Подключаемый_ОткрытьОписание(Команда)
    
    Идентификатор = СтрЗаменить(Команда.Имя, "Описание_", "");
	ИдентификаторГруппы = Число(Идентификатор);
    Подписка = ГруппыПодписок.НайтиПоИдентификатору(ИдентификаторГруппы);
    
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ИспользоватьТарифыОО", ИспользоватьТарифыОО);
    ПараметрыФормы.Вставить("КодОО", КодОО);
    ПараметрыФормы.Вставить("КодБазовогоТарифа", Подписка.КодБазовогоТарифа);
    ПараметрыФормы.Вставить("КодТарифа", Подписка.КодТарифа);
    
    ОткрытьФорму("Обработка.ОплатаСервиса.Форма.ОписаниеТарифа", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПоказатьПодписки(СоздаватьВариантыПродления)
	
    ВсеПодпискиАбонента = ПрограммныйИнтерфейсСервиса.ПодпискиАбонента();
    ВсеПодпискиАбонента.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Булево"));
    ВсеПодпискиАбонента.Колонки.Добавить("Активная", Новый ОписаниеТипов("Булево"));
    ВсеПодпискиАбонента.Колонки.Добавить("Завершена", Новый ОписаниеТипов("Булево"));
    ВсеПодпискиАбонента.Индексы.Добавить("ТипПодписки, Расширение, Номер, НомерОсновнойПодписки");
    
    // Если по основной подписке есть продление, то нужно использовать дату отключения продлевающей подписки.
    Продления = ВсеПодпискиАбонента.НайтиСтроки(Новый Структура("ТипПодписки", Перечисления.ТипыПодписокСервиса.Продлевающая));
    Для Каждого Продление Из Продления Цикл
        ОсновнаяПодписка = ВсеПодпискиАбонента.Найти(Продление.НомерОсновнойПодписки, "Номер");
        Если ЗначениеЗаполнено(ОсновнаяПодписка) Тогда
            ОсновнаяПодписка.ДатаОтключения = Продление.ДатаОтключения;
        КонецЕсли; 
    КонецЦикла; 
    
    // Получим все тарифы по основным подпискам и установим признак тарифа "Расширение" в таблице подписок.
    ОсновныеПодписки = ВсеПодпискиАбонента.НайтиСтроки(Новый Структура("ТипПодписки", Перечисления.ТипыПодписокСервиса.Основная)); 
    ТарифыПодписок = Новый Соответствие;
    Для Каждого Подписка Из ОсновныеПодписки Цикл
        ТарифПодписки = ТарифыПодписок.Получить(Подписка.КодТарифа);
        Если Не ЗначениеЗаполнено(ТарифПодписки) Тогда
            ТарифПодписки = ПрограммныйИнтерфейсСервиса.ТарифСервиса(Подписка.КодТарифа); 
            ТарифыПодписок.Вставить(Подписка.КодТарифа, ТарифПодписки);
        КонецЕсли; 
        Подписка.Активная = (Подписка.ДатаПодключения <= ТекущаяДатаСеанса() И Подписка.ДатаОтключения >= ТекущаяДатаСеанса());
        Подписка.Завершена = Подписка.ДатаОтключения < ТекущаяДатаСеанса();
        Подписка.Расширение = ТарифПодписки.РасширениеТарифа;
    КонецЦикла;
    
    ТарифыОО.Очистить();
    Если ИспользоватьТарифыОО Тогда
        ТарифыОО.Загрузить(ПрограммныйИнтерфейсСервиса.ТарифыОбслуживающейОрганизации(КодОО));
    КонецЕсли;
    
    // Обработаем основные подписки, разбив их по группам.
    Отбор = Новый Структура("ТипПодписки, Расширение, Завершена", Перечисления.ТипыПодписокСервиса.Основная, Ложь, Ложь);
    ОсновныеПодпискиБезТарифовРасширений = ВсеПодпискиАбонента.НайтиСтроки(Отбор);
    
    ГруппыПодписок.Очистить();
    СоставыГруппПодписок.Очистить();
    
    Для Каждого Строка Из ОсновныеПодпискиБезТарифовРасширений Цикл
        ДатаОтключения = НачалоДня(Строка.ДатаОтключения); 
        Тариф = ТарифПодписки(Строка.КодТарифа, ТарифыПодписок, Истина);
        Отбор = Новый Структура("КодТарифа, ДатаОтключения", Тариф.Код, ДатаОтключения);
        Результат = ГруппыПодписок.НайтиСтроки(Отбор);
        Если Результат.Количество() = 0 Тогда
            ЭлементГруппы = ГруппыПодписок.Добавить();
            ЭлементГруппы.КодТарифа = Тариф.Код;
            ЭлементГруппы.КодБазовогоТарифа = Строка.КодТарифа;
            ЭлементГруппы.Наименование = Тариф.Наименование;
            ЭлементГруппы.ДатаПодключения = Строка.ДатаПодключения;
            ЭлементГруппы.ДатаОтключения = ДатаОтключения;
            ЭлементГруппы.Активная = Строка.Активная;
        Иначе 
            ЭлементГруппы = Результат[0];
        КонецЕсли;
        ЭлементСостава = ЭлементГруппы.СоставГруппы.Добавить();
        ЭлементСостава.КодТарифа = Тариф.Код;
        ЭлементСостава.КодБазовогоТарифа = Строка.КодТарифа;
        ЭлементСостава.Наименование = Тариф.Наименование;
        ЭлементСостава.НомерПодписки = Строка.Номер;
        ЭлементСостава.Количество = 1;
        ЭлементГруппы.Количество = ЭлементГруппы.Количество + 1;
        // Добавим в состав тарифы-расширения
        Отбор = Новый Структура;
        Отбор.Вставить("ТипПодписки", Перечисления.ТипыПодписокСервиса.Основная);
        Отбор.Вставить("Расширение",Истина); 
        Отбор.Вставить("НомерОсновнойПодписки", Строка.Номер);  
        Для Каждого РасширениеПодписки Из ВсеПодпискиАбонента.НайтиСтроки(Отбор) Цикл
            Тариф = ТарифПодписки(РасширениеПодписки.КодТарифа, ТарифыПодписок, Истина);
            ЭлементСостава = ЭлементГруппы.СоставГруппы.Добавить();
            ЭлементСостава.КодТарифа = Тариф.Код;
            ЭлементСостава.КодБазовогоТарифа = РасширениеПодписки.КодТарифа;
            ЭлементСостава.НомерПодписки = РасширениеПодписки.Номер;
            ЭлементСостава.Количество = 1;
            ЭлементСостава.Расширение = Истина;
            ЭлементСостава.Наименование = Тариф.Наименование;
        КонецЦикла;
    КонецЦикла;
    
    // Для групп действующих подписок определим доступные периоды продления.
    // Как базовые используются периоды продления основного тарифа. Для него подбираются периоды продления тарифов-расширений.
    Для Каждого Группа Из ГруппыПодписок Цикл
        // Тарифы, закончившие свое действие не могут быть продлены на новый срок.
        ДатаОкончанияДействияТарифа = ТарифыПодписок.Получить(Группа.КодБазовогоТарифа).ДатаОкончанияДействия;
        Если ЗначениеЗаполнено(ДатаОкончанияДействияТарифа) И ДатаОкончанияДействияТарифа < ТекущаяДатаСеанса() Тогда
            Продолжить;
        КонецЕсли; 
        // Определим общие периоды для всех тарифов группы, чтобы составить возможные к продаже варианты продления.
        ОсновнойТариф = ТарифПодписки(Группа.КодБазовогоТарифа, ТарифыПодписок, Ложь);
        Если Не ЗначениеЗаполнено(ОсновнойТариф) Тогда
            Продолжить;
        КонецЕсли;
        Для Каждого Период Из ОсновнойТариф.ПериодыДействия Цикл
            ИспользованиеПериода = Истина;
            Для Каждого СтрокаСостава Из Группа.СоставГруппы Цикл
                Тариф = ТарифПодписки(СтрокаСостава.КодБазовогоТарифа, ТарифыПодписок, Ложь);
                Если Не ЗначениеЗаполнено(Тариф) Тогда
                    Продолжить;
                КонецЕсли;
                ПериодДействия = Тариф.ПериодыДействия.Найти(Период.Код);
                // Используются только платные периоды.
                ИспользованиеПериода = (ЗначениеЗаполнено(ПериодДействия) И ПериодДействия.Сумма > 0);
                Если Не ИспользованиеПериода Тогда
                    Прервать;
                КонецЕсли; 
            КонецЦикла; 
            Если ИспользованиеПериода = Истина Тогда
                ПериодПродления = Группа.ПериодыПродления.Добавить();
                ЗаполнитьЗначенияСвойств(ПериодПродления, Период);
                ПериодПродления.Сумма = 0;
            КонецЕсли;
        КонецЦикла;
        // Заполним цены тарифов по периодам и общие суммы периодов продления.
        Для Каждого ПериодПродления Из Группа.ПериодыПродления Цикл
            Для Каждого СтрокаСостава Из Группа.СоставГруппы Цикл
                Тариф = ТарифПодписки(СтрокаСостава.КодБазовогоТарифа, ТарифыПодписок, Ложь);
                Если Не ЗначениеЗаполнено(Тариф) Тогда
                    Продолжить;
                КонецЕсли;
            	ПериодТарифа = Тариф.ПериодыДействия.Найти(ПериодПродления.Код);
                НовыйСоставГруппы = СоставыГруппПодписок.Добавить();
                ЗаполнитьЗначенияСвойств(НовыйСоставГруппы, СтрокаСостава);
                НовыйСоставГруппы.КодПериода = ПериодПродления.Код;
                НовыйСоставГруппы.Сумма = ПериодТарифа.Сумма;
                НовыйСоставГруппы.ИдентификаторГруппы = Группа.ПолучитьИдентификатор();
                ПериодПродления.Сумма = ПериодПродления.Сумма + ПериодТарифа.Сумма;
            КонецЦикла; 
        КонецЦикла;
        Группа.ПериодыПродления.Сортировать("Сумма");
    КонецЦикла;
    
    // Отобразим активные подписки
    АктивныеПодписки = ГруппыПодписок.НайтиСтроки(Новый Структура("Активная", Истина));
    Элементы.ДекорацияНетАктивныхПодписок.Видимость = (АктивныеПодписки.Количество() = 0);
    Для Каждого Группа Из АктивныеПодписки Цикл
        СоздатьЭлементыПодписки(Группа, СоздаватьВариантыПродления, ЦветаСтиля.ТекущиеПодпискиЦвет, Элементы.ГруппаАктивныеПодписки);
    КонецЦикла;
    
    // Отобразим будущие подписки
    БудущиеПодписки = ГруппыПодписок.НайтиСтроки(Новый Структура("Активная", Ложь));
    Элементы.ГруппаБудущиеПодписки.Видимость = (БудущиеПодписки.Количество() > 0);
    Элементы.ДекорацияБудущиеПодписки.Видимость = (БудущиеПодписки.Количество() > 0);
    Для Каждого Группа Из БудущиеПодписки Цикл
        СоздатьЭлементыПодписки(Группа, Ложь, ЦветаСтиля.БудущиеПодпискиЦвет, Элементы.ГруппаБудущиеПодписки);        
    КонецЦикла;  
    
КонецПроцедуры

&НаСервере
Функция ТарифПодписки(КодТарифа, ТарифыПодписок, ВозвращатьТарифСервисаПриОтсутствииТарифаОО)
    
    Тариф = ТарифыПодписок.Получить(КодТарифа);
    Если ИспользоватьТарифыОО Тогда
        Поиск = ТарифыОО.НайтиСтроки(Новый Структура("КодБазовогоТарифа", КодТарифа));
        Если Поиск.Количество() > 0 Тогда
            ТарифОО = ПрограммныйИнтерфейсСервисаПовтИсп.ТарифОбслуживающейОрганизации(КодОО, Поиск[0].Код);
            Если ЗначениеЗаполнено(ТарифОО) Тогда
                ТарифОО.Вставить("РасширениеТарифа", Тариф.РасширениеТарифа);
                Тариф = ТарифОО;
            ИначеЕсли Не ВозвращатьТарифСервисаПриОтсутствииТарифаОО Тогда
                Тариф = Неопределено;   
            КонецЕсли;
        ИначеЕсли Не ВозвращатьТарифСервисаПриОтсутствииТарифаОО Тогда
            Тариф = Неопределено;            
        КонецЕсли;
    КонецЕсли;
    
    Возврат Тариф;

КонецФункции


// Параметры:
// 	Группа - СтрокаТабличнойЧасти - информация по группе подписки.
// 	СоздаватьВариантыПродления - Булево - признак создания вариантов продления тарифа.
// 	ЦветФонаПодписки - Цвет - цвет фона создаваемой группы. 
// 	РодительскаяГруппа - ГруппаФормы - родительская группа.
&НаСервере
Процедура СоздатьЭлементыПодписки(Группа, СоздаватьВариантыПродления, ЦветФонаПодписки, РодительскаяГруппа)
    
    ИдентификаторГруппы = Группа.ПолучитьИдентификатор();
	Префикс = "Подписка" + ИдентификаторГруппы;
    ИмяГруппаПодписка = Префикс + "ГруппаПодписка";
    ИмяГруппаОписание = Префикс + "ГруппаОписание";
    ИмяГруппаОсновная = Префикс + "ГруппаОсновная";
    ИмяГруппаРасширения = Префикс + "ГруппаРасширения";
    ИмяГруппаРасширение = Префикс + "ГруппаРасширение";
    ИмяТариф = Префикс + "Тариф";
    ИмяСрокДействия = Префикс + "СрокДействия";
    ИмяПродлитьНа = Префикс + "ПродлитьНа";
    
    ГруппаПодписка = Элементы.Добавить(ИмяГруппаПодписка, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаПодписка.Вид  = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПодписка.ОтображатьЗаголовок = Ложь;
	ГруппаПодписка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПодписка.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
    ГруппаПодписка.РастягиватьПоГоризонтали = Истина;
    ГруппаПодписка.ЦветФона = ЦветФонаПодписки;
    
    ГруппаОсновная = Элементы.Добавить(ИмяГруппаОсновная, Тип("ГруппаФормы"), ГруппаПодписка);
	ГруппаОсновная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновная.ОтображатьЗаголовок = Ложь;
	ГруппаОсновная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаОсновная.Отображение = ОтображениеОбычнойГруппы.Нет;
    
    ГруппаОписание = Элементы.Добавить(ИмяГруппаОписание, Тип("ГруппаФормы"), ГруппаОсновная);
	ГруппаОписание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОписание.ОтображатьЗаголовок = Ложь;
	ГруппаОписание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОписание.Отображение = ОтображениеОбычнойГруппы.Нет;
    
    ГруппаТариф = Элементы.Добавить("Группа" + ИмяТариф, Тип("ГруппаФормы"), ГруппаОписание);
	ГруппаТариф.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТариф.ОтображатьЗаголовок = Ложь;
	ГруппаТариф.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаТариф.Отображение = ОтображениеОбычнойГруппы.Нет;
    
    ДекорацияТариф = Элементы.Добавить(ИмяТариф, Тип("ДекорацияФормы"), ГруппаТариф); // ДекорацияФормы - 
    ДекорацияТариф.Вид = ВидДекорацииФормы.Надпись;
    ДекорацияТариф.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
    ДекорацияТариф.Заголовок = ?(Группа.Количество = 1, Группа.Наименование, 
        СтрШаблон("%1 
            |Х %2", Группа.Наименование, Группа.Количество));
    ДекорацияТариф.Ширина = 15;
    
    ИмяОписание = "Описание_" + ИдентификаторГруппы;
    ИсходнаяКоманда = Команды.Найти(ИмяОписание);
    Если ИсходнаяКоманда <> Неопределено Тогда
        Команды.Удалить(ИсходнаяКоманда);
    КонецЕсли; 
	КомандаОписание = Команды.Добавить(ИмяОписание);
	КомандаОписание.Действие = "Подключаемый_ОткрытьОписание";
	КомандаОписание.Заголовок = "?";
	КнопкаОписание = Элементы.Добавить(ИмяОписание, Тип("КнопкаФормы"), ГруппаТариф);
	КнопкаОписание.ИмяКоманды = ИмяОписание;
    КнопкаОписание.Вид = ВидКнопкиФормы.Гиперссылка;
    
    ДекорацияСрокДействия = Элементы.Добавить(ИмяСрокДействия, Тип("ДекорацияФормы"), ГруппаОписание); 
    ДекорацияСрокДействия.Вид = ВидДекорацииФормы.Надпись;
    ДекорацияСрокДействия.Заголовок = ?(Группа.ДатаПодключения > ТекущаяДатаСеанса(), 
        СтрШаблон(НСтр("ru = 'С %1
                       |до %2'"), Формат(Группа.ДатаПодключения, "ДФ='d MMMM yyyy ''г.'''"),
        Формат(Группа.ДатаОтключения, "ДФ='d MMMM yyyy ''г.'''")),
        Формат(Группа.ДатаОтключения, "ДФ='До d MMMM yyyy ''г.'''"));
        
    ДекорацияСрокДействия.Ширина = 15;
    
    РасширенияГруппы = Группа.СоставГруппы.Выгрузить();
    РасширенияГруппы.Свернуть("КодТарифа, Наименование, Расширение", "Количество");
    Расширения = РасширенияГруппы.НайтиСтроки(Новый Структура("Расширение", Истина));
    
    ГруппаРасширения = Элементы.Добавить(ИмяГруппаРасширения, Тип("ГруппаФормы"), ГруппаПодписка);
	ГруппаРасширения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРасширения.ОтображатьЗаголовок = Ложь;
	ГруппаРасширения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаРасширения.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
    ГруппаРасширения.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
    
    Для Каждого СтрокаРасширения Из Расширения Цикл
        
        ГруппаРасширение = Элементы.Добавить(ИмяГруппаРасширение + РасширенияГруппы.Индекс(СтрокаРасширения), Тип("ГруппаФормы"), ГруппаРасширения);
    	ГруппаРасширение.Вид = ВидГруппыФормы.ОбычнаяГруппа;
    	ГруппаРасширение.ОтображатьЗаголовок = Ложь;
    	ГруппаРасширение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
    	ГруппаРасширение.Отображение = ОтображениеОбычнойГруппы.Нет;
        ГруппаРасширение.ЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
        ГруппаРасширение.РастягиватьПоГоризонтали = Ложь;
        
        ДекорацияРасширение = Элементы.Добавить(ИмяТариф + РасширенияГруппы.Индекс(СтрокаРасширения), Тип("ДекорацияФормы"), ГруппаРасширение);
        ДекорацияРасширение.Вид = ВидДекорацииФормы.Надпись;
        ДекорацияРасширение.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
        ДекорацияРасширение.Заголовок = ?(СтрокаРасширения.Количество = 1, СтрокаРасширения.Наименование, 
            СтрШаблон("%1 
            |Х %2", СтрокаРасширения.Наименование, СтрокаРасширения.Количество));
        ДекорацияРасширение.Ширина = 20;
        
    КонецЦикла; 
    
    Если Не СоздаватьВариантыПродления Тогда
        Возврат;
    КонецЕсли;
    
	ШаблонВарианта = "Вариант_%1_%2";
	
	Если Группа.ПериодыПродления.Количество() = 0 Тогда
        ТекстПродления = НСтр("ru = 'Эту подписку нельзя продлить.'"); 
        ДекорацияПродлитьНа = Элементы.Добавить(ИмяПродлитьНа, Тип("ДекорацияФормы"), ГруппаОсновная); 
        ДекорацияПродлитьНа.Вид = ВидДекорацииФормы.Надпись;
        ДекорацияПродлитьНа.Заголовок = ТекстПродления;
        ДекорацияПродлитьНа.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
        ДекорацияПродлитьНа.Высота = 3;
		Возврат;
	КонецЕсли;
    
    ТекстПродления = ?(Группа.ПериодыПродления.Количество() > 0, НСтр("ru = 'Продлить:'"), НСтр("ru = 'Эту подписку нельзя продлить.'")); 
    ДекорацияПродлитьНа = Элементы.Добавить(ИмяПродлитьНа, Тип("ДекорацияФормы"), ГруппаОсновная); 
    ДекорацияПродлитьНа.Вид = ВидДекорацииФормы.Надпись;
    ДекорацияПродлитьНа.Заголовок = ТекстПродления;
    ДекорацияПродлитьНа.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
    ДекорацияПродлитьНа.Высота = 3;
    
    ВысотаКнопкиПродления = 3;
    
    ГруппаКнопки = Элементы.Добавить("Кнопки_"+ ИдентификаторГруппы, Тип("ГруппаФормы"), ГруппаОсновная);
 	ГруппаКнопки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
   	ГруппаКнопки.ОтображатьЗаголовок = Ложь;
   	ГруппаКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
   	ГруппаКнопки.Отображение = ОтображениеОбычнойГруппы.Нет;
    
    НомерБлока = -1;
    Для НомерВарианта = 0 По Группа.ПериодыПродления.Количество() - 1 Цикл
        ВариантПродления = Группа.ПериодыПродления[НомерВарианта];
	    ИндексВарианта = ВариантПродления.ПолучитьИдентификатор();
		ИмяЭлемента = СтрШаблон(ШаблонВарианта, ИдентификаторГруппы, ВариантПродления.Код);
        ИсходнаяКоманда = Команды.Найти(ИмяЭлемента);
        Если ИсходнаяКоманда <> Неопределено Тогда
            Команды.Удалить(ИсходнаяКоманда);
        КонецЕсли;
		КомандаПродления = Команды.Добавить(ИмяЭлемента);
		КомандаПродления.Действие = "Подключаемый_ПродлитьТариф";
		КомандаПродления.Заголовок = СтрШаблон(НСтр("ru = 'На %1
            |за %2 %3'"),
            НРег(ВариантПродления.Наименование),
			ВариантПродления.Сумма,
            Тарификация.ПредставлениеВалютыОплаты());
            
        Если Цел(НомерВарианта / 6) > НомерБлока Тогда
            НомерБлока = НомерБлока + 1;
            БлокКнопки = Элементы.Добавить("Кнопки_"+ ИдентификаторГруппы + "_" + НомерБлока , Тип("ГруппаФормы"), ГруппаКнопки);
         	БлокКнопки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
           	БлокКнопки.ОтображатьЗаголовок = Ложь;
           	БлокКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
           	БлокКнопки.Отображение = ОтображениеОбычнойГруппы.Нет; 
        КонецЕсли;
        ИсходныйЭлемент = Элементы.Найти(ИмяЭлемента);
        Если ИсходныйЭлемент <> Неопределено Тогда
            Элементы.Удалить(ИсходныйЭлемент);
        КонецЕсли; 
		КнопкаПродления = Элементы.Добавить(ИмяЭлемента,
			Тип("КнопкаФормы"),
			БлокКнопки);
		КнопкаПродления.ИмяКоманды = ИмяЭлемента;
        КнопкаПродления.Высота = ВысотаКнопкиПродления;
        КнопкаПродления.Ширина = 12;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбработкиДанных()
    
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ИдентификаторОбъекта", ИдентификаторОбъекта);
    ПараметрыФормы.Вставить("ИдентификаторПравила", ИдентификаторСчетовНаОплату());
    ОткрытьФорму(ИмяФормыОбработкиОтвета, ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ЗапроситьСчетНаОплату(ИдентификаторГруппы, КодПериода)
    
    Элементы.Предупреждение.Видимость = Ложь;
    Группа = ГруппыПодписок.НайтиПоИдентификатору(ИдентификаторГруппы);
    Отбор = Новый Структура("ИдентификаторГруппы, КодПериода", ИдентификаторГруппы, КодПериода);
    СоставПокупкиГруппы = СоставыГруппПодписок.НайтиСтроки(Отбор);
    
    СоставПокупки = НовыйСоставПокупки();
    
    Для Каждого Вариант Из СоставПокупкиГруппы Цикл
    	СтрокаПокупки = СоставПокупки.Добавить();
        ЗаполнитьЗначенияСвойств(СтрокаПокупки, Вариант);
    КонецЦикла; 
    
    Возврат ВыставитьСчет(КодПериода, Истина, СоставПокупки);
    
КонецФункции

&НаСервере
Функция ВыставитьСчетПоВыбранномуТарифу(КодТарифа, КодПериода)
	
    СоставПокупки = НовыйСоставПокупки();
    СтрокаПокупки = СоставПокупки.Добавить();
    СтрокаПокупки.КодТарифа = КодТарифа;
    Если ИспользоватьТарифыОО Тогда
        ТарифОО = ПрограммныйИнтерфейсСервиса.ТарифОбслуживающейОрганизации(КодОО, КодТарифа);
        Если Не ЗначениеЗаполнено(ТарифОО) Тогда
            ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                НСтр("ru = 'Не найден тариф обслуживающей организации ''%1'' по коду тарифа ''%2''.'"), КодОО, КодТарифа);
        КонецЕсли;
        Тариф = ПрограммныйИнтерфейсСервиса.ТарифСервиса(ТарифОО.КодБазовогоТарифа);
    Иначе
        Тариф = ПрограммныйИнтерфейсСервиса.ТарифСервиса(КодТарифа);
        Если Не ЗначениеЗаполнено(Тариф) Тогда
            ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                НСтр("ru = 'Не найден тариф сервиса по коду тарифа ''%1''.'"), КодТарифа);
        КонецЕсли; 
    КонецЕсли; 
    СтрокаПокупки.Расширение = Тариф.РасширениеТарифа;
    
    Возврат ВыставитьСчет(КодПериода, Ложь, СоставПокупки);
        	
КонецФункции
 
&НаСервере
Функция ВыставитьСчет(КодПериода, Продление, СоставПокупки)
    
    ДанныеПокупки = Новый Массив;
    Для Каждого Строка Из СоставПокупки Цикл
        Покупка = Новый Структура;
        Покупка.Вставить("tariff_id", Строка.КодТарифа);
        Покупка.Вставить("subscription_id", Строка.НомерПодписки);
        Покупка.Вставить("is_extension", Строка.Расширение);
        Покупка.Вставить("cost", Строка.Сумма);
        ДанныеПокупки.Добавить(Покупка);
    КонецЦикла;
    
    ИдентификаторОбъекта = Новый УникальныйИдентификатор;
    Данные = Новый Структура;
    Данные.Вставить("id", ИдентификаторОбъекта);
    Данные.Вставить("client_id", КодАбонента);
    Данные.Вставить("partner_id", КодОО);
    Данные.Вставить("period_id", КодПериода);
    Данные.Вставить("renewal",  Продление);
    Данные.Вставить("total_cost", СоставПокупки.Итог("Сумма"));
    Данные.Вставить("purchase_structure", ДанныеПокупки);
    
    Результат = УниверсальнаяИнтеграция.ОтправитьДанныеОбъектаПоПравилу(
        ИдентификаторСчетовНаОплату(), Данные);
    
    Если Результат.КодСостояния = 400 Или Результат.КодСостояния = 500 Тогда
        Элементы.Предупреждение.Видимость = Истина;
        Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда
            Результат.ДанныеОтвета.Свойство("text", Предупреждение);
        Иначе
            Предупреждение = Результат.ТелоОтвета; 
        КонецЕсли;
        Возврат Ложь;
    Иначе
        УниверсальнаяИнтеграция.ПодписатьсяНаОповещенияОбИзменении(
            ИдентификаторСчетовНаОплату(), Строка(ИдентификаторОбъекта));  
        Возврат Истина;
    КонецЕсли;                   

КонецФункции

&НаСервере
Функция ИдентификаторСчетовНаОплату()
	
    Возврат "bills";
    
КонецФункции

&НаКлиенте
Процедура ВсеТарифыЗакрытие(Результат, ДополнительныеПараметры) Экспорт

    Если Результат <> Неопределено Тогда
        Если ВыставитьСчетПоВыбранномуТарифу(Результат.КодТарифа, Результат.КодПериода) Тогда
            ОткрытьФормуОбработкиДанных();    
        КонецЕсли; 
    КонецЕсли; 	
	
КонецПроцедуры
 
&НаСервере 
Процедура ПоказатьОшибку(ТекстОшибки)
    
    Элементы.Предупреждение.Видимость = Истина;
    Предупреждение = ТекстОшибки; 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОбслуживающейОрганизации()
	
    ТекущаяОО = ОбслуживающиеОрганизации.НайтиСтроки(Новый Структура("Код", КодОО))[0];
    ИспользоватьТарифыОО = ТекущаяОО.РазрешеноПереопределениеТарифов;
    Элементы.Предупреждение.Видимость = Ложь;
    Элементы.ГруппаТелефон.Видимость = ЗначениеЗаполнено(ТекущаяОО.Телефон);
    Элементы.ГруппаЭлектроннаяПочта.Видимость = ЗначениеЗаполнено(ТекущаяОО.Почта);
    Элементы.ГруппаСайт.Видимость = ЗначениеЗаполнено(ТекущаяОО.Сайт);
    СайтСсылка = ?(СтрНайти(ТекущаяОО.Сайт, "http") = 0, "http://" + ТекущаяОО.Сайт, ТекущаяОО.Сайт); 
    ТелефонСсылка = "tel: " + ТолькоЦифры(ТекущаяОО.Телефон);
    ЭлектроннаяПочтаСсылка = "mailto: " + ТекущаяОО.Почта;  
    КартинкаСайт = Новый ФорматированнаяСтрока(БиблиотекаКартинок.КонтактнаяИнформацияСайт,,,, СайтСсылка);
    СтрокаСайт = Новый ФорматированнаяСтрока(ТекущаяОО.Сайт,,,, СайтСсылка);
    КартинкаТелефон = Новый ФорматированнаяСтрока(БиблиотекаКартинок.КонтактнаяИнформацияТелефон,,,, ТелефонСсылка);
    СтрокаТелефон = Новый ФорматированнаяСтрока(ТекущаяОО.Телефон,,,, ТелефонСсылка);
    КартинкаЭлектроннаяПочта = Новый ФорматированнаяСтрока(БиблиотекаКартинок.КонтактнаяИнформацияЭлектроннаяПочта,,,, ЭлектроннаяПочтаСсылка);
    СтрокаЭлектроннаяПочта = Новый ФорматированнаяСтрока(ТекущаяОО.Почта,,,, ЭлектроннаяПочтаСсылка);
    
    ЕстьСтраницаВыбораТарифа = (ПрограммныйИнтерфейсСервиса.СтраницаВыбораТарифаОбслуживающейОрганизации(КодОО, Ложь) <> Неопределено);
    Элементы.ГруппаДругиеТарифы.Видимость = ТекущаяОО.РазрешеноАвтоматическоеВыставлениеСчетов И ЕстьСтраницаВыбораТарифа;
    ОчиститьГруппыЭлементовПодписок();
    ПоказатьПодписки(ТекущаяОО.РазрешеноАвтоматическоеВыставлениеСчетов);
    
    Если Не ТекущаяОО.РазрешеноАвтоматическоеВыставлениеСчетов Тогда
        ПоказатьОшибку(НСтр("ru = 'Для продления доступа к сервису обратитесь к обслуживающей организации.'"));
    КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифры(Строка)
	
	ОбработаннаяСтрока = "";
	
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, НомерСимвола, 1);
		Если Символ >= "0" И Символ <= "9" Тогда
			ОбработаннаяСтрока = ОбработаннаяСтрока + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбработаннаяСтрока;
	
КонецФункции

&НаСервере 
Процедура ОчиститьГруппыЭлементовПодписок()
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы.ГруппаАктивныеПодписки.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из Элементы.ГруппаБудущиеПодписки.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
    КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйСоставПокупки()
    
    НовыйСоставПокупки = Новый ТаблицаЗначений;
    НовыйСоставПокупки.Колонки.Добавить("КодТарифа");
    НовыйСоставПокупки.Колонки.Добавить("Сумма");
    НовыйСоставПокупки.Колонки.Добавить("Расширение");
    НовыйСоставПокупки.Колонки.Добавить("НомерПодписки");
    
    Возврат НовыйСоставПокупки;
    
КонецФункции
 
#КонецОбласти 
 
