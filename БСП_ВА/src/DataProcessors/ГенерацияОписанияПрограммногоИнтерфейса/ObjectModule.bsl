///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем СтруктураПрограммногоИнтерфейса, КомментарийПрочитан, ЧтениеПараметров, ПолноеИмяОбъекта,
	СоответствиеОбъектовПодсистемам, ЧтениеВозвращаемыхЗначений, ЧтениеПримера, СтруктураМетода, ЧтениеМетода,
	МетодПрочитан, ТипОбъектаИМенеджер, ДоступностьМетода, ДоступностьИдентификатор;
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Переопределение.

// Возвращает список подсистем, содержащих объекты метаданных с программным интерфейсом.
//
// Возвращаемое значение:
//  Массив, КоллекцияОбъектовМетаданных - подсистемы, объекты которых нужно обработать.
//
Функция ПодсистемыСПрограммнымИнтерфейсом()
	
	Возврат Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы;
	
КонецФункции

// Подготовка исходных данных для формирования описания программного интерфейса.

Процедура СформироватьПрограммныйИнтерфейс() Экспорт
	
	ОчищатьКаталогВыгрузки = Не ЗначениеЗаполнено(КаталогВыгрузки);
	
	ВыгрузитьКонфигурациюВXML();
	СтруктураПрограммногоИнтерфейса = Новый ТаблицаЗначений;
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Подсистема");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ПолноеИмяОбъекта");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеПараметров");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеВозвращаемогоЗначения");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеПримера");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("СинтаксисМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Доступность");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ДоступностьИдентификатор");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Размещение");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ИмяМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("СинтаксисВызова");
	
	ЛогСозданияОписания = Новый Структура;
	ЛогСозданияОписания.Вставить("ОшибочноПрограммный",  Новый Массив);
	ЛогСозданияОписания.Вставить("ДлинныйКомментарий",   Новый Массив);
	ЛогСозданияОписания.Вставить("ГиперссылкаВКавычках", Новый Массив);
	ЛогСозданияОписания.Вставить("НеНайденаГиперссылка", Новый СписокЗначений);
	ЛогСозданияОписания.Вставить("УстаревшиеМетоды",     Новый Массив);
	
	ФайлыМодулей = НайтиФайлы(КаталогВыгрузки + "/CommonModules", "*bsl", Истина);
	
	СоответствиеОбъектовПодсистемам = Новый Соответствие;
	ЗаполнитьСоответствиеОбъектовПодсистемам(СоответствиеОбъектовПодсистемам);
	
	Для Каждого ФайлМодуля Из ФайлыМодулей Цикл
		
		ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(ФайлМодуля.ПолноеИмя, ФайлМодуля.Имя);
		ПолноеИмяОбъекта   = ПолноеИмяСтруктура.ПолноеИмяОбъекта;
		
		Если СоответствиеОбъектовПодсистемам[ПолноеИмяОбъекта] = Неопределено Тогда
			// Документируется только объекты указанных подсистем.
			Продолжить;
		КонецЕсли;
		
		ТекстФайла = Новый ЧтениеТекста(ФайлМодуля.ПолноеИмя);
		ТекстМодуля = ТекстФайла.Прочитать();
		
		ПрограммныйИнтерфейс = ПрограммныйИнтерфейсМодуля(ТекстМодуля);
		Если Не ЗначениеЗаполнено(ПрограммныйИнтерфейс) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ФайлМодуля.ПолноеИмя, "CommonModules") > 0 Тогда
			ЗаполнитьДоступностьМетода(ФайлМодуля);
		КонецЕсли;
		
		ПрочитатьПрограммныйИнтерфейсМодуля(ПрограммныйИнтерфейс);
		
	КонецЦикла;
	
	ТекстФайла.Закрыть();
	ТекстФайла = Неопределено;
	СтруктураПрограммногоИнтерфейса.Сортировать("Подсистема, Размещение, ИмяМетода");
	
	ПодготовитьГотовоеОписание();
	
	Если ОчищатьКаталогВыгрузки Тогда
		УдалитьФайлы(КаталогВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрограммныйИнтерфейсМодуля(ТекстМодуля)
	
	НачалоОбласти = СтрНайти(ТекстМодуля, ОбластьПрограммногоИнтерфейса());
	Если НачалоОбласти = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	НачалоОбластиАПИ = НачалоОбласти + СтрДлина(ОбластьПрограммногоИнтерфейса());
	КонецОбластиАПИ  = Неопределено;
	
	НомерВхождения = 1;
	Пока КонецОбластиАПИ = Неопределено Цикл
		НачалоОбласти = СтрНайти(ТекстМодуля, НачалоОбласти(), , НачалоОбластиАПИ, НомерВхождения);
		КонецОбласти  = СтрНайти(ТекстМодуля, КонецОбласти(), , НачалоОбластиАПИ, НомерВхождения);
		
		Если НачалоОбласти > 0 И НачалоОбласти < КонецОбласти Тогда
			НомерВхождения = НомерВхождения + 1;
		Иначе
			КонецОбластиАПИ = КонецОбласти;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьАПИ = Сред(ТекстМодуля, НачалоОбластиАПИ, КонецОбластиАПИ - НачалоОбластиАПИ);
	
	Возврат ОбластьАПИ;
	
КонецФункции

Процедура ПрочитатьПрограммныйИнтерфейсМодуля(Знач ПрограммныйИнтерфейс)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ПрограммныйИнтерфейс);
	
	УстановитьПеременные();
	Для Итератор = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
		Если ЧтениеМетода Тогда
			Если СтрНайти(Строка, "КонецПроцедуры") > 0 Или СтрНайти(Строка, "КонецФункции") > 0 Тогда
				// Чтение тела процедуры или функции завершено.
				УстановитьПеременные();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Строка, "#Область УстаревшиеПроцедурыИФункции") > 0
			Или СтрНайти(Строка, "#Область ДляВызоваИзДругихПодсистем") > 0 Тогда
			ВложенностьОбластей = 0;
			Пока Истина Цикл
				Если СтрНайти(Строка, "#Область ") > 0 Тогда
					ВложенностьОбластей = ВложенностьОбластей + 1;
				ИначеЕсли СтрНайти(Строка, "#КонецОбласти") > 0 Тогда
					ВложенностьОбластей = ВложенностьОбластей - 1;
				КонецЕсли;
				
				Если СтрНайти(Строка, "#КонецОбласти") <> 0 И ВложенностьОбластей = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Итератор = Итератор + 1;
				Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка) Тогда
			Продолжить;
		ИначеЕсли Лев(Строка, 2) = "//" Тогда
			СтруктураМетода.Вставить("ДлинаОписания", 0);
			ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор);
			СтруктураМетода.Удалить("ДлинаОписания");
		КонецЕсли;
		Если КомментарийПрочитан И ЧтениеМетода Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПрограммногоИнтерфейса.Добавить(), СтруктураМетода);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор, Рекурсия = Ложь)
	
	Если СтрНайти(Строка, НСтр("ru = 'Параметры'") + ":") > 0 И СтрРазделить(Строка, " ", Ложь).Количество() = 2 Тогда
		ЧтениеПараметров = Истина;
		Возврат;
	ИначеЕсли СтрНайти(Строка, НСтр("ru = 'Возвращаемое значение'") + ":") > 0 Тогда
		ЧтениеПараметров           = Ложь;
		ЧтениеВозвращаемыхЗначений = Истина;
		Возврат;
	ИначеЕсли СтрНайти(Строка, НСтр("ru = '// Пример'") + ":") > 0 И СтрРазделить(Строка, " ", Ложь).Количество() = 2 Тогда
		ЧтениеПараметров           = Ложь;
		ЧтениеВозвращаемыхЗначений = Ложь;
		ЧтениеПримера = Истина;
		Возврат;
	КонецЕсли;
	
	Если Лев(Строка, 2) = "//" Тогда
		Строка = Прав(Строка, СтрДлина(Строка) - 2);
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, Символы.Таб, " ");
	
	Если Не ЧтениеПараметров И Не ЧтениеВозвращаемыхЗначений И Не ЧтениеПримера Тогда
		СтруктураМетода.ОписаниеМетода =
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеМетода),
			СтруктураМетода.ОписаниеМетода + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеПараметров Тогда
		СтруктураМетода.ОписаниеПараметров = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеПараметров),
			СтруктураМетода.ОписаниеПараметров + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеВозвращаемыхЗначений Тогда
		СтруктураМетода.ОписаниеВозвращаемогоЗначения = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеВозвращаемогоЗначения),
			СтруктураМетода.ОписаниеВозвращаемогоЗначения + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеПримера Тогда
		СтруктураМетода.ОписаниеПримера = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеПримера),
			СтруктураМетода.ОписаниеПримера + Символы.ПС + Строка,
			Строка);
	КонецЕсли;
	
	Если Рекурсия Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМетода.ДлинаОписания = СтруктураМетода.ДлинаОписания + 1;
	
	Итератор = Итератор + 1;
	Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
	Пока Лев(Строка, 2) = "//" Цикл
		ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор, Истина);
		СтруктураМетода.ДлинаОписания = СтруктураМетода.ДлинаОписания + 1;
		Итератор = Итератор + 1;
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
	КонецЦикла;
	
	Если ПустаяСтрока(Строка) Тогда
		УстановитьПеременные();
		Возврат;
	КонецЕсли;
	
	КомментарийПрочитан = Истина;
	
	ЧтениеМетода = Истина;
	ОшибкаЧтенияМетода = Ложь;
	ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода);
	Если ОшибкаЧтенияМетода Тогда
		УстановитьПеременные();
		Возврат;
	КонецЕсли;
	
	СтруктураМетода.ПолноеИмяОбъекта = ПолноеИмяОбъекта;
	СтруктураМетода.Подсистема = СоответствиеОбъектовПодсистемам[ПолноеИмяОбъекта];
	
	Если СтрНайти(СтруктураМетода.ПолноеИмяОбъекта, "Переопределяемый") > 0 Тогда
		СтруктураМетода.Размещение = "Переопределение";
	Иначе
		СтруктураМетода.Размещение = "Интерфейс";
	КонецЕсли;
	
	СинтаксисВызоваМетода = СинтаксисВызоваМетода(СтруктураМетода.СинтаксисМетода, СтруктураМетода.ПолноеИмяОбъекта);
	СтруктураМетода.ИмяМетода       = СинтаксисВызоваМетода.ИмяМетода;
	СтруктураМетода.СинтаксисВызова = СинтаксисВызоваМетода.СинтаксисВызова;
	Если СинтаксисВызоваМетода.ЭтоФункция Тогда
		СтруктураМетода.СинтаксисВызова = НСтр("ru = 'Результат'") + " = " + СтруктураМетода.СинтаксисВызова;
	КонецЕсли;
	
	// Логирование.
	Если СтрНайти(СтруктураМетода.ОписаниеМетода, НСтр("ru = 'Только для внутреннего использования'")) > 0
		Или СтрНайти(СтруктураМетода.ПолноеИмяОбъекта, "Служебный") > 0 Тогда
		ЛогСозданияОписания.ОшибочноПрограммный.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров);
	КонецЕсли;
	Если СтрНайти(СтруктураМетода.ОписаниеМетода, "Устарела.") > 0 Тогда
		ЛогСозданияОписания.УстаревшиеМетоды.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров);
	КонецЕсли;
	Если СтруктураМетода.ДлинаОписания > 50 Тогда
		ЛогСозданияОписания.ДлинныйКомментарий.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров
			+ " (" + НСтр("ru = 'всего строк'") + " - "
			+ СтруктураМетода.ДлинаОписания + ")");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода, Рекурсия = Ложь)
	
	Если Не КомментарийПрочитан И Не ЧтениеМетода Тогда
		Возврат;
	КонецЕсли;
	
	Если (Лев(Строка, 14) = "КонецПроцедуры") Или (Лев(Строка, 12) = "КонецФункции") Тогда
		ОшибкаЧтенияМетода = Истина;
	ИначеЕсли ЧтениеМетода И СтрНайти(Строка, "Экспорт") > 0 Тогда
		СтруктураМетода.СинтаксисМетода = ?(ПустаяСтрока(СтруктураМетода.СинтаксисМетода),
			Строка,
			СтруктураМетода.СинтаксисМетода + Символы.ПС + Строка);
		МетодПрочитан = Истина;
	ИначеЕсли (Лев(Строка, 10) = "Процедура ") Или (Лев(Строка, 8) = "Функция ") Тогда
		СтруктураМетода.СинтаксисМетода = Строка;
	ИначеЕсли ЗначениеЗаполнено(СтруктураМетода.СинтаксисМетода) Тогда
		// Чтение параметров метода.
		СтруктураМетода.СинтаксисМетода = СтруктураМетода.СинтаксисМетода + Символы.ПС + Строка;
	КонецЕсли;
	
	Если Рекурсия Тогда
		Возврат;
	КонецЕсли;
	
	Пока Не МетодПрочитан Цикл
		Итератор = Итератор + 1;
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
		ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода, Истина);
		Если ОшибкаЧтенияМетода Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вывод программного интерфейса в файл.

Процедура ПодготовитьГотовоеОписание()
	
	СохранитьОписаниеВHtml();
	
КонецПроцедуры

Процедура СохранитьОписаниеВHtml()
	
	Шапка = "
		|<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=Windows-1251"">
		|<title>%1</title>
		|<link rel=""stylesheet"" href=""style.css"">
		|</head>
		|<body class=""bspdoc"">";
	
	Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шапка,
		НСтр("ru = 'Глава 4. Программный интерфейс'"));
	
	Подвал = "
		|</body>
		|</html>
		|";
	
	ТекущаяПодсистема = "";
	ТекущееРазмещение = "";
	
	ЗаголовокСтраницы = "<h1>%1</h1>";
	ЗаголовокСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСтраницы,
		НСтр("ru = 'Глава 4. Программный интерфейс'"));
	
	Подробности = "<p class=""Paragraph0c"">"
		+ НСтр("ru = 'Программный интерфейс инструментария разработчика «1С:Библиотека стандартных подсистем» включает в
			|себя все экспортные процедуры и функции, которые размещены в областях кода ПрограммныйИнтерфейс.
			|При разработке собственных библиотек и прикладных решений настоятельно рекомендуется использовать
			|только процедуры и функции программного интерфейса библиотеки.'") + "</p>"
		+ "<p class=""Paragraph0c"">" + НСтр("ru = 'При выпуске новых версий библиотеки в этих процедурах и функциях обеспечивается обратная совместимость,
			|поэтому прикладным разработчикам не требуется пересматривать свой код и адаптировать объекты метаданных своих
			|конфигураций под новые требования и возможности каждой новой версии библиотеки. Это не гарантируется для
			|всех прочих служебных экспортных процедур и функций.'") + "</p>"
		+ "<p class=""Paragraph0c"">" + НСтр("ru = 'Для удобства поиска и изучения программный интерфейс сгруппирован по подсистемам и разделен на две основные категории:'")+ "</p>"
		+ "<p class=""MsoListBullet""><span class=""Bold"">" + НСтр("ru = 'Интерфейс'") + "</span>" + " – "
		+ НСтр("ru = 'экспортные процедуры и функции, которые предназначены для вызова из прикладного кода;'") + "</p>"
		+ "<p class=""MsoListBullet""><span class=""Bold"">" + НСтр("ru = 'Переопределение'") + "</span>" + " – "
		+ НСтр("ru = 'экспортные процедуры переопределяемых модулей, содержимое которых может или должно быть изменено в 
			|конфигурации-потребителе. С их помощью решаются задачи изменения поведения библиотечной функциональности,
			|ее параметризации спецификой конфигурации-потребителя, а также для подключения библиотечной функциональности
			|к объектам конфигурации-потребителя. Они не предназначены для вызова из прикладного кода.'") + "</p>"
		+ "<p class=""Paragraph0c"">" + НСтр("ru = 'Подробнее о программном интерфейсе и переопределяемых модулях см. в 
			|%1,
			|в разделе «Разработка и использование библиотек».'") + "</p>";
	
	СсылкаНаСтандарты = "<a href=""http://its.1c.ru/db/v8std"">«Системе стандартов и методик разработки конфигураций для платформы 1С:Предприятие 8»</a>";
	Подробности = СтрЗаменить(Подробности, "%1", СсылкаНаСтандарты);
	Результат = ЗаголовокСтраницы + Символы.ПС + Подробности;
	
	ВсегоМетодов = СтруктураПрограммногоИнтерфейса.Количество();
	ВыводСовпадающихМетодов = Ложь;
	ИндексСовпадающегоМетода= 1;
	Для Каждого Метод Из СтруктураПрограммногоИнтерфейса Цикл
		
		Если Метод.Подсистема <> ТекущаяПодсистема Тогда
			ТекущееРазмещение   = "";
			ТекущаяПодсистема   = Метод.Подсистема;
			ЗаголовокПодсистема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<h2>%1</h2>", Метод.Подсистема);
			Результат = Результат + Символы.ПС + ЗаголовокПодсистема;
		КонецЕсли;
		
		Если Метод.Размещение <> ТекущееРазмещение Тогда
			ТекущееРазмещение = Метод.Размещение;
			// Заголовок размещения программного интерфейса.
			Если ТекущееРазмещение = "Интерфейс" Тогда
				Размещение = НСтр("ru = 'Интерфейс'");
			Иначе
				Размещение = НСтр("ru = 'Переопределение'");
			КонецЕсли;
			ЗаголовокРазмещение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<h3>%1</h3>", Размещение);
			Результат = Результат + Символы.ПС + ЗаголовокРазмещение;
		КонецЕсли;
		
		// Заголовок метода.
		Если Не ВыводСовпадающихМетодов Тогда
			ЗаголовокМетода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<h4><a name=""%1""></a>%2</h4>", "_" + АдресСсылки(Метод), Метод.ИмяМетода);
		Иначе
			ЗаголовокМетода = "";
		КонецЕсли;
		
		// Проверка наличия совпадающих по названию методов.
		ИндексМетода   = СтруктураПрограммногоИнтерфейса.Индекс(Метод);
		Если ВсегоМетодов = (ИндексМетода + 1) Тогда
			СледующийМетод = Неопределено;
		Иначе
			СледующийМетод = СтруктураПрограммногоИнтерфейса.Получить(ИндексМетода + 1);
		КонецЕсли;
		
		Если СледующийМетод <> Неопределено И Метод.ИмяМетода = СледующийМетод.ИмяМетода Тогда
			ЗаголовокСовпадающиеМетоды = ЗаголовокСовпадающихМетодов(Метод, ИндексСовпадающегоМетода);
			
			ИндексСовпадающегоМетода = ИндексСовпадающегоМетода + 1;
			ВыводСовпадающихМетодов = Истина;
		ИначеЕсли ВыводСовпадающихМетодов Тогда
			ЗаголовокСовпадающиеМетоды = ЗаголовокСовпадающихМетодов(Метод, ИндексСовпадающегоМетода);
			ВыводСовпадающихМетодов = Ложь;
			ИндексСовпадающегоМетода = 1;
		Иначе
			ЗаголовокСовпадающиеМетоды = "";
		КонецЕсли;
		
		// Описание метода.
		ОписаниеМетода = "<pre>" + ДобавитьСсылкуВОписание(Метод.ОписаниеМетода, Метод) + "</pre>";
		Если ЗначениеЗаполнено(ЗаголовокМетода) Тогда
			Результат = Результат + Символы.ПС + ЗаголовокМетода;
		Иначе
			Результат = Результат + "<pre>" + Символы.ПС + Символы.ПС + "</pre>";
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаголовокСовпадающиеМетоды) Тогда
			Если Не ЗначениеЗаполнено(ЗаголовокМетода) Тогда
				СтрокаСАдресом = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<a name=""%1""></a>", "_" + АдресСсылки(Метод));
				ЗаголовокСовпадающиеМетоды = СтрЗаменить(ЗаголовокСовпадающиеМетоды, "[Адрес]", СтрокаСАдресом);
			Иначе
				ЗаголовокСовпадающиеМетоды = СтрЗаменить(ЗаголовокСовпадающиеМетоды, "[Адрес]", "");
			КонецЕсли;
			Результат = Результат + Символы.ПС + ЗаголовокСовпадающиеМетоды;
		КонецЕсли;
		Результат = Результат + Символы.ПС + ОписаниеМетода;
		
		// Синтаксис
		ЗаголовокСинтаксис = "<p class=""Paragraph0c""><span class=""Bold"">" + "%1" + "</span></p>";
		ЗаголовокСинтаксис = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСинтаксис, НСтр("ru = 'Синтаксис'"));
		ОписаниеСинтаксиса = "<pre>" + " " + Метод.СинтаксисМетода + "</pre>";
		
		Результат = Результат + Символы.ПС + ЗаголовокСинтаксис;
		Результат = Результат + Символы.ПС + ОписаниеСинтаксиса;
		
		Если Не ПустаяСтрока(Метод.ОписаниеПараметров) Тогда
			ЗаголовокПараметры = "<p class=""Paragraph0c""><span class=""Bold"">" + "%1" + "</span></p>";
			ЗаголовокПараметры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПараметры, НСтр("ru = 'Параметры'"));
			ОписаниеПараметров = "<pre>" + ДобавитьСсылкуВОписание(Метод.ОписаниеПараметров, Метод) + "</pre>";
			
			Результат = Результат + Символы.ПС + ЗаголовокПараметры;
			Результат = Результат + Символы.ПС + ОписаниеПараметров;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Метод.ОписаниеВозвращаемогоЗначения) Тогда
			ЗаголовокВозвращаемоеЗначение = "<p class=""Paragraph0c""><span class=""Bold"">" + "%1" + "</span></p>";
			ЗаголовокВозвращаемоеЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокВозвращаемоеЗначение, НСтр("ru = 'Возвращаемое значение'"));
			ОписаниеВозвращаемогоЗначения = "<pre>" + ДобавитьСсылкуВОписание(Метод.ОписаниеВозвращаемогоЗначения , Метод) + "</pre>";
			
			Результат = Результат + Символы.ПС + ЗаголовокВозвращаемоеЗначение;
			Результат = Результат + Символы.ПС + ОписаниеВозвращаемогоЗначения;
		КонецЕсли;
		
		Если Метод.Размещение = "Интерфейс" Тогда
			ЗаголовокПримерВызова = "<p class=""Paragraph0c""><span class=""Bold"">" + "%1" + "</span></p>";
			ЗаголовокПримерВызова = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПримерВызова, НСтр("ru = 'Пример вызова'"));
			Если Метод.ОписаниеПримера <> "" Тогда
				ОписаниеПримерВызова = "<pre>" + ДобавитьСсылкуВОписание(Метод.ОписаниеПримера, Метод) + "</pre>";
			Иначе
				ОписаниеПримерВызова = "<pre>" + Метод.СинтаксисВызова + "</pre>";
			КонецЕсли;
			
			Результат = Результат + Символы.ПС + ЗаголовокПримерВызова;
			Результат = Результат + Символы.ПС + ОписаниеПримерВызова;
		Иначе
			
			Если Метод.ОписаниеПримера <> "" Тогда
				ЗаголовокПримерРеализации = "<p class=""Paragraph0c""><span class=""Bold"">" + "%1" + "</span></p>";
				ЗаголовокПримерРеализации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПримерРеализации, НСтр("ru = 'Пример реализации'"));
				ОписаниеПримерВызова      = "<pre>" + ДобавитьСсылкуВОписание(Метод.ОписаниеПримера, Метод) + "</pre>";
				
				Результат = Результат + Символы.ПС + ЗаголовокПримерРеализации;
				Результат = Результат + Символы.ПС + ОписаниеПримерВызова;
			КонецЕсли;
			
			ЗаголовокРасположение = "<p class=""Paragraph0c""><span class=""Bold"">" + "%1" + "</span></p>";
			ЗаголовокРасположение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокРасположение, НСтр("ru = 'Расположение'"));
			
			ОписаниеРасположение = НСтр("ru = 'Общий модуль %1'");
			ОписаниеРасположение = "<pre>" + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРасположение, СтрРазделить(Метод.ПолноеИмяОбъекта, ".")[1]) + "</pre>";
			
			Результат = Результат + Символы.ПС + ЗаголовокРасположение;
			Результат = Результат + Символы.ПС + ОписаниеРасположение;
		КонецЕсли;
		
		// Доступность
		ЗаголовокДоступность = "<p class=""Paragraph0c""><span class=""Bold"">" + "%1" + "</span></p>";
		ЗаголовокДоступность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДоступность, НСтр("ru = 'Доступность'"));
		ОписаниеДоступность  = "<pre>" + " " + Метод.Доступность + "</pre>";
		
		Результат = Результат + Символы.ПС + ЗаголовокДоступность;
		Результат = Результат + Символы.ПС + ОписаниеДоступность;
		
	КонецЦикла;
	
	Результат = Шапка + Результат + Символы.ПС + Подвал;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Результат);
	ТекстовыйДокумент.Записать(ПутьКФайлу);
	
	ПутьКФайлуЧастями = СтрРазделить(ПутьКФайлу, "/");
	ИмяФайла          = ПутьКФайлуЧастями.Получить(ПутьКФайлуЧастями.Количество() - 1);
	ПутьКФайлуСтиля   = СтрЗаменить(ПутьКФайлу, ИмяФайла, "style.css");
	
	ТекстовыйДокумент = ПолучитьМакет("Шаблон");
	ТекстовыйДокумент.Записать(ПутьКФайлуСтиля);
	
КонецПроцедуры

// Конвертация имени файла в полное имя объекта конфигурации.

Функция ПолноеИмяПоИмениМодуля(ПолныйПутьСИменем, ИмяФайлаСРасширением)
	ПолноеИмяФайла = СтрЗаменить(ПолныйПутьСИменем, "\", "/");
	ПутьКФорме     = СтрЗаменить(ПолноеИмяФайла, КаталогВыгрузки + "/", "");
	ИмяМодуляЧастями = СтрРазделить(ПутьКФорме, "/");
	
	ПолноеИмяОбъекта = "";
	ПолноеИмяМодуля  = "";
	Шаг = 0;
	Для Каждого ЧастьПути Из ИмяМодуляЧастями Цикл
		Шаг = Шаг + 1;
		Если ВРег(ЧастьПути) = "EXT" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧастьПути = ИмяФайлаСРасширением Тогда
			ЧастьПути = СтрРазделить(ЧастьПути, ".")[0];
		КонецЕсли;
		
		ЧастьПутиПреобразованная = СоответствиеРусскихИАнглийскихИмен()[ЧастьПути];
		Если ЧастьПутиПреобразованная = Неопределено Тогда
			ЧастьПутиПреобразованная = ЧастьПути;
		КонецЕсли;
		
		Если Шаг < 3 Тогда
			ПолноеИмяОбъекта = ?(ПолноеИмяОбъекта = "",
				                 ЧастьПутиПреобразованная,
				                 ПолноеИмяОбъекта + "." + ЧастьПутиПреобразованная);
		КонецЕсли;
		
		ПолноеИмяМодуля = ?(ПолноеИмяМодуля = "",
			                 ЧастьПутиПреобразованная,
			                 ПолноеИмяМодуля + "." + ЧастьПутиПреобразованная);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	Результат.Вставить("ПолноеИмяМодуля", ПолноеИмяМодуля);
	
	Возврат Результат;
КонецФункции

Функция СоответствиеРусскихИАнглийскихИмен()
	Результат = Новый Соответствие;
	
	// Виды объектов метаданных.
	Результат.Вставить("AccountingRegister", "РегистрБухгалтерии");
	Результат.Вставить("AccumulationRegister", "РегистрНакопления");
	Результат.Вставить("BusinessProcess", "БизнесПроцесс");
	Результат.Вставить("CalculationRegister", "РегистрРасчета");
	Результат.Вставить("Catalog", "Справочник");
	Результат.Вставить("ChartOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("CommandGroup", "ГруппаКоманд");
	Результат.Вставить("CommonAttribute", "ОбщийРеквизит");
	Результат.Вставить("CommonCommand", "ОбщаяКоманда");
	Результат.Вставить("CommonForm", "ОбщаяФорма");
	Результат.Вставить("CommonModule", "ОбщийМодуль");
	Результат.Вставить("CommonPicture", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplate", "ОбщийМакет");
	Результат.Вставить("Configuration", "Конфигурация");
	Результат.Вставить("Constant", "Константа");
	Результат.Вставить("DataProcessor", "Обработка");
	Результат.Вставить("DefinedType", "ОпределяемыйТип");
	Результат.Вставить("Document", "Документ");
	Результат.Вставить("DocumentJournal", "ЖурналДокументов");
	Результат.Вставить("DocumentNumerator", "НумераторДокументов");
	Результат.Вставить("Enum", "Перечисление");
	Результат.Вставить("EventSubscription", "ПодпискаНаСобытие");
	Результат.Вставить("ExchangePlan", "ПланОбмена");
	Результат.Вставить("FilterCriterion", "КритерийОтбора");
	Результат.Вставить("FunctionalOption", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameter", "ПараметрФункциональныхОпций");
	Результат.Вставить("InformationRegister", "РегистрСведений");
	Результат.Вставить("Language", "Язык");
	Результат.Вставить("Report", "Отчет");
	Результат.Вставить("Role", "Роль");
	Результат.Вставить("ScheduledJob", "РегламентноеЗадание");
	Результат.Вставить("Sequence", "Последовательность");
	Результат.Вставить("SessionParameter", "ПараметрСеанса");
	Результат.Вставить("SettingsStorage", "ХранилищеНастроек");
	Результат.Вставить("Style", "Стиль");
	Результат.Вставить("StyleItem", "ЭлементСтиля");
	Результат.Вставить("Subsystem", "Подсистема");
	Результат.Вставить("Task", "Задача");
	Результат.Вставить("WebService", "WebСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("XDTOPackage", "ПакетXDTO");
	
	// Виды объектов метаданных (во множественном числе).
	Результат.Вставить("AccountingRegisters", "РегистрБухгалтерии");
	Результат.Вставить("AccumulationRegisters", "РегистрНакопления");
	Результат.Вставить("BusinessProcesses", "БизнесПроцесс");
	Результат.Вставить("CalculationRegisters", "РегистрРасчета");
	Результат.Вставить("Catalogs", "Справочник");
	Результат.Вставить("ChartsOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartsOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("ChartsOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("CommandGroups", "ГруппаКоманд");
	Результат.Вставить("CommonAttributes", "ОбщийРеквизит");
	Результат.Вставить("CommonCommands", "ОбщаяКоманда");
	Результат.Вставить("CommonForms", "ОбщаяФорма");
	Результат.Вставить("CommonModules", "ОбщийМодуль");
	Результат.Вставить("CommonPictures", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplates", "ОбщийМакет");
	Результат.Вставить("Configurations", "Конфигурация"); // Не используется.
	Результат.Вставить("Constants", "Константа");
	Результат.Вставить("DataProcessors", "Обработка");
	Результат.Вставить("DefinedTypes", "ОпределяемыйТип");
	Результат.Вставить("Documents", "Документ");
	Результат.Вставить("DocumentJournals", "ЖурналДокументов");
	Результат.Вставить("DocumentNumerator", "НумераторДокументов");
	Результат.Вставить("Enums", "Перечисление");
	Результат.Вставить("EventSubscriptions", "ПодпискаНаСобытие");
	Результат.Вставить("ExchangePlans", "ПланОбмена");
	Результат.Вставить("FilterCriteria", "КритерийОтбора");
	Результат.Вставить("FunctionalOptions", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameters", "ПараметрФункциональныхОпций");
	Результат.Вставить("InformationRegisters", "РегистрСведений");
	Результат.Вставить("Languages", "Язык");
	Результат.Вставить("Reports", "Отчет");
	Результат.Вставить("Roles", "Роль");
	Результат.Вставить("ScheduledJobs", "РегламентноеЗадание");
	Результат.Вставить("Sequences", "Последовательность");
	Результат.Вставить("SessionParameters", "ПараметрСеанса");
	Результат.Вставить("SettingsStorages", "ХранилищеНастроек");
	Результат.Вставить("Style", "Стиль");
	Результат.Вставить("StyleItems", "ЭлементСтиля");
	Результат.Вставить("Subsystems", "Подсистема");
	Результат.Вставить("Tasks", "Задача");
	Результат.Вставить("WebServices", "WebСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("XDTOPackages", "ПакетXDTO");
	
	// Типы вложенных объектов метаданных.
	Результат.Вставить("Module", "Модуль");
	Результат.Вставить("ManagerModule", "МодульМенеджера");
	Результат.Вставить("ObjectModule", "МодульОбъекта");
	Результат.Вставить("CommandModule", "МодульКоманды");
	Результат.Вставить("RecordSetModule", "МодульНабораЗаписей");
	Результат.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	Результат.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	Результат.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	Результат.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	Результат.Вставить("SessionModule", "МодульСеанса");
	
	Результат.Вставить("Help", "Справка");
	Результат.Вставить("Form", "Форма");
	Результат.Вставить("Flowchart", "КартаМаршрута");
	Результат.Вставить("Picture", "Картинка");
	Результат.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	Результат.Вставить("Template", "Макет");
	Результат.Вставить("Command", "Команда");
	Результат.Вставить("Aggregates", "Агрегаты");
	Результат.Вставить("Recalculation", "Перерасчет");
	Результат.Вставить("Predefined", "Предопределенные");
	Результат.Вставить("Content", "Состав");
	Результат.Вставить("Rights", "Права");
	Результат.Вставить("Schedule", "Расписание");
	
	// Типы вложенных объектов метаданных (во множественном числе).
	Результат.Вставить("Module", "Модуль");
	Результат.Вставить("ManagerModule", "МодульМенеджера");
	Результат.Вставить("ObjectModule", "МодульОбъекта");
	Результат.Вставить("CommandModule", "МодульКоманды");
	Результат.Вставить("RecordSetModule", "МодульНабораЗаписей");
	Результат.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	Результат.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	Результат.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	Результат.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	Результат.Вставить("SessionModule", "МодульСеанса");
	
	Результат.Вставить("Help", "Справка");
	Результат.Вставить("Forms", "Форма");
	Результат.Вставить("Flowchart", "КартаМаршрута");
	Результат.Вставить("Picture", "Картинка");
	Результат.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	Результат.Вставить("Templates", "Макет");
	Результат.Вставить("Commands", "Команда");
	Результат.Вставить("Aggregates", "Агрегаты");
	Результат.Вставить("Recalculations", "Перерасчет");
	Результат.Вставить("Predefined", "Предопределенные");
	Результат.Вставить("Content", "Состав");
	Результат.Вставить("Rights", "Права");
	Результат.Вставить("Schedule", "Расписание");
	
	Возврат Результат;
КонецФункции

// Выгрузка конфигурации в файлы.

Процедура ВыгрузитьКонфигурациюВXML()
	
	Если ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Каталог = Новый Файл(КаталогВыгрузки);
		Если Не Каталог.Существует() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указанный каталог выгрузки ""%1"" не существует.'"), КаталогВыгрузки);
		КонецЕсли;
		Если НайтиФайлы(КаталогВыгрузки, "Configuration.xml").Количество() = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указанный каталог выгрузки ""%1"" не содержит файлов выгрузки конфигурации.'"), КаталогВыгрузки);
		КонецЕсли;
		КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузки);
		Возврат;
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен Тогда
		ВызватьИсключение НСтр("ru = 'Проверка возможна только для пользователя без пароля.'");
	КонецЕсли;
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла("ОписаниеПрограммногоИнтерфейса");
	
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	СоздатьКаталог(КаталогВыгрузки);
	
	КаталогВыгрузки = СтрЗаменить(КаталогВыгрузки, "\", "/");
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения).file;
			КопироватьФайл(КаталогИнформационнойБазы + "/1Cv8.1CD", КаталогВыгрузки + "/1Cv8.1CD");
			СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("File=""%1"";", КаталогВыгрузки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для проверки необходимо закрыть конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаСообщений = КаталогВыгрузки + "/СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединения);
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(ИмяПользователя());
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить();
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(КаталогВыгрузки);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ОткрытКонфигуратор()
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Описание областей программного интерфейса.

Функция ОбластьПрограммногоИнтерфейса()
	Возврат "#Область ПрограммныйИнтерфейс";
КонецФункции

Функция НачалоОбласти()
	Возврат "#Область";
КонецФункции

Функция КонецОбласти()
	Возврат "#КонецОбласти";
КонецФункции

// Добавление перекрестных ссылок в описании.

Функция ДобавитьСсылкуВОписание(Описание, Метод)
	
	НормализоватьСтроку(Описание);
	
	ПозицияСм = СтрНайти(ВРег(Описание), " СМ.");
	Если ПозицияСм = 0 Тогда
		Возврат Описание;
	КонецЕсли;
	
	НомерВхождения = 1;
	Пока ПозицияСм > 0 Цикл
		ВсяСтрока = "см. ";
		
		ПозицияСм   = ПозицияСм + 4;
		КонецСтроки = СтрНайти(Описание, Символы.ПС, , ПозицияСм);
		Строка = Сред(Описание, ПозицияСм, КонецСтроки - ПозицияСм);
		ВсяСтрока = ВсяСтрока + Строка;
		СсылкаДобавлена = Ложь;
		НайтиИДобавитьСсылку(Описание, Строка, СсылкаДобавлена, Метод);
		Если Не СсылкаДобавлена Тогда
			НачалоСтроки = КонецСтроки + 1;
			КонецСтроки  = СтрНайти(Описание, Символы.ПС, , НачалоСтроки);
			Строка = Сред(Описание, НачалоСтроки, КонецСтроки - НачалоСтроки);
			НайтиИДобавитьСсылку(Описание, Строка, СсылкаДобавлена, Метод);
			ВсяСтрока = ВсяСтрока + Символы.ПС + Строка;
		КонецЕсли;
		
		Если Не СсылкаДобавлена Тогда
			СохранитьПропущеннуюГиперссылку(Метод, ВсяСтрока);
		КонецЕсли;
		
		НомерВхождения = НомерВхождения + 1;
		ПозицияСм = СтрНайти(ВРег(Описание), " СМ.",,, НомерВхождения);
	КонецЦикла;
	
	Возврат Описание;
КонецФункции

Процедура НайтиИДобавитьСсылку(Описание, Строка, СсылкаДобавлена, Метод)
	
	СтрокаЧастями = СтрРазделить(Строка, " ", Ложь);
	Если СтрНайти(ВРег(Строка), "СИНТАКС-ПОМОЩНИК") > 0 Тогда
		СсылкаДобавлена = Истина;
		Возврат;
	ИначеЕсли СтрНайти(Строка, "<a href=""#_") > 0 Тогда
		СсылкаДобавлена = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЧастьСтроки Из СтрокаЧастями Цикл
		ЧастьСтроки = СокрЛП(ЧастьСтроки);
		ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "(", "");
		ЧастьСтроки = СтрЗаменить(ЧастьСтроки, ")", "");
		ЧастьСтроки = СтрЗаменить(ЧастьСтроки, """", "");
		ЧастьСтроки = СтрЗаменить(ЧастьСтроки, ",", "");
		ЧастьСтроки = СтрЗаменить(ЧастьСтроки, ":", "");
		ЧастьСтроки = СтрЗаменить(ЧастьСтроки, ";", "");
		
		ПервыйСимвол = Лев(ЧастьСтроки, 1);
		Если ПервыйСимвол = НРег(ПервыйСимвол) Тогда
			// Точно не метод.
			Продолжить;
		КонецЕсли;
		
		ПриемникСсылки = Неопределено;
		ЧастьСтрокиЧастями = СтрРазделить(ЧастьСтроки, ".", Ложь);
		Если ЧастьСтрокиЧастями.Количество() = 2 Тогда
			ПриемникСсылки = ПриемникСсылки(ЧастьСтрокиЧастями, Метод.ПолноеИмяОбъекта);
		ИначеЕсли ЧастьСтрокиЧастями.Количество() = 1 Тогда
			ПриемникСсылки = ПриемникСсылки(ЧастьСтрокиЧастями, Метод.ПолноеИмяОбъекта, Истина);
		Иначе
			СсылкаДобавлена = Истина;
			// Логирование.
			СохранитьПропущеннуюГиперссылку(Метод, Строка);
			Возврат;
		КонецЕсли;
		
		Если ПриемникСсылки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПриемникСсылки.ИмяМетода = Метод.ИмяМетода
			И ПриемникСсылки.ПолноеИмяОбъекта = Метод.ПолноеИмяОбъекта Тогда
			СсылкаДобавлена = Истина;
			// Логирование.
			ТекстПроблемы = НСтр("ru = 'Ссылка на самого себя:'");
			ТекстПроблемы = ТекстПроблемы + Символы.ПС + Строка;
			СохранитьПропущеннуюГиперссылку(Метод, ТекстПроблемы);
			Возврат;
		КонецЕсли;
		
		ТелоСсылки = СтрСоединить(ЧастьСтрокиЧастями, ".");
		АдресСсылки = "#_" + АдресСсылки(ПриемникСсылки);
		Ссылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<a href=""%1"">%2</a>", АдресСсылки, ТелоСсылки);
		
		// Логирование.
		ПозицияСсылки = СтрНайти(Строка, ТелоСсылки);
		СимволПередСсылкой = Сред(Строка, ПозицияСсылки-1, 1);
		Если СимволПередСсылкой = """" Тогда
			СинтаксисВызоваМетода = СинтаксисВызоваМетода(Метод.СинтаксисМетода, Метод.ПолноеИмяОбъекта);
			ЛогСозданияОписания.ГиперссылкаВКавычках.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров);
		КонецЕсли;
		
		НоваяСтрока = СтрЗаменить(Строка, ТелоСсылки, Ссылка);
		Описание = СтрЗаменить(Описание, Строка, НоваяСтрока);
		СсылкаДобавлена = Истина;
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Функция ПриемникСсылки(ЧастьСтрокиЧастями, ИсточникСсылки, ВПределахМодуля = Ложь)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяМетода", ЧастьСтрокиЧастями[ЧастьСтрокиЧастями.Количество()-1]);
	Результат = СтруктураПрограммногоИнтерфейса.НайтиСтроки(ПараметрыОтбора);
	
	ПриемникСсылки = Неопределено;
	Если Результат.Количество() = 1 Тогда
		ПриемникСсылки = Результат[0];
	ИначеЕсли Результат.Количество() > 1 Тогда
		Для Каждого СтрокаРезультата Из Результат Цикл
			Если ВПределахМодуля И СтрокаРезультата.ПолноеИмяОбъекта = ИсточникСсылки Тогда
				ПриемникСсылки = СтрокаРезультата;
				Прервать;
			ИначеЕсли Не ВПределахМодуля
				И СтрНайти(СтрокаРезультата.ПолноеИмяОбъекта, ЧастьСтрокиЧастями[0]) > 0 Тогда
				ПриемникСсылки = СтрокаРезультата;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПриемникСсылки;
КонецФункции

// Вспомогательные процедуры и функции.

Процедура УстановитьПеременные()
	
	КомментарийПрочитан        = Ложь;
	ЧтениеПараметров           = Ложь;
	ЧтениеВозвращаемыхЗначений = Ложь;
	ЧтениеМетода               = Ложь;
	ЧтениеПримера              = Ложь;
	МетодПрочитан              = Ложь;
	
	СтруктураМетода = Новый Структура;
	СтруктураМетода.Вставить("ОписаниеМетода", "");
	СтруктураМетода.Вставить("ОписаниеПараметров", "");
	СтруктураМетода.Вставить("ОписаниеВозвращаемогоЗначения", "");
	СтруктураМетода.Вставить("ОписаниеПримера", "");
	СтруктураМетода.Вставить("СинтаксисМетода", "");
	СтруктураМетода.Вставить("ПолноеИмяОбъекта", "");
	СтруктураМетода.Вставить("Подсистема", "");
	СтруктураМетода.Вставить("Доступность", ДоступностьМетода);
	СтруктураМетода.Вставить("Размещение", "");
	СтруктураМетода.Вставить("ИмяМетода", "");
	СтруктураМетода.Вставить("СинтаксисВызова", "");
	СтруктураМетода.Вставить("ДоступностьИдентификатор", ДоступностьИдентификатор);
	
КонецПроцедуры

Функция ИмяМенеджераОбъектаПоТипу(ТипОбъекта)
	
	Если ТипОбъектаИМенеджер = Неопределено Тогда
		ТипОбъектаИМенеджер = Новый Соответствие;
		ТипОбъектаИМенеджер.Вставить("ОбщийМодуль", "");
		ТипОбъектаИМенеджер.Вставить("ПланОбмена", "ПланыОбмена.");
		ТипОбъектаИМенеджер.Вставить("ХранилищеНастроек", "ХранилищаНастроек.");
		ТипОбъектаИМенеджер.Вставить("Константа", "Константа.");
		ТипОбъектаИМенеджер.Вставить("Справочник", "Справочники.");
		ТипОбъектаИМенеджер.Вставить("Документ", "Документы.");
		ТипОбъектаИМенеджер.Вставить("ЖурналДокументов", "ЖурналыДокументов.");
		ТипОбъектаИМенеджер.Вставить("Перечисление", "Перечисления.");
		ТипОбъектаИМенеджер.Вставить("Отчет", "Отчеты.");
		ТипОбъектаИМенеджер.Вставить("Обработка", "Обработки.");
		ТипОбъектаИМенеджер.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик.");
		ТипОбъектаИМенеджер.Вставить("ПланСчетов", "ПланыСчетов.");
		ТипОбъектаИМенеджер.Вставить("ПланВидовРасчета", "ПланыВидовРасчета.");
		ТипОбъектаИМенеджер.Вставить("РегистрСведений", "РегистрыСведений.");
		ТипОбъектаИМенеджер.Вставить("РегистрНакопления", "РегистрыНакопления.");
		ТипОбъектаИМенеджер.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии.");
		ТипОбъектаИМенеджер.Вставить("РегистрРасчета", "РегистрыРасчета.");
		ТипОбъектаИМенеджер.Вставить("БизнесПроцесс", "БизнесПроцессы.");
		ТипОбъектаИМенеджер.Вставить("Задача", "Задачи.");
	КонецЕсли;
	
	Возврат ТипОбъектаИМенеджер[ТипОбъекта];
	
КонецФункции

Процедура ЗаполнитьСоответствиеОбъектовПодсистемам(Соответствие, КоллекцияПодсистем = Неопределено)
	
	АнализПоСписку = АнализируемыеПодсистемы.Количество() > 0;
	
	Если КоллекцияПодсистем = Неопределено Тогда
		Если АнализПоСписку Тогда
			КоллекцияПодсистем = АнализируемыеПодсистемы.ВыгрузитьЗначения();
		Иначе
			КоллекцияПодсистем = ПодсистемыСПрограммнымИнтерфейсом();
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементПодсистема Из КоллекцияПодсистем Цикл
		
		Если АнализПоСписку Тогда
			ЭлементПодсистема = Метаданные.НайтиПоПолномуИмени(ЭлементПодсистема);
		ИначеЕсли ЭлементПодсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьСоответствиеОбъектовПодсистемам(Соответствие, ЭлементПодсистема.Подсистемы);
		КонецЕсли;
		
		СоставПодсистемы = ЭлементПодсистема.Состав;
		Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
			ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
			Подсистема   = ЭлементПодсистема.Синоним;
			Соответствие.Вставить(ПолноеИмяОМД, Подсистема);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументDOM(ПутьКФайлуXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ПостроительDOM = Новый ПостроительDOM;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуXML);
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

Процедура ЗаполнитьДоступностьМетода(ФайлМодуля)
	ПолноеИмяМодуля = СтрЗаменить(ФайлМодуля.ПолноеИмя, "\", "/");
	
	КорневойXMLМодуля = СтрЗаменить(ПолноеИмяМодуля, "/Ext/Module.bsl", ".xml");
	ДокументDOM       = ДокументDOM(КорневойXMLМодуля);
	ДоступностьМетода = Новый Массив;
	
	ДоступностьServer = ДокументDOM.ПолучитьЭлементыПоИмени("Server")[0].ТекстовоеСодержимое;
	Если Булево(ДоступностьServer) Тогда
		ДоступностьМетода.Добавить(НСтр("ru = 'Сервер'"));
	КонецЕсли;
	
	ДоступностьServerCall = ДокументDOM.ПолучитьЭлементыПоИмени("ServerCall")[0].ТекстовоеСодержимое;
	Если Булево(ДоступностьServerCall) Тогда
		ДоступностьМетода.Добавить(НСтр("ru = 'Вызов сервера'"));
	КонецЕсли;
	
	ДоступностьClientManagedApplication = ДокументDOM.ПолучитьЭлементыПоИмени("ClientManagedApplication")[0].ТекстовоеСодержимое;
	Если Булево(ДоступностьClientManagedApplication) Тогда
		ДоступностьМетода.Добавить(НСтр("ru = 'Тонкий клиент'"));
	КонецЕсли;
	
	ДоступностьClientOrdinaryApplication = ДокументDOM.ПолучитьЭлементыПоИмени("ClientOrdinaryApplication")[0].ТекстовоеСодержимое;
	Если Булево(ДоступностьClientOrdinaryApplication) Тогда
		ДоступностьМетода.Добавить(НСтр("ru = 'Толстый клиент'"));
	КонецЕсли;
	
	ДоступностьExternalConnection = ДокументDOM.ПолучитьЭлементыПоИмени("ExternalConnection")[0].ТекстовоеСодержимое;
	Если Булево(ДоступностьExternalConnection) Тогда
		ДоступностьМетода.Добавить(НСтр("ru = 'Внешнее соединение'"));
	КонецЕсли;
	
	Если Булево(ДоступностьServer) И (Булево(ДоступностьClientManagedApplication) Или Булево(ДоступностьServerCall)) Тогда
		ДоступностьИдентификатор = "КлиентИСервер";
	ИначеЕсли Булево(ДоступностьServer) Тогда
		ДоступностьИдентификатор = "Сервер";
	Иначе
		ДоступностьИдентификатор = "Клиент";
	КонецЕсли;
	
	ДоступностьМетода = СтрСоединить(ДоступностьМетода, ", ");
	
КонецПроцедуры

Функция АдресСсылки(Метод)
	ПолноеИмяЧастями = СтрРазделить(Метод.ПолноеИмяОбъекта, ".");
	ИмяМодуля = ПолноеИмяЧастями[1];
	Возврат ИмяМодуля + Метод.ИмяМетода;
КонецФункции

Функция СинтаксисВызоваМетода(Знач Метод, Знач Расположение)
	
	ЭтоФункция = СтрНайти(Метод, "Функция ") > 0;
	
	Метод = СтрЗаменить(Метод, "Функция ", "");
	Метод = СтрЗаменить(Метод, "Процедура ", "");
	Метод = СтрЗаменить(Метод, " Экспорт", "");
	Метод = СтрЗаменить(Метод, ")", "");
	
	МетодИПараметры = СтрРазделить(Метод, "(");
	
	ИмяМетода = МетодИПараметры[0];
	Параметры = МетодИПараметры[1];
	
	СтрокаПараметров = "";
	Если Не ПустаяСтрока(Параметры) Тогда
		МассивПараметров = СтрРазделить(Параметры, ",");
		Для Каждого Параметр Из МассивПараметров Цикл
			Параметр = СокрЛП(СтрЗаменить(Параметр, "Знач ", ""));
			Параметр = СокрЛП(СтрРазделить(Параметр, "=")[0]);
			СтрокаПараметров = ?(ПустаяСтрока(СтрокаПараметров), Параметр, СтрокаПараметров + ", " + Параметр);
		КонецЦикла;
	КонецЕсли;
	
	ПолноеИмяОбъектаЧастями = СтрРазделить(Расположение, ".");
	ТипОбъекта   = ПолноеИмяОбъектаЧастями[0];
	ИмяМенеджера = ИмяМенеджераОбъектаПоТипу(ТипОбъекта);
	
	СинтаксисВызоваБезПараметров = ИмяМенеджера + ПолноеИмяОбъектаЧастями[1] + "." + ИмяМетода;
	СинтаксисВызова = СинтаксисВызоваБезПараметров + "(" + СтрокаПараметров + ")";
	
	Результат = Новый Структура;
	Результат.Вставить("СинтаксисВызова", СинтаксисВызова);
	Результат.Вставить("ИмяМетода", ИмяМетода);
	Результат.Вставить("СинтаксисВызоваБезПараметров", СинтаксисВызоваБезПараметров);
	Результат.Вставить("ЭтоФункция", ЭтоФункция);
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьПропущеннуюГиперссылку(Метод, Расположение)
	СинтаксисВызоваМетода = СинтаксисВызоваМетода(Метод.СинтаксисМетода, Метод.ПолноеИмяОбъекта);
	ЛогСозданияОписания.НеНайденаГиперссылка.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров, Расположение);
КонецПроцедуры

Процедура НормализоватьСтроку(Текст)
	Текст = СтрЗаменить(Текст, "&",  "&amp;");
	Текст = СтрЗаменить(Текст, "'",  "&apos;");
	Текст = СтрЗаменить(Текст, "<",  "&lt;");
	Текст = СтрЗаменить(Текст, ">",  "&gt;");
КонецПроцедуры

Функция ЗаголовокСовпадающихМетодов(Метод, ИндексСовпадающегоМетода)
	
	Если Метод.ДоступностьИдентификатор = "КлиентИСервер" Тогда
		Заголовок = Строка(ИндексСовпадающегоМетода) + ". " + НСтр("ru = 'Для вызова с клиента и сервера'");
	ИначеЕсли Метод.ДоступностьИдентификатор = "Клиент" Тогда
		Заголовок = Строка(ИндексСовпадающегоМетода) + ". " + НСтр("ru = 'Для вызова с клиента'");
	Иначе
		Заголовок = Строка(ИндексСовпадающегоМетода) + ". " +  НСтр("ru = 'Для вызова с сервера'");
	КонецЕсли;
	
	ЗаголовокСовпадающиеМетоды = "<p class=""Paragraph0c""><span class=""Bold"">[Адрес]" + "%1" + "</span></p>";
	ЗаголовокСовпадающиеМетоды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСовпадающиеМетоды, Заголовок);
	
	Возврат ЗаголовокСовпадающиеМетоды;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли