
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для Каждого Проверка Из ПроверкаИКорректировкаДанных.Проверки(Истина, Истина) Цикл
		
		СтрокаТаблицы = Объект.Проверки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Проверка);
		Если ЗначениеЗаполнено(Проверка.Дата) Тогда
			СтрокаТаблицы.Дата = МестноеВремя(Проверка.Дата, ЧасовойПоясСеанса());
		КонецЕсли;
		Если ПустаяСтрока(СтрокаТаблицы.ФормаНастроек) Тогда
			СтрокаТаблицы.КартинкаНастройки = 1;
		Иначе
			СтрокаТаблицы.АдресНастройки = ПоместитьВоВременноеХранилище(Проверка.Настройки, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможноСохранениеВЛокальныйКаталог = Не ПроверкаИКорректировкаДанных.ВнедренаБСП() Или Не ПроверкаИКорректировкаДанных.Модуль("ОбщегоНазначенияПовтИсп").ДоступноИспользованиеРазделенныхДанных();
	
	Элементы.ГруппаСохранениеРезультата.Видимость = ВозможноСохранениеВЛокальныйКаталог;
	УстановитьДоступностьКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	ВозможноСохранениеВЛокальныйКаталог = Ложь;
	Элементы.ГруппаСохранениеРезультата.Видимость = Ложь;
	#Иначе
	ПрочитатьРезультатыПоследнихПроверок();
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Исправлять = Объект.Исправлять;
	УстановитьДоступностьКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ВыбранныеПроверки = Новый Массив;
	НастройкиПроверок = Новый Соответствие;
	
	Для Каждого Проверка Из Объект.Проверки Цикл
		Если Проверка.Пометка Тогда
			ВыбранныеПроверки.Добавить(Проверка.Идентификатор);
		КонецЕсли;
		Если Не ПустаяСтрока(Проверка.ФормаНастроек) Тогда
			НастройкиПроверок.Вставить(Проверка.Идентификатор, ПолучитьИзВременногоХранилища(Проверка.АдресНастройки));
		КонецЕсли;
	КонецЦикла;
	
	Настройки.Вставить("ВыбранныеПроверки", ВыбранныеПроверки);
	Настройки.Вставить("НастройкиПроверок", НастройкиПроверок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсправлятьПриИзменении(Элемент)
	
	Объект.Исправлять = Исправлять;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранятьРезультатПриИзменении(Элемент)
	
	УстановитьДоступностьКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияРезультатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = Объект.КаталогСохраненияРезультата;
	Диалог.Показать(Новый ОписаниеОповещения("ПослеВыбораКаталога", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкиПометкаПриИзменении(Элемент)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Проверка = Объект.Проверки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ПроверкиКартинкаНастройки Тогда
		РедактироватьНастройки(Проверка);
	ИначеЕсли Поле = Элементы.ПроверкиПредставлениеРезультатаГиперСсылка Тогда
		ПоказатьРезультат(Проверка);
	ИначеЕсли Поле = Элементы.ПроверкиНаименование Тогда
		Если Не ПустаяСтрока(Проверка.ФормаНастроек) Тогда
			РедактироватьНастройки(Проверка);
		ИначеЕсли ЗначениеЗаполнено(Проверка.Описание) Тогда
			ПоказатьЗначение(, Проверка.Описание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроверки(Команда)
	
	Если Объект.Проверки.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одной проверки'"));
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	Если ВозможноСохранениеВЛокальныйКаталог И Объект.СохранятьРезультат И ПустаяСтрока(Объект.КаталогСохраненияРезультата) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не указан каталог'");
		Сообщение.Поле = "Объект.КаталогСохраненияРезультата";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	ЗапуститьПроверкуДанных();
	
	ПараметрыФормы = Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания);
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияПроверок", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПроверкаИКорректировкаДанных.Форма.ФормаОжидания", ПараметрыФормы, ЭтотОбъект, , , , Оповещение); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	Для Каждого Проверка Из Объект.Проверки Цикл
		Проверка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	Для Каждого Проверка Из Объект.Проверки Цикл
		Проверка.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКаталога(Форма)
	
	Форма.Элементы.КаталогСохраненияРезультата.ТолькоПросмотр = Не Форма.Объект.СохранятьРезультат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КаталогСохраненияРезультата = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаСервере 
Процедура ЗапуститьПроверкуДанных()
	
	Проверки = Объект.Проверки.Выгрузить();
	Проверки.Колонки.Добавить("Настройки");
	Проверки.Колонки.Добавить("ВременныеДанные");
	Для Каждого СтрокаТаблицы Из Проверки Цикл
		Если Не СтрокаТаблицы.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(СтрокаТаблицы.АдресНастройки) Тогда
			СтрокаТаблицы.Настройки = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресНастройки);
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(СтрокаТаблицы.АдресВременныеДанные) Тогда
			СтрокаТаблицы.ВременныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресВременныеДанные);
		КонецЕсли;
		Если Не ЭтоАдресВременногоХранилища(СтрокаТаблицы.ТабличныйДокумент) Тогда
			СтрокаТаблицы.ТабличныйДокумент = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыПроцедуры = Новый Массив;
	ПараметрыПроцедуры.Добавить(Проверки); 
	ПараметрыПроцедуры.Добавить(Объект.Исправлять);
	ПараметрыПроцедуры.Добавить(АдресРезультата);
	
	Задание = ФоновыеЗадания.Выполнить("ПроверкаИКорректировкаДанных.ПроверитьДанныеВФоне", ПараметрыПроцедуры, 1);
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияПроверок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Состояние = "Завершено" Тогда
		ОбработатьРезультатВыполнения();
		#Если Не ВебКлиент Тогда
			СохранитьРезультатВКаталог();
		#КонецЕсли
	ИначеЕсли Результат.Состояние = "ЗавершеноАварийно" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполнения()
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Результат.Выполнено Тогда
		
		Для Каждого Проверка Из Объект.Проверки Цикл
			
			Если Не Проверка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРезультат = Результат.Проверки[Объект.Проверки.Индекс(Проверка)];
			Проверка.Дата = МестноеВремя(СтрокаРезультат.Дата, ЧасовойПоясСеанса());
			Проверка.Исправление = СтрокаРезультат.Исправление;
			Проверка.ОбнаруженыПроблемы = СтрокаРезультат.ОбнаруженыПроблемы;
			Проверка.ПредставлениеРезультата = СтрокаРезультат.ПредставлениеРезультата;
			Проверка.ТабличныйДокумент = СтрокаРезультат.ТабличныйДокумент;
			
		КонецЦикла;
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Для проверки ""%1"" требуется заполнить настройки.'");
		ШаблонПоля = "Объект.Проверки[%1].Наименование";
		
		Для Каждого Проверка Из Объект.Проверки Цикл
			СтрокаРезультат = Результат.Проверки[Объект.Проверки.Индекс(Проверка)];
			Если Проверка.Пометка И СтрокаРезультат.ТребуетсяЗаполнитьНастройки Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(ШаблонОшибки, Проверка.Наименование);;
				Сообщение.Поле = СтрШаблон(ШаблонПоля, Формат(Объект.Проверки.Индекс(Проверка), "ЧН=0; ЧГ=0"));
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультат(Проверка)
	
	Если Не ЗначениеЗаполнено(Проверка.ТабличныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", Проверка.Наименование);
	ПараметрыФормы.Вставить("ТабличныйДокумент", Проверка.ТабличныйДокумент);
	ПараметрыФормы.Вставить("Описание", Проверка.ПредставлениеРезультата);
	
	Если ТипЗнч(Проверка.ТабличныйДокумент) = Тип("Строка") 
		И Не ЭтоАдресВременногоХранилища(Проверка.ТабличныйДокумент) Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(Проверка.ТабличныйДокумент);
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		ПараметрыФормы.Вставить("ТабличныйДокумент", Адрес);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПроверкаИКорректировкаДанных.Форма.Результат", ПараметрыФормы, ЭтотОбъект, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройки(Проверка)
	
	Если ПустаяСтрока(Проверка.ФормаНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Проверка.АдресНастройки); 
	ПараметрыФормы.Вставить("ВременныеДанные", Проверка.АдресВременныеДанные); 
	ПараметрыФормы.Вставить("Исправлять", Объект.Исправлять);
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеРедактированияНастроек", ЭтотОбъект, Новый Структура("Проверка", Проверка));
	ОткрытьФорму(Проверка.ФормаНастроек, ПараметрыФормы, ЭтотОбъект, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Проверка = ДополнительныеПараметры.Проверка;
	
	Если ЭтоАдресВременногоХранилища(Проверка.АдресНастройки) 
		И Проверка.АдресНастройки <> РезультатЗакрытия.Настройки Тогда
		УдалитьИзВременногоХранилища(Проверка.АдресНастройки);
	КонецЕсли;
	Проверка.АдресНастройки = РезультатЗакрытия.Настройки;
	
	Если ЭтоАдресВременногоХранилища(Проверка.АдресВременныеДанные) 
		И Проверка.АдресВременныеДанные <> РезультатЗакрытия.ВременныеДанные Тогда
		УдалитьИзВременногоХранилища(Проверка.АдресВременныеДанные);
	КонецЕсли;
	Проверка.АдресВременныеДанные = РезультатЗакрытия.ВременныеДанные;
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияПроверкиИКорректировкиДанных.Ссылка,
	|	ИсторияПроверкиИКорректировкиДанных.Дата,
	|	ИсторияПроверкиИКорректировкиДанных.Исправление,
	|	ИсторияПроверкиИКорректировкиДанных.ОбнаруженыПроблемы,
	|	ИсторияПроверкиИКорректировкиДанных.ПредставлениеРезультата,
	|	ИсторияПроверкиИКорректировкиДанных.ТабличныйДокумент
	|ИЗ
	|	Справочник.ИсторияПроверкиИКорректировкиДанных КАК ИсторияПроверкиИКорректировкиДанных";
	
	ПрошлыеРезультаты = Запрос.Выполнить().Выгрузить();
	ПрошлыеРезультаты.Индексы.Добавить("Ссылка");
		
	Для Каждого Проверка Из Объект.Проверки Цикл
		
		ИсторияСсылка = Справочники["ИсторияПроверкиИКорректировкиДанных"].ПолучитьСсылку(Проверка.Идентификатор);
		ПрошлыйРезультат = ПрошлыеРезультаты.Найти(ИсторияСсылка, "Ссылка");
		Если ПрошлыйРезультат <> Неопределено Тогда
			Если ЗначениеЗаполнено(ПрошлыйРезультат.Дата) Тогда
				Проверка.Дата = МестноеВремя(ПрошлыйРезультат.Дата, ЧасовойПоясСеанса());
			КонецЕсли;
			Проверка.Исправление = ПрошлыйРезультат.Исправление;
			Проверка.ОбнаруженыПроблемы = ПрошлыйРезультат.ОбнаруженыПроблемы;
			Проверка.ПредставлениеРезультата = ПрошлыйРезультат.ПредставлениеРезультата;
			Проверка.ТабличныйДокумент = ПрошлыйРезультат.ТабличныйДокумент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Если Не ВебКлиент Тогда
	
&НаКлиенте
Процедура ПрочитатьРезультатыПоследнихПроверок()
	
	Если Не Объект.СохранятьРезультат 
		Или Не ВозможноСохранениеВЛокальныйКаталог 
		Или ПустаяСтрока(Объект.КаталогСохраненияРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоискФайловРезультатовЗавершение", ЭтотОбъект);
	НачатьПоискФайлов(Оповещение, Объект.КаталогСохраненияРезультата,  "*", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискФайловРезультатовЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыРезультата = Новый Соответствие;
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		ФайлыРезультата.Вставить(НайденныйФайл.ПолноеИмя, Истина);
	КонецЦикла;
	
	Для Каждого Проверка Из Объект.Проверки Цикл
		
		ИмяФайлаРезультата = ИмяКаталогаРезультатаПроверки(Проверка) + "Результат.xml";	
		ИмяФайлаТабличногоДокумента = ИмяКаталогаРезультатаПроверки(Проверка) + "Результат.mxl";
		
		Если ФайлыРезультата[ИмяФайлаРезультата] <> Неопределено Тогда
			Попытка
				Результат = ПрочитатьXMLВСтруктуру(ПолучитьСтрокуИзДвоичныхДанных(Новый ДвоичныеДанные(ИмяФайлаРезультата)));
				ЗаполнитьЗначенияСвойств(Проверка, Результат, "Дата, Исправление, ОбнаруженыПроблемы, ПредставлениеРезультата");
			Исключение
				ШаблонСообщения = НСтр("ru = 'Не удалось прочитать файл %1, по причине: %2'");
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(ШаблонСообщения, ИмяФайлаРезультата, ОписаниеОшибки());
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
		
		Если ФайлыРезультата[ИмяФайлаТабличногоДокумента] <> Неопределено Тогда
			Проверка.ТабличныйДокумент = ИмяФайлаТабличногоДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатВКаталог()
	
	Если Не Объект.СохранятьРезультат Или Не ВозможноСохранениеВЛокальныйКаталог Тогда
		Возврат;
	КонецЕсли;
	
	// Действия при сохранении результатов в каталог:
	// 1. Создать каталоги.
	// 2. Найти все файлы табличных документов.
	// 3. Удалить файлы табличных документов.
	// 4. Записать результаты.
	
	СоздатьКаталоги = Новый Массив;
	Для Каждого Проверка Из Объект.Проверки Цикл
		Если Не Проверка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		СоздатьКаталоги.Добавить(ИмяКаталогаРезультатаПроверки(Проверка));
	КонецЦикла;
	
	Если СоздатьКаталоги.Количество() Тогда
		СоздатьКаталоги("", Новый Структура("СоздатьКаталоги", СоздатьКаталоги));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталоги(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.СоздатьКаталоги.Количество() = 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПоискСтарыхФайловРезультатовЗавершение", ЭтотОбъект);
		НачатьПоискФайлов(Оповещение, Объект.КаталогСохраненияРезультата,  "*.mxl", Истина);
		
	Иначе
	
		Оповещение = Новый ОписаниеОповещения("СоздатьКаталоги", ЭтотОбъект, ДополнительныеПараметры);
		ИмяКаталога = ДополнительныеПараметры.СоздатьКаталоги[0];
		ДополнительныеПараметры.СоздатьКаталоги.Удалить(0);
		НачатьСозданиеКаталога(Оповещение, ИмяКаталога); 
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискСтарыхФайловРезультатовЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыТабличныхДокументов = Новый Массив;
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		ФайлыТабличныхДокументов.Добавить(НайденныйФайл.ПолноеИмя);
	КонецЦикла;
	
	ФайлыКУдалению = Новый Массив;
	Для Каждого Проверка Из Объект.Проверки Цикл
		Если Не Проверка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ИмяФайлаТабличногоДокумента = ИмяКаталогаРезультатаПроверки(Проверка) + "Результат.mxl";
		Если ФайлыТабличныхДокументов.Найти(ИмяФайлаТабличногоДокумента) <> Неопределено Тогда
			ФайлыКУдалению.Добавить(ИмяФайлаТабличногоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьФайлыТабличныхДокументов(Новый Структура("ФайлыКУдалению", ФайлыКУдалению));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыТабличныхДокументов(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ФайлыКУдалению.Количество() = 0 Тогда
		
		ЗаписатьРезультатВКаталог();
		
	Иначе
	
		Оповещение = Новый ОписаниеОповещения("УдалитьФайлыТабличныхДокументов", ЭтотОбъект, ДополнительныеПараметры);
		ИмяФайла = ДополнительныеПараметры.ФайлыКУдалению[0];
		ДополнительныеПараметры.ФайлыКУдалению.Удалить(0);
		НачатьУдалениеФайлов(Оповещение, ИмяФайла); 
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатВКаталог() 
	
	Для Каждого Проверка Из Объект.Проверки Цикл
		Если Не Проверка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = Новый Структура;
		Данные.Вставить("Наименование", Проверка.Наименование);
		Данные.Вставить("Дата", Проверка.Дата);
		Данные.Вставить("Исправление", Проверка.Исправление);
		Данные.Вставить("ОбнаруженыПроблемы", Проверка.ОбнаруженыПроблемы);
		Данные.Вставить("ПредставлениеРезультата", Проверка.ПредставлениеРезультата);
		
		ДвоичныеДанные = ЗаписатьСтруктуруВXML(Данные);
		ДвоичныеДанные.Записать(ИмяКаталогаРезультатаПроверки(Проверка) + "Результат.xml");
		
		ИмяФайлаТабличногоДокумента = ИмяКаталогаРезультатаПроверки(Проверка) + "Результат.mxl";
		
		Если ЭтоАдресВременногоХранилища(Проверка.ТабличныйДокумент) Тогда
			ПолучитьФайл(Проверка.ТабличныйДокумент, ИмяФайлаТабличногоДокумента, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяКаталогаРезультатаПроверки(Проверка)
	
	Файл = Новый Файл(Объект.КаталогСохраненияРезультата);
	
	Возврат Файл.ПолноеИмя + ПолучитьРазделительПути() + Проверка.Идентификатор + ПолучитьРазделительПути();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьXMLВСтруктуру(Строка)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Строка);
	Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("Структура"));
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
				
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьСтруктуруВXML(Данные)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные, НазначениеТипаXML.Явное);
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(ЗаписьXML.Закрыть());
		
КонецФункции

#КонецЕсли

#КонецОбласти
