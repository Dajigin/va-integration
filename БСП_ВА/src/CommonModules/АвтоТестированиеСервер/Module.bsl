//@strict-types
#Область СлужебныйПрограммныйИнтерфейс	

// Объект тестирования имеющий дату при записи.
// 
// Параметры:
//  Источник - ДокументОбъект - Источник
//  Отказ - Булево - Отказ
Процедура ОбъектТестированияИмеющийДатуПриЗаписи(Источник, Отказ) Экспорт
	Если Не ПараметрыСеанса.ЭтоАвтоТестирование
		Или Не Источник.ДополнительныеСвойства.ЭтоНовыйОбъект Тогда  
		Возврат;
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрСведений.СозданныеОбъектыТестированияИмеющиеДату";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ТекущийМаксНомер = МаксимальныйНомерОбъектаИмеющегоДату();
	НовыйНомерЗаписи = ТекущийМаксНомер + 1;

	
	Менеджер = РегистрыСведений.СозданныеОбъектыТестированияИмеющиеДату.СоздатьМенеджерЗаписи();
	Менеджер.НомерЗаписи = НовыйНомерЗаписи;
	Менеджер.УникальныйИдентификатор = Источник.Ссылка.УникальныйИдентификатор();
	Менеджер.ИмяТипа = Источник.Метаданные().ПолноеИмя();
	Менеджер.Записать();
КонецПроцедуры

// Параметры:
//  Источник - ДокументОбъект - Источник
//  Отказ - Булево - Отказ
//  РежимЗаписи - РежимЗаписиДокумента - Режим записи
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения
Процедура ОбъектТестированияДокументПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ОбъектТестированияИмеющийДатуПередЗаписью(Источник);
КонецПроцедуры

// Объект тестирования бизнес процесс перед записью перед записью.
// 
// Параметры:
//  Источник - ЗадачаОбъект, БизнесПроцессОбъект - Источник
//  Отказ - Булево - Отказ
Процедура ОбъектТестированияБизнесПроцессПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	ОбъектТестированияИмеющийДатуПередЗаписью(Источник);
КонецПроцедуры

// Установка параметров сеанса.
// 
// Параметры:
//  ИмяПараметра - Строка - Имя параметра.
//  УстановленныеПараметры - Массив из Строка - Установленные параметры
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ЭтоАвтоТестирование" Тогда
		ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска"); // Строка -
		ПараметрыСеанса.ЭтоАвтоТестирование =  (СтрНайти(ПараметрЗапускаПриложения, "АвтоТестирование") > 0);
		УстановленныеПараметры.Добавить("ЭтоАвтоТестирование");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание объектов, созданных при тестировании, имеющих дату.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//	* НомерЗаписи - Число
//	* УникальныйИдентификатор - УникальныйИдентификатор - ГУИД объекта
//	* ИмяТипа - Строка - полное имя типа объекта. Например, "Документ._ДемоЗаказПокупателя"
Функция ОбъектыСозданныеПриТестированииИмеющиеДату() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СозданныеОбъектыТестированияИмеющиеДату.НомерЗаписи КАК НомерЗаписи,
	|	СозданныеОбъектыТестированияИмеющиеДату.УникальныйИдентификатор,
	|	СозданныеОбъектыТестированияИмеющиеДату.ИмяТипа
	|ИЗ
	|	РегистрСведений.СозданныеОбъектыТестированияИмеющиеДату КАК СозданныеОбъектыТестированияИмеющиеДату
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи УБЫВ");

	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
КонецФункции

// Удалить регистрацию в регистре объекта, созданного при тестировании, имеющего дату.
// 
// Параметры:
//  НомерЗаписи - Число - Номер записи
//  Идентификатор - УникальныйИдентификатор - Идентификатор
Процедура УдалитьРегистрациюОбъектаТестированияИмеющегоДату(НомерЗаписи, Идентификатор) Экспорт
	МенеджерЗаписи = РегистрыСведений.СозданныеОбъектыТестированияИмеющиеДату.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НомерЗаписи = НомерЗаписи;
	МенеджерЗаписи.УникальныйИдентификатор = Идентификатор;
	МенеджерЗаписи.Удалить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Источник - ДокументОбъект - 
//			 - БизнесПроцессОбъект -
//			 - ЗадачаОбъект -
Процедура ОбъектТестированияИмеющийДатуПередЗаписью(Источник) Экспорт
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(Источник.Ссылка));
КонецПроцедуры
// Максимальный номер объекта, имеющего дату.
// 
// Возвращаемое значение:
//  Число - Максимальный номер объекта, имеющего дату
Функция МаксимальныйНомерОбъектаИмеющегоДату()
	ЗапросМаксНомер = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	СозданныеОбъектыТестированияИмеющиеДату.НомерЗаписи КАК НомерЗаписи
	|ИЗ
	|	РегистрСведений.СозданныеОбъектыТестированияИмеющиеДату КАК СозданныеОбъектыТестированияИмеющиеДату
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи УБЫВ");
	РезультатЗапросаМаксНомер = ЗапросМаксНомер.Выполнить();
	Если РезультатЗапросаМаксНомер.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = РезультатЗапросаМаксНомер.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.НомерЗаписи;	
КонецФункции
#КонецОбласти