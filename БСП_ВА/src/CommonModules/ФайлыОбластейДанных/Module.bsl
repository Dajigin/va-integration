
#Область ПрограммныйИнтерфейс

// Возвращает имя, размер, расположение или двоичные данные файла по идентификатору.
// Если файл хранится на диске, в значение ПолноеИмя возвращается расположение файла.
// Если файл хранится в информационной базе, в значение Данные возвращаются двоичные данные. 
// 
// Параметры:
//  Идентификатор - Строка - идентификатор файла (длина - 36).
// 
// Возвращаемое значение:
//  Структура - описание файла, см. НовыйОписаниеФайла:
//	 * ИмяФайла - Строка - имя файла
//	 * Размер - Число - размер файла в байтах
//	 * ПолноеИмя - Строка, Неопределено - расположение файла в томе.
//	 * Данные - ДвоичныеДанные, Неопределено - двоичные данные файла.
//	 * CRC32 - Число - контрольная сумма данных файла.
//	 * УстановитьВременныйПриПолучении - Булево - признак временного при получении.
//
Функция ОписаниеФайла(Знач Идентификатор) Экспорт
	
	Словарь = ФайлыОбластейДанныхСловарь;
	
	ИдентификаторФайла = Новый УникальныйИдентификатор(Идентификатор);
	
	ОписаниеФайла = НовыйОписаниеФайла();
	
	Запись = РегистрыСведений.ФайлыОбластейДанных.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = ИдентификаторФайла;
	УстановитьПривилегированныйРежим(Истина);
	Запись.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Запись.Выбран() Тогда
		ОписаниеФайла.Имя = Запись.Имя;
		ОписаниеФайла.Размер = Запись.Размер;
		ОписаниеФайла.УстановитьВременныйПриПолучении = Запись.УстановитьВременныйПриПолучении;
		ОписаниеФайла.ИдентификаторФайла = ИдентификаторФайла;
		ОписаниеФайла.Данные = Запись.Файл.Получить();
		ОписаниеФайла.CRC32 = Запись.ФайлCRC32;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Словарь.ФайлНеНайденПоИдентификатору(), ИдентификаторФайла);
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Возвращает двоичные данные файла по идентификатору.
// 
// Параметры:
//  Идентификатор - Строка - идентификатор файла (длина - 36).
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные файла.
//
Функция ДвоичныеДанныеФайла(Знач Идентификатор) Экспорт
	
	ОписаниеФайла = ОписаниеФайла(Идентификатор);
	
	Если ОписаниеФайла.УстановитьВременныйПриПолучении Тогда
		УстановитьПризнакВременного(ОписаниеФайла.ИдентификаторФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеФайла.ПолноеИмя) Тогда
		Возврат Новый ДвоичныеДанные(ОписаниеФайла.ПолноеИмя);
	Иначе    
		Возврат ОписаниеФайла.Данные;
	КонецЕсли;
	
КонецФункции

// Сохраняет данные как запись о файле в регистре сведений ФайлыОбластейДанных.
// Если параметр Данные = Неопределено, должен быть заполнен параметр ПолноеИмя = полное имя файла с путем.
//
// Параметры:
//  Имя - Строка - имя файла в хранилище.
//  Данные - ДвоичныеДанные, Строка, Неопределено - двоичные данные файла, если ПолноеИмя = Неопределено.
//  ПолноеИмя - Строка, Неопределено - полное имя файла с путем, если Данные = Неопределено.
//  Временный - Булево - признак временного файла (будет удален по заданному расписанию рег. задания УдалениеВременныхФайловОбластейДанных)
//  УстановитьВременныйПриПолучении - Булево - устанавливать признак временного файла при первом получении.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - Идентификатор файла.
//
Функция ЗагрузитьФайл(Знач Имя, Данные = Неопределено, ПолноеИмя = Неопределено, 
	Временный = Ложь, 
	УстановитьВременныйПриПолучении = Ложь) Экспорт
	
	Словарь = ФайлыОбластейДанныхСловарь;
	Если Не ЗначениеЗаполнено(Имя) Тогда
		Если ЗначениеЗаполнено(ПолноеИмя) Тогда
			СвойстваФайла = Новый Файл(ПолноеИмя);
			Имя = СвойстваФайла.Имя;
		Иначе
			ВызватьИсключение Словарь.ИмяФайлаДляСохраненияНеЗадано();
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Данные) И Не ЗначениеЗаполнено(ПолноеИмя) Тогда
		ВызватьИсключение Словарь.ИнформацияОФайлеОтсутствует();
	КонецЕсли;
	СвойстваФайла = Новый Файл(Имя);
	Запись = РегистрыСведений.ФайлыОбластейДанных.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = Новый УникальныйИдентификатор;
	Запись.Имя = СвойстваФайла.Имя;
	Запись.Временный = Временный;
	Запись.УстановитьВременныйПриПолучении = УстановитьВременныйПриПолучении;
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Запись.Размер = Данные.Размер();
		ДобавляемыеДанные = Данные;
	Иначе // Иначе это должен быть путь к файлу на диске.
		СохраняемыйФайл = Новый Файл(ПолноеИмя);
		Если НЕ СохраняемыйФайл.Существует() Или Не СохраняемыйФайл.ЭтоФайл() Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Словарь.ФайлНеНайденПоПолномуИмени(), СохраняемыйФайл.ПолноеИмя);
		КонецЕсли;
		Запись.Размер = СохраняемыйФайл.Размер();
		ДобавляемыеДанные = Новый ДвоичныеДанные(СохраняемыйФайл.ПолноеИмя);
	КонецЕсли;
	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	Если ТипЗнч(ДобавляемыеДанные) = Тип("ДвоичныеДанные") Тогда
		Хеширование.Добавить(ДобавляемыеДанные);
	Иначе
		Хеширование.ДобавитьФайл(ДобавляемыеДанные);
	КонецЕсли; 
	Запись.ФайлCRC32 = Хеширование.ХешСумма;
	Запись.Файл = Новый ХранилищеЗначения(ДобавляемыеДанные, Новый СжатиеДанных(9));
	УстановитьПривилегированныйРежим(Истина);
	Запись.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Запись.Идентификатор;
	
КонецФункции

// Удалить файл из информационной базы
//
// Параметры:
//  ИдентификаторФайла - УникальныйИдентификатор -  идентификатор удаляемого файла.
//  УдалятьЕслиНаДиске - Булево - если Ложь и хранение на диске, регистрируется как временный и с диска не удаляется.
//
// Возвращаемое значение:
//  Булево - Успешность удаления.
//
Функция УдалитьФайл(Знач ИдентификаторФайла, Знач УдалятьЕслиНаДиске = Истина) Экспорт
	
	Словарь = ФайлыОбластейДанныхСловарь;
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		БлокироватьЗаписьОФайлеВРегистре(ИдентификаторФайла);
		Запись = РегистрыСведений.ФайлыОбластейДанных.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = ИдентификаторФайла;
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(СтрШаблон("%1.%2", Словарь.КорневоеСобытие(), Словарь.УдалениеФайлаИзХранилища()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Словарь.ФайлНеНайденПоИдентификатору(), ИдентификаторФайла));
			Возврат Ложь;
		КонецЕсли;
		// Удалить запись из регистра.
		Запись.Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СтрШаблон("%1.%2", Словарь.КорневоеСобытие(), Словарь.УдалениеФайлаИзХранилища()), 
		УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

// Устанавливает у файла признак "Временный" = Истина.
//
// Параметры:
//  ИдентификаторФайла - УникальныйИдентификатор -  идентификатор файла.
//
Функция УстановитьПризнакВременного(Знач ИдентификаторФайла) Экспорт
	
	Словарь = ФайлыОбластейДанныхСловарь;
	
	Если ТипЗнч(ИдентификаторФайла) <> Тип("УникальныйИдентификатор") Тогда
		ВызватьИсключение СтрШаблон(Словарь.ПереданИдентификаторНекорректногоТипа(), ТипЗнч(ИдентификаторФайла));  
	КонецЕсли; 
	Словарь = ФайлыОбластейДанныхСловарь;
	УстановитьПривилегированныйРежим(Истина);
	Запись = РегистрыСведений.ФайлыОбластейДанных.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = ИдентификаторФайла;
	Запись.Прочитать();
	Если Не Запись.Выбран() Тогда
		ЗаписьЖурналаРегистрации(СтрШаблон("%1.%2", Словарь.КорневоеСобытие(), Словарь.УстановкаПризнакаВременный()), 
		УровеньЖурналаРегистрации.Ошибка,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Словарь.ФайлНеНайденПоИдентификатору(), ИдентификаторФайла));
		Возврат Ложь;
	КонецЕсли;
	Запись.Временный = Истина;
	Запись.Записать();
	
КонецФункции

// Помещает данные файла во временное хранилище и возвращает описание
// для сохранения или открытия файла.
//
// Параметры:
//  ИдентификаторФайла - УникальныйИдентификатор - идентификатор файла. 
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы для помещения.
// 
// Возвращаемое значение:
//  ОписаниеПередаваемогоФайла - ОписаниеПередаваемогоФайла - описание для сохранения или открытия файла.
//
Функция ОписаниеПередаваемогоФайла(ИдентификаторФайла, ИдентификаторФормы) Экспорт
	
	ОписаниеФайла = ОписаниеФайла(ИдентификаторФайла);
	Если ЗначениеЗаполнено(ОписаниеФайла.ПолноеИмя) Тогда
		ДвоичныеДанные = ДвоичныеДанныеФайла(ИдентификаторФайла);
	Иначе
		ДвоичныеДанные = ОписаниеФайла.Данные;
	КонецЕсли; 
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	
	ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла;
	ОписаниеПередаваемогоФайла.Имя = ОписаниеФайла.Имя;
	ОписаниеПередаваемогоФайла.Хранение = АдресХранилища;
	
	Возврат ОписаниеПередаваемогоФайла;
	
КонецФункции

#Область ЛогическоеХранилище

// Возвращает описание данных логического хранилища.
//
// Параметры:
//  ИдентификаторХранилища - Строка - идентификатор логического хранилища.
//  ИдентификаторДанных    - Строка - идентификатор данных хранилища.
// 
// Возвращаемое значение:
//  Структура - описание данных хранилища:
//    * ИмяФайла - Строка - имя файла.
//    * Размер - Число - размер файла в байтах.
//    * Данные - ДвоичныеДанные, Строка - двоичные данные файла или расположение файла на диске.
//
Функция Описание(ИдентификаторХранилища, ИдентификаторДанных) Экспорт
	
	Результат = Неопределено;
	
	Если ИдентификаторХранилища = ИдентификаторХранилища() Тогда
		Результат = ОписаниеФайла(ИдентификаторДанных);
		Результат.Вставить("ИмяФайла", Результат.Имя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные логического хранилища.
//  
// Параметры:
//  ОписаниеДанных - Структура - описание данных хранилища.
//  
// Возвращаемое значение:
//  ДвоичныеДанные, Строка - двоичные данные файла или расположение файла на диске.
//
Функция Данные(ОписаниеДанных) Экспорт
	
	Если ОписаниеДанных.УстановитьВременныйПриПолучении Тогда
		УстановитьПризнакВременного(ОписаниеДанных.ИдентификаторФайла);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеДанных.ПолноеИмя) Тогда
		Возврат ОписаниеДанных.ПолноеИмя;
	Иначе
		Возврат ОписаниеДанных.Данные;
	КонецЕсли; 
КонецФункции

// Записывает данные в логическое хранилище.
// 
// Параметры:
//  ОписаниеДанных - Структура - описание данных хранилища:
//    * ИмяФайла - Строка - имя файла.
//    * Размер - Число - размер файла в байтах.
//    * Данные - ДвоичныеДанные, Строка - двоичные данные файла или расположение файла на диске.
// 
// Возвращаемое значение:
//   Строка - идентификатор данных хранилища.
//   
Функция Загрузить(ОписаниеДанных) Экспорт
	
	Если ТипЗнч(ОписаниеДанных.Данные) = Тип("ДвоичныеДанные") Тогда
		Идентификатор = ЗагрузитьФайл(ОписаниеДанных.ИмяФайла, ОписаниеДанных.Данные);
	Иначе
		Идентификатор = ЗагрузитьФайл(ОписаниеДанных.ИмяФайла,, ОписаниеДанных.Данные);
	КонецЕсли; 
	
	Возврат Строка(Идентификатор);
	
КонецФункции

// Возвращает идентификатор хранилища в виде строки.
// 
// Возвращаемое значение:
//   - Строка - идентификатор хранилища. 
//
Функция ИдентификаторХранилища() Экспорт
	
	Возврат "files";
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания "УдалениеВременныхФайловОбластейДанных".
//
Процедура УдалениеВременныхФайловОбластейДанных() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
	Метаданные.РегламентныеЗадания.УдалениеВременныхФайловОбластейДанных);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ФайлыОбластейДанных.Идентификатор КАК Идентификатор
	|ИЗ
	|   РегистрСведений.ФайлыОбластейДанных КАК ФайлыОбластейДанных
	|ГДЕ
	|   ФайлыОбластейДанных.Временный
	|   И ФайлыОбластейДанных.ДатаФайла < &ГраницаХранения";
	Запрос.УстановитьПараметр("ГраницаХранения", ТекущаяУниверсальнаяДата() - 86400); // Сутки
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УдалитьФайл(Выборка.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Создает незаполненную структуру нужного формата.
//
// Возвращаемое значение:
// Структура - описание:
//	* Имя - Строка - имя файла (ожидается Строка)
//	* ПолноеИмя - Неопределено - расположение файла (ожидается Строка) 
//	* Размер - Число - размер файла в байтах (ожидается Число)
//	* Данные - Неопределено - данные файла (ожидаются ДвоичныеДанные)
//	* CRC32 - Число - контрольная сумма (ожидаются CRC32 хеш сумма от данных файла)
//	* УстановитьВременныйПриПолучении - Булево - ожидается флаг установки признака временного при получении.
//	* Идентификатор - Неопределено - ожидается установка идентификатора файла.
//
Функция НовыйОписаниеФайла()
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Имя", "");
	ОписаниеФайла.Вставить("ПолноеИмя", Неопределено);
	ОписаниеФайла.Вставить("Размер", 0);
	ОписаниеФайла.Вставить("Данные", Неопределено);
	ОписаниеФайла.Вставить("CRC32", 0);
	ОписаниеФайла.Вставить("УстановитьВременныйПриПолучении", Ложь);
	ОписаниеФайла.Вставить("ИдентификаторФайла");
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Заблокировать запись регистра сведений Файлы.
//
// Параметры:
// КлючРегистра - УникальныйИдентификатор - измерение регистра сведений.
//
Процедура БлокироватьЗаписьОФайлеВРегистре(Знач ИдентификаторФайла)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ФайлыОбластейДанных.ПолноеИмя());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", ИдентификаторФайла);
	Блокировка.Заблокировать();
	
КонецПроцедуры

#КонецОбласти 