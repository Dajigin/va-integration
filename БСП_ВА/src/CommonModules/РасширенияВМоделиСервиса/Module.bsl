///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет, является ли переданное расширение экземпляром поставляемого расширения.
//
//	Параметры:
//		ИдентификаторИспользуемогоРасширения - УникальныйИдентификатор - идентификатор расширения
//
//	Возвращаемое значение:
//		Булево - признак того, что расширение является поставляемым
//
Функция ЭтоПоставляемоеРасширение(ИдентификаторИспользуемогоРасширения) Экспорт
	
	ПоставляемоеРасширение = ПоставляемоеРасширение(ИдентификаторИспользуемогоРасширения);
	Возврат ЗначениеЗаполнено(ПоставляемоеРасширение);
	
КонецФункции

// Возвращает поставляемое расширение, соответствующее используемому расширению.
//
//	Параметры:
//		ИдентификаторИспользуемогоРасширения - УникальныйИдентификатор - идентификатор расширения.
//
//	Возвращаемое значение:
//		СправочникСсылка.ПоставляемыеРасширения - ссылка на поставляемое расширение
//
Функция ПоставляемоеРасширение(ИдентификаторИспользуемогоРасширения) Экспорт
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВызватьИсключение НСтр("ru = 'Использование функции РасширенияВМоделиСервиса.ПоставляемоеРасширение()
                                |доступно только для сеансов с установленным разделением данных'");
		
	КонецЕсли;
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.ПоставляемоеРасширение КАК ПоставляемоеРасширение
	|ИЗ
	|	РегистрСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных КАК Т
	|ГДЕ
	|	Т.ИспользуемоеРасширение = &ИспользуемоеРасширение");
				   
	Запрос.УстановитьПараметр("ИспользуемоеРасширение", ИдентификаторИспользуемогоРасширения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.ПоставляемоеРасширение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает используемое расширение, соответствующее поставляемому расширению.
//
//	Параметры:
//		ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения - поставляемое расширение
//
//	Возвращаемое значение:
//		Структура - данные поставляемого расширения:
//			* Расширение - РасширениеКонфигурации - расширение конфигурации которое соответствует поставляемому
//			* Инсталляция - УникальныйИдентификатор - идентификатор инсталляции 
//
Функция ИспользуемоеРасширение(ПоставляемоеРасширение) Экспорт
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВызватьИсключение НСтр("ru = 'Использование функции РасширенияВМоделиСервиса.ИспользуемоеРасширение()
                                |доступно только для сеансов с установленным разделением данных'");
		
	КонецЕсли;
							
	Результат = Новый Структура("Расширение, Инсталляция");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.ПоставляемоеРасширение.Имя КАК Имя,
	|	Т.ИспользуемоеРасширение КАК ИспользуемоеРасширение,
	|	Т.Инсталляция КАК Инсталляция
	|ИЗ
	|	РегистрСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных КАК Т
	|ГДЕ
	|	Т.ПоставляемоеРасширение = &ПоставляемоеРасширение");
	
	Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НайденныеРасширения = РасширенияКонфигурации.Получить(Новый Структура("УникальныйИдентификатор", Выборка.ИспользуемоеРасширение));
		
		Если НайденныеРасширения.Количество() > 0 Тогда
		
			Результат.Расширение = НайденныеРасширения[0];
			Результат.Инсталляция = Выборка.Инсталляция;
			
		Иначе
			
			НайденныеРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", Выборка.Имя));
			
			Если НайденныеРасширения.Количество() > 0 Тогда
			
				Результат.Расширение = НайденныеРасширения[0];
				Результат.Инсталляция = Выборка.Инсталляция;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает перечень инсталляций поставляемого расширения в области данных.
//
//	Параметры:
//		ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения - поставляемое расширение
//
//	Возвращаемое значение: 
//		ТаблицаЗначений - таблица инсталляций:
//			* ОбластьДанных - Число - номер области данных,
//			* ИспользуемоеРасширение - УникальныйИдентификатор - идентификатор установленного расширения.
//
Функция ПереченьИнсталляций(Знач ПоставляемоеРасширение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
	|	Т.ИспользуемоеРасширение КАК ИспользуемоеРасширение
	|ИЗ
	|	РегистрСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных КАК Т
	|ГДЕ
	|	Т.ПоставляемоеРасширение = &ПоставляемоеРасширение");
	
	Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает очередь инсталляций поставляемого расширения в области данных.
//
//	Параметры:
//		ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения - поставляемое расширение.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица очереди инсталляций:
//			* ОбластьДанных - Число - номер области данных,
//			* ПараметрыУстановки - ХранилищеЗначения - содержащее параметры установки.
//
Функция ОчередьИнсталляций(Знач ПоставляемоеРасширение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
	|	Т.ПараметрыИнсталляции КАК ПараметрыИнсталляции
	|ИЗ
	|	РегистрСведений.ОчередьИнсталляцииПоставляемыхРасширенийВОбластиДанных КАК Т
	|ГДЕ
	|	Т.ПоставляемоеРасширение = &ПоставляемоеРасширение");
	
	Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Выполняет установку поставляемого расширения в текущую область данных после получения поставляемых данных
//	и извещает МС в случае неудачи.
//
//	Параметры:
//		ОписаниеИнсталляции - Структура - описание инсталляции:
//			* Идентификатор - УникальныйИдентификатор - уникальный идентификатор ссылки
//      		элемента справочника ПоставляемыеРасширения,
//			* Представление - Строка - представление инсталляции поставляемого расширения
//			* Инсталляция - УникальныйИдентификатор - уникальный идентификатор инсталляции
//      		поставляемого расширения
//		Ответственный - СправочникСсылка.Пользователи - пользователь ответственный за установку
// 
Процедура УстановитьПоставляемоеРасширениеПриПолучении(Знач ОписаниеИнсталляции, Знач Ответственный) Экспорт
	
	Попытка
		
		УстановитьПоставляемоеРасширениеВОбластьДанных(ОписаниеИнсталляции, Ответственный);
		
	Исключение
		
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(ОписаниеИнсталляции.Идентификатор);
		ОбработатьОшибкуУстановкиРасширенияВОбластьДанных(ПоставляемоеРасширение, ОписаниеИнсталляции.Инсталляция, ТекстИсключения);
			
	КонецПопытки;
	
КонецПроцедуры

// Выполняет установку поставляемого расширения в текущую область данных.
//
//	Параметры:
//		ОписаниеИнсталляции - Структура - описание инсталляции:
//			* Идентификатор - УникальныйИдентификатор - уникальный идентификатор ссылки
//      		элемента справочника ПоставляемыеРасширения,
//			* Представление - Строка - представление инсталляции поставляемого расширения
//			* Инсталляция - УникальныйИдентификатор - уникальный идентификатор инсталляции
//      		поставляемого расширения
//		Ответственный - СправочникСсылка.Пользователи - пользователь ответственный за установку
//
Процедура УстановитьПоставляемоеРасширениеВОбластьДанных(Знач ОписаниеИнсталляции, Знач Ответственный) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(ОписаниеИнсталляции.Идентификатор);
	
	// Если расширение изменяет структуру метаданных, 
	// тогда установка должная происходить вне транзакции и в монопольном режиме
	Если ПоставляемоеРасширение.ИзменяетСтруктуруДанных Тогда
		
		ВыполнитьУстановкуМонопольногоРежима(Ответственный);
		
		НачатьУстановкуПоставляемогоРасширенияВОбластьДанных(ОписаниеИнсталляции, Ответственный, ПоставляемоеРасширение);
		
	Иначе
		
		НачатьТранзакцию();
		
		Попытка
			НачатьУстановкуПоставляемогоРасширенияВОбластьДанных(ОписаниеИнсталляции, Ответственный, ПоставляемоеРасширение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
		
	ОбменСообщениями.ДоставитьСообщения();

КонецПроцедуры

// Выполняет удаление поставляемого расширения из текущей области данных.
//
// Параметры:
//	ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения - ссылка на поставляемое расширение 
//		которое требуется удалить.
//	Ответственный - СправочникСсылка.Пользователи - пользователь от имени которого проиходит удаление
//
Процедура УдалитьПоставляемоеРасширениеИзОбластиДанных(Знач ПоставляемоеРасширение, Знач Ответственный = Неопределено) Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			
			ИспользуемоеРасширение = ИспользуемоеРасширение(ПоставляемоеРасширение);
			Если ИспользуемоеРасширение.Расширение <> Неопределено Тогда
				ИзменяетСтруктуруДанных = ИспользуемоеРасширение.Расширение.ИзменяетСтруктуруДанных();
			Иначе
				ИзменяетСтруктуруДанных = Ложь;
			КонецЕсли;			
			
			Если ИзменяетСтруктуруДанных И НЕ ЭтоРегламентнаяОбработка() Тогда				
				ЗапланироватьУдалениеРасширенияИзОбласти(ПоставляемоеРасширение, Ответственный);	
				Возврат;
			КонецЕсли;
			
			Если ИзменяетСтруктуруДанных И ЗначениеЗаполнено(Ответственный) Тогда
				ВыполнитьУстановкуМонопольногоРежима(Ответственный);
			ИначеЕсли ИзменяетСтруктуруДанных Тогда
				ВызватьИсключение НСтр("ru 'Не возможно удалить расширение изменяющее структуру данных без монопольного режима.'");
			КонецЕсли;
			
			Если ИспользуемоеРасширение.Расширение <> Неопределено Тогда
				ИспользуемоеРасширение.Расширение.Удалить();
			КонецЕсли;
			
			НачатьТранзакцию();
						
			// Отправим в МС сообщение об удалении расширения из области данных.
			Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
				СообщенияКонтрольРасширенийИнтерфейс.СообщениеРасширениеУдалено());
			
			Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
			Сообщение.Body.Extension = ПоставляемоеРасширение.УникальныйИдентификатор();
			
			Если ЗначениеЗаполнено(ИспользуемоеРасширение.Инсталляция) Тогда
				Сообщение.Body.Installation = ИспользуемоеРасширение.Инсталляция;
			КонецЕсли;
			
			СообщенияВМоделиСервиса.ОтправитьСообщение(
				Сообщение,
				РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(),
				Истина);
			
			КаталогРасширений.ИзменитьСостояниеОповещенийРасширений(ПоставляемоеРасширение.УникальныйИдентификатор(), Истина);
			
			// Очистка связи между поставляемым и используемым расширением.
			НаборЗаписей = РегистрыСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПоставляемоеРасширение.Установить(ПоставляемоеРасширение);
			НаборЗаписей.Записать();
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Удаление из области данных'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				ПоставляемоеРасширение,
				Строка(ИспользуемоеРасширение.Инсталляция));
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			НачатьТранзакцию();	

			ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Ошибка удаления из области данных'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ПоставляемоеРасширение,
				Строка(ИспользуемоеРасширение.Инсталляция) + Символы.ПС + Символы.ВК + ТекстИсключения);
			
			// Отправка сообщения в МС об ошибке удаления расширения из области данных
			Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
				СообщенияКонтрольРасширенийИнтерфейс.СообщениеОшибкаУдаленияРасширения());
			
			Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
			Сообщение.Body.Extension = ПоставляемоеРасширение.УникальныйИдентификатор();
			Сообщение.Body.Installation = ИспользуемоеРасширение.Инсталляция;
			Сообщение.Body.ErrorDescription = ТекстИсключения;
			
			СообщенияВМоделиСервиса.ОтправитьСообщение(
				Сообщение,
				РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(),
				Истина);
				
			ЗафиксироватьТранзакцию();
				
		КонецПопытки;
				
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет удаление поставляемого расширения из всех областей данных
//  текущей информационной базы.
//
//	Параметры:
//		ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения - ссылка на поставляемое расширение
//			которое требуется отозвать.
//
Процедура ОтозватьПоставляемоеРасширение(Знач ПоставляемоеРасширение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Инсталляции = ПереченьИнсталляций(ПоставляемоеРасширение);
		
		Для Каждого Инсталляция Из Инсталляции Цикл
			ЗапланироватьУдалениеРасширенияИзОбласти(ПоставляемоеРасширение, Неопределено, Инсталляция.ОбластьДанных); 	
		КонецЦикла;
		
		ОбъектПоставляемоеРасширение = ПоставляемоеРасширение.ПолучитьОбъект();
		ОбъектПоставляемоеРасширение.ОбменДанными.Загрузка = Истина;
		ОбъектПоставляемоеРасширение.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет обработку ошибки установки расширения в область данных.
//
//	Параметры:
//		ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения - ссылка на поставляемое расширение
//		ИдентификаторИнсталляции - УникальныйИдентификатор - идентификатор инсталляции
//		ТекстИсключения - Строка - текст исключения
//
Процедура ОбработатьОшибкуУстановкиРасширенияВОбластьДанных(Знач ПоставляемоеРасширение, Знач ИдентификаторИнсталляции, Знач ТекстИсключения) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Ошибка установки в область данных'",
		ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,
		ПоставляемоеРасширение,
		Строка(ИдентификаторИнсталляции) + Символы.ПС + Символы.ВК + ТекстИсключения);
	
	НачатьТранзакцию();		
	
	Попытка
		
		// Отправка сообщения в МС об ошибке установки расширения в область данных.
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(СообщенияКонтрольРасширенийИнтерфейс.СообщениеОшибкаУстановкиРасширения());
		
		Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
		Сообщение.Body.Extension = ПоставляемоеРасширение.УникальныйИдентификатор();
		Сообщение.Body.Installation = ИдентификаторИнсталляции;
		Сообщение.Body.ErrorDescription = ТекстИсключения;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(),
			Истина);
	
		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОбменСообщениями.ДоставитьСообщения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура НачатьУстановкуПоставляемогоРасширенияВОбластьДанных(Знач ОписаниеИнсталляции, Знач Ответственный, Знач ПоставляемоеРасширение)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Поставляемые расширения.Инициирована установка поставляемого расширения в область данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		Строка(ОписаниеИнсталляции.Идентификатор),
		Строка(ОписаниеИнсталляции.Инсталляция));
		
	Набор = РегистрыСведений.ОчередьИнсталляцииПоставляемыхРасширенийВОбластиДанных.СоздатьНаборЗаписей();
	Набор.Отбор.ПоставляемоеРасширение.Установить(ПоставляемоеРасширение);
	Набор.Записать();
	
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ПоставляемоеРасширение) Тогда	
		// Поставляемое расширение еще не синхронизировалось через поставляемые данные.
		// Оно будет записано в очередь инсталляции и обработано после окончания синхронизации
		// поставляемых данных.
		
		Контекст = Новый Структура(
		"Ответственный, Представление, Инсталляция",
		Ответственный,
		ОписаниеИнсталляции.Представление,
		ОписаниеИнсталляции.Инсталляция);
		
		Менеджер = РегистрыСведений.ОчередьИнсталляцииПоставляемыхРасширенийВОбластиДанных.СоздатьМенеджерЗаписи();
		Менеджер.ПоставляемоеРасширение = ПоставляемоеРасширение;
		Менеджер.ПараметрыИнсталляции = Новый ХранилищеЗначения(Контекст);
		Менеджер.Записать();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Установка в область данных отложена'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			Строка(ОписаниеИнсталляции.Идентификатор),
			Строка(ОписаниеИнсталляции.Инсталляция));
			
		Возврат;
			
	КонецЕсли;
	                                             
	Если ПоставляемоеРасширение.ИзменяетСтруктуруДанных И НЕ ЭтоРегламентнаяОбработка() Тогда		
		ЗапланироватьУстановкуРасширенияВОбласть(ПоставляемоеРасширение, ОписаниеИнсталляции, Ответственный);
		Возврат;	
	КонецЕсли;
	
	// Создание расширения, выступающего в роли используемого расширения
	ИспользуемоеРасширение = ИспользуемоеРасширение(ПоставляемоеРасширение);
	
	Если ИспользуемоеРасширение.Расширение = Неопределено Тогда
		ИспользуемоеРасширение.Расширение = РасширенияКонфигурации.Создать();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ХранилищеРасширения КАК Данные,
	|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	НЕ 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				Справочник.ПоставляемыеРасширения.Разрешения КАК Т
	|			ГДЕ
	|				Т.Ссылка = &ПоставляемоеРасширение) КАК БезопасныйРежим
	|ИЗ
	|	Справочник.ПоставляемыеРасширения КАК Т
	|ГДЕ
	|	Т.Ссылка = &ПоставляемоеРасширение");
	
	Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Константы.ИспользоватьПрофилиБезопасностиДляРасширений.Получить() И НЕ Выборка.БезопасныйРежим Тогда
		
		ИспользуемоеРасширение.Расширение.БезопасныйРежим = Строка(Выборка.ИдентификаторВерсии);
		
	Иначе
		
		ИспользуемоеРасширение.Расширение.БезопасныйРежим = Выборка.БезопасныйРежим;
		
	КонецЕсли;
	
	ИспользуемоеРасширение.Расширение.ЗащитаОтОпасныхДействий = ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений();
	ИспользуемоеРасширение.Расширение.Записать(Выборка.Данные.Получить());
	
	// Установка связи между поставляемым и используемым расширением
	НаборЗаписей = РегистрыСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПоставляемоеРасширение.Установить(ПоставляемоеРасширение);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ПоставляемоеРасширение = ПоставляемоеРасширение;
	Запись.ИспользуемоеРасширение = ИспользуемоеРасширение.Расширение.УникальныйИдентификатор;
	Запись.Инсталляция = ОписаниеИнсталляции.Инсталляция;
	НаборЗаписей.Записать();
	
	КаталогРасширений.ИзменитьСостояниеОповещенийРасширений(ОписаниеИнсталляции.Идентификатор);
	
	// Отправка сообщение в МС об успешной установке расширения в область данных
	Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(СообщенияКонтрольРасширенийИнтерфейс.СообщениеРасширениеУстановлено());
	
	Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	Сообщение.Body.Extension = ПоставляемоеРасширение.УникальныйИдентификатор();
	Сообщение.Body.Installation = ОписаниеИнсталляции.Инсталляция;
	
	РучнаяАктивацияТранзакции = Ложь;
	
	Если НЕ ТранзакцияАктивна() Тогда
		РучнаяАктивацияТранзакции = Истина;
		НачатьТранзакцию();
	КонецЕсли;
	
	СообщенияВМоделиСервиса.ОтправитьСообщение(
		Сообщение,
		РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(),
		Истина);
		
	Если РучнаяАктивацияТранзакции Тогда
		ЗафиксироватьТранзакцию();	
	КонецЕсли;		
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Установка в область данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		ПоставляемоеРасширение,
		Строка(ОписаниеИнсталляции.Инсталляция));
	
КонецПроцедуры

// Процедура вызывается в качестве регламентного задания
// после получения новой версии расширения из каталога расширений менеджера сервиса.
//
// Параметры:
//  Ссылка - УникальныйИдентификатор 
//
Процедура АктуализацияИспользуемогоРасширения(Знач ИдентификаторИспользуемогоРасширения) Экспорт
	
	ПоставляемоеРасширение = ПоставляемоеРасширение(ИдентификаторИспользуемогоРасширения);
	
	Если НЕ ЗначениеЗаполнено(ПоставляемоеРасширение) Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Расширение с идентификатором %1 не является поставляемым!'"),
			Строка(ИдентификаторИспользуемогоРасширения));
		
	КонецЕсли;
	
	
	ИспользуемоеРасширение = ИспользуемоеРасширение(ПоставляемоеРасширение);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ХранилищеРасширения КАК Данные,
	|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	Т.ХранилищеРасширения КАК ХранилищеРасширения,
	|	НЕ 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				Справочник.ПоставляемыеРасширения.Разрешения КАК Т
	|			ГДЕ
	|				Т.Ссылка = &ПоставляемоеРасширение) КАК БезопасныйРежим
	|ИЗ
	|	Справочник.ПоставляемыеРасширения КАК Т
	|ГДЕ
	|	Т.Ссылка = &ПоставляемоеРасширение");
	
	Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Константы.ИспользоватьПрофилиБезопасностиДляРасширений.Получить() И НЕ Выборка.БезопасныйРежим Тогда
		
		ИспользуемоеРасширение.Расширение.БезопасныйРежим = Строка(Выборка.ИдентификаторВерсии);
		
	Иначе
		
		ИспользуемоеРасширение.Расширение.БезопасныйРежим = Выборка.БезопасныйРежим;
		
	КонецЕсли;
	
	Попытка
		
		ИспользуемоеРасширение.Расширение.Записать(Выборка.ХранилищеРасширения.Получить());
		
		Набор = РегистрыСведений.ОчередьОбновляемыхПоставляемыхРасширенийВОбластяхДанных.СоздатьНаборЗаписей();
		Набор.Отбор.ПоставляемоеРасширение.Установить(ПоставляемоеРасширение);
		Набор.Записать();
		
	Исключение
		
		Менеджер = РегистрыСведений.ОчередьОбновляемыхПоставляемыхРасширенийВОбластяхДанных.СоздатьМенеджерЗаписи();
		Менеджер.ПоставляемоеРасширение = ПоставляемоеРасширение;
		Менеджер.Записать();
		
	КонецПопытки;

	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных.ПолноеИмя());
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "РасширенияВМоделиСервиса.ЗаблокироватьРасширенияДляОбновления";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;
	
КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.ПриЗаполненииТаблицыПараметровИБ.
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользованиеКаталогаРасширенийВМоделиСервиса");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьПрофилиБезопасностиДляРасширений");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "НезависимоеИспользованиеРасширенийВМоделиСервиса");
	
КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.ПриУстановкеЗначенийПараметровИБ.
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("РасширенияВМоделиСервиса.АктуализацияИспользуемогоРасширения");
	СоответствиеИменПсевдонимам.Вставить("РасширенияВМоделиСервиса.УстановитьПоставляемоеРасширениеПриПолучении");
	СоответствиеИменПсевдонимам.Вставить("РасширенияВМоделиСервиса.УдалитьПоставляемоеРасширениеИзОбластиДанных");
	
КонецПроцедуры

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ЗаполнитьОбработчикиПринимаемыхСообщений.
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияУправленияРасширениямиИнтерфейс);
	
КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ЗаполнитьОбработчикиОтправляемыхСообщений.
Процедура РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияКонтрольРасширенийИнтерфейс);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ОчередьИнсталляцииПоставляемыхРасширенийВОбластиДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ОчередьРасширенийДляОповещений);	
	Типы.Добавить(Метаданные.РегистрыСведений.ОчередьОбновляемыхПоставляемыхРасширенийВОбластяхДанных);
	
КонецПроцедуры

// Регистрирует обработчики поставляемых данных за день и за все время
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = ИдентификаторВидаПоставляемыхДанных();
	Обработчик.КодОбработчика = ИдентификаторВидаПоставляемыхДанных();
	Обработчик.Обработчик = РасширенияВМоделиСервиса;
	
КонецПроцедуры

Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать, Знач ДескрипторJSON = Ложь) Экспорт
	
	Если Дескриптор.DataType = ИдентификаторВидаПоставляемыхДанных() Тогда
		
		ОписаниеПоставляемогоРасширения = РазобратьДескрипторПоставляемыхДанных(Дескриптор);
		
		Если ДескрипторJSON Тогда
			ТаблицаСовместимостиОбъект = ПрочитатьДанныеJSON(ОписаниеПоставляемогоРасширения.Совместимость);
		Иначе
			ТаблицаСовместимостиОбъект = ПрочитатьДанныеXDTO(ОписаниеПоставляемогоРасширения.Совместимость);
		КонецЕсли;
		
		ТаблицаСовместимости = РасширенияВМоделиСервисаСовместимость.ПрочитатьТаблицуСовместимости(ТаблицаСовместимостиОбъект);
		
		// Расширение совместимо с версией конфигурации.
		Загружать = ПроверитьСовместимостьПоставляемогоРасширения(ТаблицаСовместимости);
		
		Если НЕ Загружать Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Поставляемые расширения.Загрузка поставляемого расширения отменена'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Поставляемое расширение несовместимо с данной конфигурацией'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемогоРасширения.Совместимость);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступныНовыеДанныеJSON(Знач Дескриптор, Загружать) Экспорт
	
	ДоступныНовыеДанные(Дескриптор, Загружать, Истина);
	
КонецПроцедуры

Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу, Знач ДескрипторJSON = Ложь) Экспорт
	
	Если Дескриптор.DataType = ИдентификаторВидаПоставляемыхДанных() Тогда
		
		ОбработатьПоставляемыеРасширения(Дескриптор, ПутьКФайлу, ДескрипторJSON);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьНовыеДанныеJSON(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу, Истина);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
	
КонецПроцедуры

Функция РасширенияТекущийОбластиДанных() Экспорт 
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИспользованиеПоставляемыхРасширенийВОбластяхДанных.ПоставляемоеРасширение КАК ПоставляемоеРасширение,
	               |	ИспользованиеПоставляемыхРасширенийВОбластяхДанных.ИспользуемоеРасширение КАК ИспользуемоеРасширение,
	               |	ИспользованиеПоставляемыхРасширенийВОбластяхДанных.Инсталляция КАК Инсталляция,
	               |	ИспользованиеПоставляемыхРасширенийВОбластяхДанных.ПоставляемоеРасширение.Отключено КАК Отключено,
	               |	ИспользованиеПоставляемыхРасширенийВОбластяхДанных.ПоставляемоеРасширение.ПричинаОтключения КАК ПричинаОтключения,
	               |	ИспользованиеПоставляемыхРасширенийВОбластяхДанных.ПоставляемоеРасширение.Наименование КАК Наименование,
	               |	ИспользованиеПоставляемыхРасширенийВОбластяхДанных.ПоставляемоеРасширение.ИдентификаторВерсии КАК ИдентификаторВерсии
	               |ИЗ
	               |	РегистрСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных КАК ИспользованиеПоставляемыхРасширенийВОбластяхДанных";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СеансыОбласти(Знач БезТекущегоСеанса = Истина) Экспорт 
	
	НомерТекущегоСеанса = ПолучитьТекущийСеансИнформационнойБазы().НомерСеанса;
	
	МассивСеансовОбласти = ПолучитьСеансыИнформационнойБазы();
	МассивСеансовЗавершения = Новый Массив;
	
	Для Каждого Сеанс Из МассивСеансовОбласти Цикл
		
		Если Сеанс.НомерСеанса = НомерТекущегоСеанса И БезТекущегоСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСеансовЗавершения.Добавить(Сеанс.НомерСеанса);
		
	КонецЦикла;	
	
	Возврат МассивСеансовЗавершения;
	
КонецФункции

Функция АктивироватьОтключенныеРасширенияВОбласти(Знач НомерОбласти, ЕстьРасширенияИзменяющиеСтруктуру) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьРасширенияИзменяющиеСтруктуру = Ложь;
	
	ЕстьОшибки = Ложь;
	ОписаниеОшибки = "";
	
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, НомерОбласти);
	
	Попытка
		АктивированныеРасширения = НачатьАктивироватьОтключенныеРасширенияВОбласти(ЕстьРасширенияИзменяющиеСтруктуру);
	Исключение
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
		
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
	
	Если ЕстьОшибки Тогда 
		ВызватьИсключение ОписаниеОшибки;
	Иначе
		Возврат АктивированныеРасширения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НачатьАктивироватьОтключенныеРасширенияВОбласти(ЕстьРасширенияИзменяющиеСтруктуру)
	
	Расширения = РасширенияКонфигурации.Получить();
	
	АктивированныеРасширения = Новый Массив;
	
	Для Каждого Расширение Из Расширения Цикл
		
		Если Расширение.ОбластьДействия = ОбластьДействияРасширенияКонфигурации.РазделениеДанных 
			И Расширение.ИзменяетСтруктуруДанных() Тогда
			ЕстьРасширенияИзменяющиеСтруктуру = Истина;
		Иначе	
			Продолжить;
		КонецЕсли;
			
		Если НЕ Расширение.Активно Тогда
			
			АктивированныеРасширения.Добавить(Расширение.УникальныйИдентификатор);
			
			Расширение.Активно = Истина;
			Расширение.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АктивированныеРасширения;
	
КонецФункции

// Возвращает идентификатор вида поставляемых данных для расширений.
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторВидаПоставляемыхДанных()
	
	Возврат "Расширения"; // Не локализуется
	
КонецФункции

Функция ОписаниеПоставляемогоРасширения()
	
	Возврат Новый Структура("Идентификатор, Версия, Манифест, Совместимость");
	
КонецФункции

Функция РазобратьДескрипторПоставляемыхДанных(Дескриптор)
	
	ОписаниеПоставляемогоРасширения = ОписаниеПоставляемогоРасширения();
	
	Если ТипЗнч(Дескриптор.Properties) = Тип("Массив") Тогда
		Характеристики = Дескриптор.Properties;
	Иначе
		Характеристики = Дескриптор.Properties.Property;
	КонецЕсли;
	
	Для Каждого ХарактеристикаПоставляемыхДанных Из Характеристики Цикл
		
		Если ОписаниеПоставляемогоРасширения.Свойство(ХарактеристикаПоставляемыхДанных.Code) Тогда
			ОписаниеПоставляемогоРасширения[ХарактеристикаПоставляемыхДанных.Code] = ХарактеристикаПоставляемыхДанных.Value;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеПоставляемогоРасширения;
	
КонецФункции

// Контроль совместимости с текущей версией конфигурации информационной базы
Функция ПроверитьСовместимостьПоставляемогоРасширения(Знач ТаблицаСовместимости)
	
	МетаданныеИмя = Метаданные.Имя;
	МетаданныеВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(Метаданные.Версия);
	
	Для каждого ДекларацияСовместимости Из ТаблицаСовместимости Цикл
		
		МинимальнаяВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(ДекларацияСовместимости.MinimumVersionNumber);
		МаксимальнаяВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(ДекларацияСовместимости.MaximumVersionNumber);
	
		// Версия конфигурации расположена между минимальной и максимальной допустимыми.
		Если НРег(МетаданныеИмя) = НРег(ДекларацияСовместимости.ConfigarationName)
			И РасширенияВМоделиСервисаСовместимость.СравнитьВерсии(МинимальнаяВерсия, МетаданныеВерсия) <= 0
			И РасширенияВМоделиСервисаСовместимость.СравнитьВерсии(МетаданныеВерсия, МаксимальнаяВерсия) <= 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьПоставляемыеРасширения(Дескриптор, ПутьКФайлу, ДескрипторJSON)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеПоставляемогоРасширения = РазобратьДескрипторПоставляемыхДанных(Дескриптор);
	
	Если ДескрипторJSON Тогда
		МанифестРасширения = ПрочитатьДанныеJSON(ОписаниеПоставляемогоРасширения.Манифест);
		ТаблицаСовместимостиОбъект = ПрочитатьДанныеJSON(ОписаниеПоставляемогоРасширения.Совместимость);
	Иначе
		МанифестРасширения = ПрочитатьДанныеXDTO(ОписаниеПоставляемогоРасширения.Манифест);
		ТаблицаСовместимостиОбъект = ПрочитатьДанныеXDTO(ОписаниеПоставляемогоРасширения.Совместимость);
	КонецЕсли;
	
	ТаблицаСовместимости = РасширенияВМоделиСервисаСовместимость.ПрочитатьТаблицуСовместимости(ТаблицаСовместимостиОбъект);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Загрузка поставляемого расширения'", 
		ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Инициирована загрузка поставляемого расширения'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемогоРасширения.Манифест);
	
	СсылкаПоставляемогоРасширения = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеПоставляемогоРасширения.Идентификатор));
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаПоставляемогоРасширения) Тогда
		
		ПоставляемоеРасширение = СсылкаПоставляемогоРасширения.ПолучитьОбъект();
		
	Иначе
		
		ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.СоздатьЭлемент();
		ПоставляемоеРасширение.УстановитьСсылкуНового(СсылкаПоставляемогоРасширения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоставляемоеРасширение.ПричинаОтключения) Тогда
		
		Если ПоставляемоеРасширение.ПричинаОтключения = Перечисления.ПричиныОтключенияРасширенийВМоделиСервиса.ОбновлениеВерсииКонфигурации Тогда
			
			ПоставляемоеРасширение.Отключено = Ложь;
			ПоставляемоеРасширение.ПричинаОтключения = Перечисления.ПричиныОтключенияРасширенийВМоделиСервиса.ПустаяСсылка();
			
		КонецЕсли;
		
	Иначе
		
		ПоставляемоеРасширение.Отключено = Ложь;
		
	КонецЕсли;
	
	Если ПоставляемоеРасширение.ИдентификаторВерсии <> ОписаниеПоставляемогоРасширения.Версия Тогда
		
		Если ДескрипторJSON Тогда
			РасширенияВМоделиСервисаМанифест.ПрочитатьМанифестJSON(МанифестРасширения, ПоставляемоеРасширение);
		Иначе
			РасширенияВМоделиСервисаМанифест.ПрочитатьМанифест(МанифестРасширения, ПоставляемоеРасширение);
		КонецЕсли;
		
		ДвоичныеДанныеРасширения = Новый ДвоичныеДанные(ПутьКФайлу);
		ПоставляемоеРасширение.ХранилищеРасширения = Новый ХранилищеЗначения(ДвоичныеДанныеРасширения, Новый СжатиеДанных(9));
		
		ПоставляемоеРасширение.Совместимость.Очистить();
		
		Для Каждого ИнформацияОСовместимости Из ТаблицаСовместимости Цикл
			
			Если НРег(ИнформацияОСовместимости.ConfigarationName) = НРег(Метаданные.Имя) Тогда
				
				НоваяСтрока = ПоставляемоеРасширение.Совместимость.Добавить();
				НоваяСтрока.МинимальнаяВерсия = ИнформацияОСовместимости.MinimumVersionNumber;
				НоваяСтрока.МаксимальнаяВерсия = ИнформацияОСовместимости.MaximumVersionNumber;
					
			КонецЕсли;
			
		КонецЦикла;
		
		ПоставляемоеРасширение.ИдентификаторВерсии = Новый УникальныйИдентификатор(ОписаниеПоставляемогоРасширения.Версия);
		ПоставляемоеРасширение.Записать();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Загрузка поставляемого расширения завершена'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,
			ПоставляемоеРасширение.Ссылка,
			НСтр("ru = 'Завершена загрузка поставляемого расширения'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемогоРасширения.Манифест);
		
		ИспользуемыеРасширения = ПереченьИнсталляций(ПоставляемоеРасширение.Ссылка);
		
		Для Каждого ИнсталляцияРасширения Из ИспользуемыеРасширения Цикл
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ИнсталляцияРасширения.ИспользуемоеРасширение);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "РасширенияВМоделиСервиса.АктуализацияИспользуемогоРасширения");
			ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			ПараметрыЗадания.Вставить("ОбластьДанных", ИнсталляцияРасширения.ОбластьДанных);
			ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
			ПараметрыЗадания.Вставить("ВыполнятьЧерезРегламентноеЗадание", ПоставляемоеРасширение.ИзменяетСтруктуруДанных);
			
			ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Запланирована актуализация используемого расширения'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,
				ПоставляемоеРасширение.Ссылка,
				НСтр("ru = 'Область данных:'") + ИнсталляцияРасширения.ОбластьДанных);
			
		КонецЦикла;
		
		ОчередьИнсталляций = ОчередьИнсталляций(ПоставляемоеРасширение.Ссылка);
		
		Для Каждого ЭлементОчереди Из ОчередьИнсталляций Цикл
			
			Контекст = ЭлементОчереди.ПараметрыИнсталляции.Получить();
			
			ОписаниеИнсталляции = Новый Структура(
				"Идентификатор, Представление, Инсталляция",
				ПоставляемоеРасширение.Ссылка.УникальныйИдентификатор(),
				Контекст.Представление,
				Контекст.Инсталляция);
				
			ЗапланироватьУстановкуРасширенияВОбласть(ПоставляемоеРасширение, ОписаниеИнсталляции, Контекст.Ответственный, ЭлементОчереди.ОбластьДанных); 
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Поставляемые расширения.Запланирована отложенная установка поставляемого расширения в область данных'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,
				ПоставляемоеРасширение.Ссылка,
				НСтр("ru = 'Область данных:'") + ЭлементОчереди.ОбластьДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики обновления информационной базы.

// Блокирует расширения в областях данных для
// получения новых версий из менеджера сервиса.
//
Процедура ЗаблокироватьРасширенияДляОбновления() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК ПоставляемоеРасширение,
		|	Т.МинимальнаяВерсия КАК МинимальнаяВерсия,
		|	Т.МаксимальнаяВерсия КАК МаксимальнаяВерсия
		|ИЗ
		|	Справочник.ПоставляемыеРасширения.Совместимость КАК Т
		|ГДЕ
		|	Т.МинимальнаяВерсия <> """" ИЛИ Т.МаксимальнаяВерсия <> """"");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			МетаданныеВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(Метаданные.Версия);
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				МинимальнаяВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(Выборка.МинимальнаяВерсия);
				МаксимальнаяВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(Выборка.МаксимальнаяВерсия);
				
				// Версия конфигурации расположена между минимальной и максимальной допустимыми.
				Если РасширенияВМоделиСервисаСовместимость.СравнитьВерсии(МинимальнаяВерсия, МетаданныеВерсия) <= 0
					И РасширенияВМоделиСервисаСовместимость.СравнитьВерсии(МетаданныеВерсия, МаксимальнаяВерсия) <= 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ПоставляемоеРасширение = Выборка.ПоставляемоеРасширение.ПолучитьОбъект();
				ПоставляемоеРасширение.Отключено = Истина;
				ПоставляемоеРасширение.ПричинаОтключения = Перечисления.ПричиныОтключенияРасширенийВМоделиСервиса.ОбновлениеВерсииКонфигурации;
				ПоставляемоеРасширение.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьДанныеXDTO(Знач СтрокаXDTO)
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаXDTO);
	Чтение.ПерейтиКСодержимому();	
	
	Возврат ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(Чтение.URIПространстваИмен, Чтение.Имя))
	
КонецФункции

Функция ПрочитатьДанныеJSON(Знач СтрокаJSON)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	Данные = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Процедура ВыполнитьУстановкуМонопольногоРежима(Знач Ответственный)
	
	Если МонопольныйРежим() Тогда 
		Возврат;
	КонецЕсли;
	
	БлокировкаУстановлена = Ложь;
	КоличествоПопытокУстановкиБлокировки = 0;
	МаксимальноеКоличествоПопытокУстановкиБлокировки = 5;
	
	Пока НЕ БлокировкаУстановлена
		ИЛИ КоличествоПопытокУстановкиБлокировки <= МаксимальноеКоличествоПопытокУстановкиБлокировки Цикл
		
		Попытка
			УстановитьМонопольныйРежим(Истина);
			БлокировкаУстановлена = Истина;
			Возврат;
		Исключение
			ВыполнитьЗавершениеСеансовОбласти(Ответственный);	
		КонецПопытки;
		
		КоличествоПопытокУстановкиБлокировки = КоличествоПопытокУстановкиБлокировки + 1;
		
	КонецЦикла;
	
	ВызватьИсключение НСтр("ru = 'Не удалось установить монопольный режим для установки расширения.'");
	
КонецПроцедуры

Процедура ВыполнитьЗавершениеСеансовОбласти(Знач Ответственный)
	
	МассивСеансовЗавершения = СеансыОбласти();
	
	Если МассивСеансовЗавершения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрограммныйИнтерфейсСервиса.ЗавершитьСеансы(МассивСеансовЗавершения, Ответственный);
	
КонецПроцедуры

Процедура ЗапланироватьУдалениеРасширенияИзОбласти(Знач ПоставляемоеРасширение, Знач Ответственный, Знач Область = Неопределено)
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ПоставляемоеРасширение);
	ПараметрыМетода.Добавить(Ответственный);
	
	Если Область = Неопределено Тогда
		Область =  РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();	
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", "РасширенияВМоделиСервиса.УдалитьПоставляемоеРасширениеИзОбластиДанных");
	ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
	ПараметрыЗадания.Вставить("ОбластьДанных", Область);
	ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
	ПараметрыЗадания.Вставить("ВыполнятьЧерезРегламентноеЗадание", Истина);
	
	ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания)
	
КонецПроцедуры

Процедура ЗапланироватьУстановкуРасширенияВОбласть(Знач ПоставляемоеРасширение, Знач ОписаниеИнсталляции, Знач Ответственный, Знач Область = Неопределено)
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ОписаниеИнсталляции);
	ПараметрыМетода.Добавить(Ответственный);
	
	Если Область = Неопределено Тогда
		Область = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();	
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", "РасширенияВМоделиСервиса.УстановитьПоставляемоеРасширениеПриПолучении");
	ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 1);
	ПараметрыЗадания.Вставить("ОбластьДанных", Область);
	ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
	ПараметрыЗадания.Вставить("ВыполнятьЧерезРегламентноеЗадание", ПоставляемоеРасширение.ИзменяетСтруктуруДанных);
	
	ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);	
	
КонецПроцедуры

Функция ЭтоРегламентнаяОбработка()
	
	ФоновоеЗаданиеСеанса = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗаданиеСеанса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ФоновоеЗаданиеСеанса.ИмяМетода = "ОчередьЗаданийСлужебный.РегламентнаяОбработкаОчередиЗаданий" Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

#КонецОбласти
