
#Область ПрограммныйИнтерфейс

// Обработка входящих сообщений с типом {http://www.1c.ru/1cFresh/ConfigurationExtensions/Management/a.b.c.d}Install
//
//	Параметры:
//		ОписаниеИнсталляции - Структура - ключи:
//			* Идентификатор - УникальныйИдентификатор - уникальный идентификатор ссылки
//      		элемента справочника ПоставляемыеРасширения
//			* Представление - Строка - представление инсталляции поставляемого расширения
//      		(будет использоваться в качестве наименования расширения)
//			* Инсталляция - УникальныйИдентификатор - уникальный идентификатор инсталляции
//      		поставляемого расширения
//  	ИдентификаторПользователяСервиса - УникальныйИдентификатор - определяющий пользователя
//    		сервиса, который инициировал инсталляцию поставляемого расширения.
//
Процедура УстановитьРасширение(Знач ОписаниеИнсталляции, Знач ИдентификаторПользователяСервиса) Экспорт
	
	РасширенияВМоделиСервиса.УстановитьПоставляемоеРасширениеВОбластьДанных(
		ОписаниеИнсталляции,
		ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(ИдентификаторПользователяСервиса));
	
КонецПроцедуры

// Обработка входящих сообщений с типом {http://www.1c.ru/1cFresh/ConfigurationExtensions/Management/a.b.c.d}Delete
//
// Параметры:
//	ИдентификаторПоставляемогоРасширения - УникальныйИдентификатор - ссылка на элемент
//		справочника ПоставляемыеРасширения;
//	ИдентификаторПользователяСервиса - УникальныйИдентификатор - определяющий пользователя
//		сервиса, который инициировал инсталляцию поставляемого расширения.
//
Процедура УдалитьРасширение(Знач ИдентификаторПоставляемогоРасширения, Знач ИдентификаторПользователяСервиса = Неопределено) Экспорт
	
	ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(ИдентификаторПоставляемогоРасширения);
	
	Если ИдентификаторПользователяСервиса <> Неопределено Тогда
		ИдентификаторПользователяСервиса = ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(ИдентификаторПользователяСервиса);
	КонецЕсли;
	
	РасширенияВМоделиСервиса.УдалитьПоставляемоеРасширениеИзОбластиДанных(ПоставляемоеРасширение, ИдентификаторПользователяСервиса);
	
КонецПроцедуры

// Обработка входящих сообщений с типом {http://www.1c.ru/1cFresh/ConfigurationExtensions/Management/a.b.c.d}Disable
//
//	Параметры:
//		ИдентификаторРасширения - УникальныйИдентификатор - ссылка на элемент
//			справочника ПоставляемыеРасширения,
//		ПричинаОтключения - ПеречислениеСсылка.ПричиныОтключенияРасширенийВМоделиСервиса - причина отключения
//
Процедура ОтключитьРасширение(Знач ИдентификаторРасширения, Знач ПричинаОтключения = Неопределено) Экспорт
	
	Если ПричинаОтключения = Неопределено Тогда
		
		ПричинаОтключения = Перечисления.ПричиныОтключенияРасширенийВМоделиСервиса.БлокировкаАдминистраторомСервиса;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(ИдентификаторРасширения);
	
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ПоставляемоеРасширение) Тогда
		Возврат;	
	КонецЕсли;
	
	Инсталляции = РасширенияВМоделиСервиса.ПереченьИнсталляций(ПоставляемоеРасширение);
	
	Для Каждого Инсталляция Из Инсталляции Цикл
		
		Если РаботаВМоделиСервиса.ОбластьДанныхЗаблокирована(Инсталляция.ОбластьДанных) Тогда
			Продолжить;		
		КонецЕсли;
		
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, Инсталляция.ОбластьДанных);
		
		ИспользуемоеРасширение = РасширенияВМоделиСервиса.ИспользуемоеРасширение(ПоставляемоеРасширение);
		
		Если ИспользуемоеРасширение.Расширение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуемоеРасширение.Расширение.Активно = Ложь;
		ИспользуемоеРасширение.Расширение.Записать();
		
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		
	КонецЦикла;
	
	Объект = ПоставляемоеРасширение.ПолучитьОбъект();
	Объект.Отключено = Истина;
	Объект.ПричинаОтключения = ПричинаОтключения;
	Объект.Записать();
	
КонецПроцедуры

// Обработка входящих сообщений с типом {http://www.1c.ru/1cFresh/ConfigurationExtensions/Management/a.b.c.d}Enable
//
//	Параметры:
//		ИдентификаторРасширения - УникальныйИдентификатор - ссылка на элемент
//			справочника ПоставляемыеРасширения.
//
Процедура ВключитьРасширение(Знач ИдентификаторРасширения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(ИдентификаторРасширения);
	
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ПоставляемоеРасширение) Тогда
		Возврат;		
	КонецЕсли;
	
	Инсталляции = РасширенияВМоделиСервиса.ПереченьИнсталляций(ПоставляемоеРасширение);
	
	Для Каждого Инсталляция Из Инсталляции Цикл
		
		Если РаботаВМоделиСервиса.ОбластьДанныхЗаблокирована(Инсталляция.ОбластьДанных) Тогда
			Продолжить;		
		КонецЕсли;
		
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, Инсталляция.ОбластьДанных);
		
		ИспользуемоеРасширение = РасширенияВМоделиСервиса.ИспользуемоеРасширение(ПоставляемоеРасширение);
		
		Если ИспользуемоеРасширение.Расширение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуемоеРасширение.Расширение.Активно = Истина;
		ИспользуемоеРасширение.Расширение.Записать();
		
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		
	КонецЦикла;
	
	Объект = ПоставляемоеРасширение.ПолучитьОбъект();	
	Объект.Отключено = Ложь;
	Объект.ПричинаОтключения = Неопределено;	
	Объект.Записать();
	
КонецПроцедуры

// Обработка входящих сообщений с типом {http://www.1c.ru/1cFresh/ConfigurationExtensions/Management/a.b.c.d}Drop
//
//	Параметры:
//		ИдентификаторПоставляемогоРасширения - УникальныйИдентификатор - ссылка на элемент
//			справочника ПоставляемыеРасширения.
//
Процедура ОтозватьРасширение(Знач ИдентификаторПоставляемогоРасширения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(ИдентификаторПоставляемогоРасширения);
	
	Если ОбщегоНазначения.СсылкаСуществует(ПоставляемоеРасширение) Тогда
		
		РасширенияВМоделиСервиса.ОтозватьПоставляемоеРасширение(ПоставляемоеРасширение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Знач ИдентификаторПользователяСервиса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса");
	
	Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ИдентификаторПользователяСервиса);
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Справочник.Пользователи");
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если Результат.Пустой() Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не найден пользователь с идентификатором пользователя сервиса %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ИдентификаторПользователяСервиса);
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

#КонецОбласти