
#Область ПрограммныйИнтерфейс

// Возвращает данные объекта из Менеджера сервиса по правилу трансляции.
//
// Параметры:
//  ИдентификаторПравила - Строка - идентификатор правила трансляции с типом "Чтение". 
//  КлючОбъекта - Строка, Число - ключ объекта, определенный в правиле.
// 
// Возвращаемое значение:
//  Структура - данные объекта или Неопределено, если данные не получены.
//
Функция ПолучитьДанныеОбъектаПоПравилу(ИдентификаторПравила, КлючОбъекта) Экспорт
    
    Перем Данные;
    
    Словарь = УниверсальнаяИнтеграцияСловарь; 
    
    Если Не ЗначениеЗаполнено(ИдентификаторПравила) Тогда
        ВызватьИсключение Словарь.НеЗаполненИдентификаторПравила();
    ИначеЕсли Не ЗначениеЗаполнено(КлючОбъекта) Тогда
        ВызватьИсключение Словарь.НеЗаполненКлючОбъекта();
    КонецЕсли; 
    
    ЧастиАдреса = Новый массив;
    ЧастиАдреса.Добавить(РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса());
    ЧастиАдреса.Добавить(АдресДанныхПоПравилу());
    ЧастиАдреса.Добавить(ИдентификаторПравила);
    ЧастиАдреса.Добавить(Формат(КлючОбъекта, "ЧГ=0"));
    
    Адрес = СтрСоединить(ЧастиАдреса, "/"); 
	ДанныеСервера = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
	Соединение = РаботаВМоделиСервисаБТС.СоединениеСМенеджеромСервиса(ДанныеСервера);
    
    Запрос = Новый HTTPЗапрос(ДанныеСервера.ПутьНаСервере);
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния = 200 Тогда
        ПотокДанных = Ответ.ПолучитьТелоКакПоток();
        Данные = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокДанных);
    КонецЕсли;
    
    Возврат Данные;
    
КонецФункции 

// Отправляет данные в Менеджер сервиса.
//
// Параметры:
//  ИдентификаторПравила - Строка - идентификатор правила трансляции с типом "Загрузка". 
//  Данные - Структура - данные для отправки в менеджер сервиса. 
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  * КодСостояния - Число - код состояния ответа.
//  * ТелоОтвета - Строка - тело ответа в виде строки.
//  * ДанныеОтвета - Структура, Неопределено - если ответ содержит заголовок "Content-Type: application/json" возвращается Структура.
//
Функция ОтправитьДанныеОбъектаПоПравилу(ИдентификаторПравила, Данные = Неопределено) Экспорт
	
    Словарь = УниверсальнаяИнтеграцияСловарь;
    
    УниверсальнаяИнтеграцияПереопределяемый.ОбработатьДанныеПередОтправкой(ИдентификаторПравила, Данные);
    
    Если Не ЗначениеЗаполнено(ИдентификаторПравила) Тогда
        ВызватьИсключение Словарь.НеЗаполненИдентификаторПравила();
    КонецЕсли; 
    
    ЧастиАдреса = Новый массив;
    ЧастиАдреса.Добавить(АдресДанныхПоПравилу());
    ЧастиАдреса.Добавить(ИдентификаторПравила);
    Адрес = СтрСоединить(ЧастиАдреса, "/"); 
    
    Ответ = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, Данные);
    
    Результат = Новый Структура;
    Результат.Вставить("КодСостояния", Ответ.КодСостояния);
    Результат.Вставить("ТелоОтвета", Ответ.ПолучитьТелоКакСтроку());
    Результат.Вставить("ДанныеОтвета", Неопределено);
    Если ЭтоДанныеJSON(Ответ) Тогда
        ПотокОтвета = Ответ.ПолучитьТелоКакПоток();
        ТелоОтвета = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокОтвета);
        Результат.Вставить("ДанныеОтвета", ТелоОтвета);
    КонецЕсли;
    
    Возврат Результат;
	
КонецФункции

// Изменяет объект в Менеджере сервиса по правилу трансляции.
//
// Параметры:
//  ИдентификаторПравила - Строка - идентификатор правила трансляции с типом "Загрузка". 
//  КлючОбъекта - Строка, Число - ключ объекта, определенный в правиле.
//  Данные - Структура - данные для отправки в менеджер сервиса. 
// 
// Возвращаемое значение:
//  Структура - данные ответа:
//  * КодСостояния - Число - код состояния ответа.
//  * ТелоОтвета - Строка, Структура - если ответ содержит заголовок Content-Type: application/json возвращается Структура.
//
Функция ИзменитьДанныеОбъектаПоПравилу(ИдентификаторПравила, КлючОбъекта, Данные = Неопределено) Экспорт
	
    Словарь = УниверсальнаяИнтеграцияСловарь;
    
    УниверсальнаяИнтеграцияПереопределяемый.ОбработатьДанныеПередОтправкой(ИдентификаторПравила, Данные);
    
    Если Не ЗначениеЗаполнено(ИдентификаторПравила) Тогда
        ВызватьИсключение Словарь.НеЗаполненИдентификаторПравила();
    КонецЕсли; 
    
    ЧастиАдреса = Новый массив;
    ЧастиАдреса.Добавить(АдресДанныхПоПравилу());
    ЧастиАдреса.Добавить(ИдентификаторПравила);
    ЧастиАдреса.Добавить(КлючОбъекта);
    Адрес = СтрСоединить(ЧастиАдреса, "/"); 
    
    Ответ = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("PUT", Адрес, Данные);
    
    Результат = Новый Структура;
    Результат.Вставить("КодСостояния", Ответ.КодСостояния);
    Результат.Вставить("ТелоОтвета", Ответ.ПолучитьТелоКакСтроку());
    Результат.Вставить("ДанныеОтвета", Неопределено);
    Если ЭтоДанныеJSON(Ответ) Тогда
        ПотокОтвета = Ответ.ПолучитьТелоКакПоток();
        ТелоОтвета = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокОтвета);
        Результат.Вставить("ДанныеОтвета", ТелоОтвета);
    КонецЕсли;
    
    Возврат Результат;
	
КонецФункции

// Метод позволяет подписаться на оповещения об изменении объектов в менеджере сервиса.
//
// Параметры:
//  ИдентификаторПравила - Строка - идентификатор правила трансляции. 
//  КлючОбъекта - Строка - ключ объекта интеграции на обновления которого подписываемся.
//
Процедура ПодписатьсяНаОповещенияОбИзменении(ИдентификаторПравила, КлючОбъекта) Экспорт
    
    Словарь = УниверсальнаяИнтеграцияСловарь;
    Данные = ДанныеПодпискиНаИзменения(ИдентификаторПравила, КлючОбъекта);    
    Ответ = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", АдресУправленияПодписками(), Данные, Ложь);
    
    Если Ответ.КодСостояния <> 201 Тогда
        ТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
        Если ЭтоДанныеJSON(Ответ) Тогда
            ДанныеОтвета = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(ТекстОшибки);
            Если Не ДанныеОтвета.Свойство("text",ТекстОшибки) Тогда
                ТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
            КонецЕсли;
        КонецЕсли; 
        ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Словарь.ОшибкаПриОтправкеПодпискиНаОповещениеОбИзменении(),
            Ответ.КодСостояния, ИдентификаторПравила, КлючОбъекта, ТекстОшибки);
    КонецЕсли; 
	
КонецПроцедуры

// Метод позволяет отписаться от оповещений об изменении объектов в менеджере сервиса.
//
// Параметры:
//  ИдентификаторПравила - Строка - идентификатор правила трансляции
//  КлючОбъекта - Строка - ключ объекта, по которому отписываемся от оповещений об обновлениях.
//
Процедура ОтписатьсяОтОповещенийНаИзменения(ИдентификаторПравила, КлючОбъекта) Экспорт
	
    Данные = ДанныеПодпискиНаИзменения(ИдентификаторПравила, КлючОбъекта);
    Ответ = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("DELETE", АдресУправленияПодписками(), Данные);
    
    Если Ответ.КодСостояния = 404 Тогда
        ВызватьИсключение НСтр("ru = 'Подписка на уведомления не найдена.'") 
    ИначеЕсли Ответ.КодСостояния <> 204 Тогда
        ВызватьИсключение СтрШаблон("%1 - %2", Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
    КонецЕсли; 
	
КонецПроцедуры

// Функция позволяет прочитать полученные данные объекта по ключу полученных данных.
//
// Параметры:
//  ИдентификаторПравила - Строка - идентификатор правила трансляции.
//  КлючОбъекта - Строка - ключ объекта.
// 
// Возвращаемое значение:
//   Структура - прочитанные полученные данные объекта.
//
Функция ПрочитатьПолученныеДанныеОбъекта(ИдентификаторПравила, КлючОбъекта) Экспорт
    
    КлючПолученныхДанныхОбъекта = КлючПолученныхДанныхОбъекта(ИдентификаторПравила, КлючОбъекта);
    Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КлючПолученныхДанныхОбъекта, "Данные");
	
КонецФункции
 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура позволяет записать или заранее инициализировать полученные данные объекта
// по ключу полученных данных.
//
// Параметры:
//  ИдентификаторПравила - идентификатор правила трансляции
//  КлючОбъекта - ключ объекта.
//  Данные - Структура - сохраняемые полученные данные объекта.
//
Процедура ЗаписатьПолученныеДанныеОбъекта(ИдентификаторПравила, КлючОбъекта, Данные) Экспорт
	
    КлючПолученныхДанныхОбъекта = КлючПолученныхДанныхОбъекта(ИдентификаторПравила, КлючОбъекта);
    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(КлючПолученныхДанныхОбъекта, Данные, "Данные");
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Возвращает ключ полученных данных интегрированного объекта.
//
// Параметры:
//  ИдентификаторПравила - строка - идентификатор правила трансляции. 
//  КлючОбъекта - строка - ключ интегрированного объекта
// 
// Возвращаемое значение:
//   Строка - ключ полученных данных объекта, по которому можно прочитать 
//            или изменить полученные данные интегрированного объекта. 
//
Функция КлючПолученныхДанныхОбъекта(ИдентификаторПравила, КлючОбъекта)
	
    Возврат СтрШаблон("%1/%2", ИдентификаторПравила, КлючОбъекта);	
	
КонецФункции

Функция АдресДанныхПоПравилу()
	
	Возврат "hs/ui_int/data";
	
КонецФункции

Функция АдресУправленияПодписками()
	
	Возврат "hs/ui_int/subscribe";
	
КонецФункции

Функция ЭтоДанныеJSON(Ответ)
    
    Возврат Найти(Ответ.Заголовки.Получить("Content-Type"), "application/json") <> 0;

КонецФункции

Функция ДанныеПодпискиНаИзменения(ИдентификаторПравила, КлючОбъекта)
    
    Словарь = УниверсальнаяИнтеграцияСловарь;
    
    Если Не ЗначениеЗаполнено(ИдентификаторПравила) Тогда
        ВызватьИсключение Словарь.НеЗаполненИдентификаторПравила();
    ИначеЕсли Не ЗначениеЗаполнено(КлючОбъекта) Тогда
        ВызватьИсключение Словарь.НеЗаполненКлючОбъекта();
    КонецЕсли;
    
    Данные = Новый Структура;
    УстановитьПривилегированныйРежим(Истина);
    Данные.Вставить("zone", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
    Данные.Вставить("key", Константы.КлючОбластиДанных.Получить());
    УстановитьПривилегированныйРежим(Ложь);
    Данные.Вставить("rule_id", ИдентификаторПравила);
    Данные.Вставить("object_id", КлючОбъекта);
    
	Возврат Данные;
	
КонецФункции
 
#КонецОбласти 
