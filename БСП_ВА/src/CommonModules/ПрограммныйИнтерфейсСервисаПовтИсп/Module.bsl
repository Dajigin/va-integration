#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс
    
// См. функцию ПрограммныйИнтерфейсСервиса.СвойстваВерсииИнтерфейса
// 
Функция СвойстваВерсииИнтерфейса() Экспорт
    
    Адрес = АдресВерсииВнешнегоПрограммногоИнтерфейса();
    
    Попытка
        Ответ = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес);	
        ПотокДанных = Ответ.ПолучитьТелоКакПоток();
        ДанныеОтвета = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокДанных);
        Переименования = Новый Соответствие;
        Переименования.Вставить("version", "Версия");
        Переименования.Вставить("sm_version", "ВерсияМенеджераСервиса");
        Переименования.Вставить("sm_timezone", "ЧасовойПоясМенеджераСервиса");
        Возврат ПрограммныйИнтерфейсСервиса.ПереименоватьСвойства(ДанныеОтвета, Переименования);
    Исключение
        ДанныеОтвета = Новый Структура;
        ДанныеОтвета.Вставить("Версия", 0);
        ДанныеОтвета.Вставить("ВерсияМенеджераСервиса", "0.0.0.0");
        ДанныеОтвета.Вставить("ЧасовойПоясМенеджераСервиса" "");
        Возврат ДанныеОтвета;
    КонецПопытки;
    
КонецФункции

// См. функцию ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения
// 
Функция АбонентЭтогоПриложения(Знач Пользователь = Неопределено) Экспорт
	
	Метод = "tenant/account";
	
	ДанныеЗапроса = ПрограммныйИнтерфейсСервиса.ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ДанныеЗапроса.Вставить("auth", ПрограммныйИнтерфейсСервиса.ДанныеАвторизации(Неопределено, Пользователь));
    Адрес = ПрограммныйИнтерфейсСервиса.АдресИсполненияВнешнегоПрограммногоИнтерфейса();
    Результат = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
	
    ДанныеОтвета = ПрограммныйИнтерфейсСервиса.РезультатВыполнения(Результат);
    Абонент = ДанныеОтвета.account;
    ПолеРоль = "role";
    Абонент[ПолеРоль] = Перечисления.РолиПользователейАбонентов.ЗначениеПоИмени(Абонент[ПолеРоль]);
    
    Переименования = Новый Соответствие;
    Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("id", "Код");
    Переименования.Вставить(ПолеРоль, "РольПользователя");
    
    Возврат ПрограммныйИнтерфейсСервиса.ПереименоватьСвойства(Абонент, Переименования);
	
КонецФункции

// См. функцию ПрограммныйИнтерфейсСервиса.ОбслуживающиеОрганизацииАбонента
// 
Функция ОбслуживающиеОрганизацииАбонента() Экспорт
	
    Метод = "account/servants/list";
    Абонент = ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения();
    ДанныеЗапроса = ПрограммныйИнтерфейсСервиса.ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    Результат = ПрограммныйИнтерфейсСервиса.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = ПрограммныйИнтерфейсСервиса.РезультатВыполнения(Результат);
    
    Переименования = Новый Соответствие;
    Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("id", "Код");
    Переименования.Вставить("city", "Город");
    Переименования.Вставить("site", "Сайт");
    Переименования.Вставить("email", "Почта");
    Переименования.Вставить("phone", "Телефон");
    Переименования.Вставить("tariff_subscribe_allowed", "РазрешеноПодписыватьНаТарифы");
    Переименования.Вставить("automatic_billing_allowed", "РазрешеноАвтоматическоеВыставлениеСчетов");
    Переименования.Вставить("tariff_override_allowed", "РазрешеноПереопределениеТарифов");
    
    Возврат ПрограммныйИнтерфейсСервиса.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.servants, Переименования);
	
КонецФункции
 
// См. функцию ПрограммныйИнтерфейсСервиса.ТарифСервиса
// 
Функция ТарифСервиса(КодТарифа) Экспорт
	
    Метод = "tariff/info";
    ДанныеЗапроса = ПрограммныйИнтерфейсСервиса.ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", КодТарифа);
    Результат = ПрограммныйИнтерфейсСервиса.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = ПрограммныйИнтерфейсСервиса.РезультатВыполнения(Результат);
	Тариф = ДанныеОтвета.tariff;
    
    ПолеТип = "type";
    ПолеПериод = "period";
    ПолеУслуги = "services";
    ПолеПериоды = "validity_periods";
    Для Каждого Строка Из Тариф[ПолеУслуги] Цикл
        Строка[ПолеТип] = Перечисления.ТипыУслуг.ЗначениеПоИмени(Строка[ПолеТип]);
    КонецЦикла;
    Для Каждого Строка Из Тариф[ПолеПериоды] Цикл
        Строка[ПолеПериод] = Перечисления.ПериодичностьПериодовДействия.ЗначениеПоИмени(Строка[ПолеПериод]);	
    КонецЦикла; 
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("name", "Наименование");
	Переименования.Вставить("description", "ОписаниеДляОбслуживающихОрганизаций");
	Переименования.Вставить("description_for_subscribers", "ОписаниеДляАбонентов");
    Переименования.Вставить("start", "ДатаНачалаДействия");
    Переименования.Вставить("expiration","ДатаОкончанияДействия");
	Переименования.Вставить("prolongation_validity", "ПериодДействияПродлевающейПодписки");
	Переименования.Вставить("extension_validity", "ПериодДействияРасширяющейПодписки");
	Переименования.Вставить("prolongation_during", "ПериодДобавленияПродлевающейПодписки");
	Переименования.Вставить("is_extension", "РасширениеТарифа");
	Переименования.Вставить("is_payable", "Платный");
    Переименования.Вставить("services", "Услуги");
    Переименования.Вставить("extensions", "Расширения");
    Переименования.Вставить("applications", "Конфигурации");
    Переименования.Вставить("validity_periods", "ПериодыДействия");
    
	ПереименованияУслуги = Новый Соответствие; 	
	ПереименованияУслуги.Вставить("id", "Код");
	ПереименованияУслуги.Вставить("name", "Наименование");
	ПереименованияУслуги.Вставить("type", "ТипУслуги");
	ПереименованияУслуги.Вставить("description", "Описание");
	ПереименованияУслуги.Вставить("amount", "КоличествоЛицензий");
	ПереименованияУслуги.Вставить("extend_amount", "КоличествоДопЛицензийРасширяющейПодписки");
	ПереименованияУслуги.Вставить("provider_id", "ИдентификаторПоставщика");
	ПереименованияУслуги.Вставить("provider_name", "НаименованиеПоставщика");
    
    ПереименованияРасширения = Новый Соответствие;
	ПереименованияРасширения.Вставить("id", "Код");
	ПереименованияРасширения.Вставить("name", "Наименование");
    
    ПереименованияКонфигурации = Новый Соответствие;
	ПереименованияКонфигурации.Вставить("id", "Код");
	ПереименованияКонфигурации.Вставить("name", "Наименование");
	ПереименованияКонфигурации.Вставить("description", "Описание");
    
    ПереименованияПериоды = Новый Соответствие;
    ПереименованияПериоды.Вставить("id", "Код");
	ПереименованияПериоды.Вставить("period", "Периодичность");
	ПереименованияПериоды.Вставить("quantity", "Количество");
    ПереименованияПериоды.Вставить("name", "Наименование");
	ПереименованияПериоды.Вставить("cost", "Сумма");
	ПереименованияПериоды.Вставить("comment", "Комментарий");
	
    ПрограммныйИнтерфейсСервиса.ПереименоватьСвойства(Тариф, Переименования);
    
    // Обработаем описание для абонентов
    СтруктураВложений = Новый Структура;
    Для Каждого Вложение Из Тариф.ОписаниеДляАбонентов.images Цикл
        ДанныеКартинки = ПолучитьДвоичныеДанныеИзBase64Строки(Вложение.data);
        СтруктураВложений.Вставить(Вложение.name, Новый Картинка(ДанныеКартинки, Истина));
    КонецЦикла;
    ОписаниеДляАбонентов = Новый ФорматированныйДокумент;
    ОписаниеДляАбонентов.УстановитьHTML(Тариф.ОписаниеДляАбонентов.html, СтруктураВложений);
	Тариф.ОписаниеДляАбонентов = ОписаниеДляАбонентов;
    
    Тариф.Услуги = ПрограммныйИнтерфейсСервиса.МассивСтруктурВТаблицуЗначений(Тариф.Услуги, ПереименованияУслуги);
    Тариф.Расширения = ПрограммныйИнтерфейсСервиса.МассивСтруктурВТаблицуЗначений(Тариф.Расширения, ПереименованияРасширения);
    Тариф.Конфигурации = ПрограммныйИнтерфейсСервиса.МассивСтруктурВТаблицуЗначений(Тариф.Конфигурации, ПереименованияКонфигурации);
    Тариф.ПериодыДействия = ПрограммныйИнтерфейсСервиса.МассивСтруктурВТаблицуЗначений(Тариф.ПериодыДействия, ПереименованияПериоды);
    
    Возврат Тариф;
	
КонецФункции

// См. функцию ПрограммныйИнтерфейсСервиса.ТарифОбслуживающейОрганизаций
// 
Функция ТарифОбслуживающейОрганизации(КодОО, КодТарифа) Экспорт
	
    Метод = "account/servant_tariffs/info";	
    ДанныеЗапроса = ПрограммныйИнтерфейсСервиса.ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("servant", КодОО);
    ДанныеЗапроса.Вставить("id", КодТарифа);
    Результат = ПрограммныйИнтерфейсСервиса.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = ПрограммныйИнтерфейсСервиса.РезультатВыполнения(Результат);
	Тариф = ДанныеОтвета.servant_tariff;
    
    ПолеПериод = "period";
    ПолеПериоды = "validity_periods";
    Для Каждого Строка Из Тариф[ПолеПериоды] Цикл
        Строка[ПолеПериод] = Перечисления.ПериодичностьПериодовДействия.ЗначениеПоИмени(Строка[ПолеПериод]);	
    КонецЦикла; 
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("tariff_id", "КодБазовогоТарифа");
	Переименования.Вставить("description_for_subscribers", "ОписаниеДляАбонентов");
    Переименования.Вставить("validity_periods", "ПериодыДействия");
    
    ПереименованияПериоды = Новый Соответствие;
    ПереименованияПериоды.Вставить("id", "Код");
	ПереименованияПериоды.Вставить("period", "Периодичность");
	ПереименованияПериоды.Вставить("quantity", "Количество");
    ПереименованияПериоды.Вставить("name", "Наименование");
	ПереименованияПериоды.Вставить("cost", "Сумма");
	ПереименованияПериоды.Вставить("comment", "Комментарий");
    ПрограммныйИнтерфейсСервиса.ПереименоватьСвойства(Тариф, Переименования);
    
    СтруктураВложений = Новый Структура;
    Для Каждого Вложение Из Тариф.ОписаниеДляАбонентов.images Цикл
        ДанныеКартинки = ПолучитьДвоичныеДанныеИзBase64Строки(Вложение.data);
        СтруктураВложений.Вставить(Вложение.name, Новый Картинка(ДанныеКартинки, Истина));
    КонецЦикла;
    ОписаниеДляАбонентов = Новый ФорматированныйДокумент;
    ОписаниеДляАбонентов.УстановитьHTML(Тариф.ОписаниеДляАбонентов.html, СтруктураВложений);
	Тариф.ОписаниеДляАбонентов = ОписаниеДляАбонентов;
    
    Тариф.ПериодыДействия = ПрограммныйИнтерфейсСервиса.МассивСтруктурВТаблицуЗначений(Тариф.ПериодыДействия, ПереименованияПериоды);
    
    Возврат Тариф;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция АдресВерсииВнешнегоПрограммногоИнтерфейса()
	
	Возврат "hs/ext_api/version";
	
КонецФункции
    
#КонецОбласти 

#КонецЕсли