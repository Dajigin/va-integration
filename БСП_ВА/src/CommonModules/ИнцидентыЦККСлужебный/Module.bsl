////////////////////////////////////////////////////////////////////////////////
// Подсистема "ЦентрКонтроляКачества".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ().
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресЦКК");
	
	// Это не константы. Значения хранятся в защищенном хранилище БСП
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ЛогинЦКК";
	СтрокаПараметра.Описание = "ЛогинЦКК";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ПарольЦКК";
	СтрокаПараметра.Описание = "ПарольЦКК";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
КонецПроцедуры

// Вызывается перед попыткой записи значений параметров ИБ в одноименные
// константы.
//
// Параметры:
// ЗначенияПараметров - Структура - значения параметров которые требуется установить.
// В случае если значение параметра устанавливается в данной процедуре из структуры
// необходимо удалить соответствующую пару КлючИЗначение.
//
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
	// Для интеграции с ЦКК
	Владелец = ИнтеграцияПодсистемБТС.ИдентификаторОбъектаМетаданных("Константа.АдресЦКК");
	
	Если ЗначенияПараметров.Свойство("ЛогинЦКК") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияПодсистемБТС.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ЗначенияПараметров.ЛогинЦКК, "Логин");
		УстановитьПривилегированныйРежим(Ложь);
		ЗначенияПараметров.Удалить("ЛогинЦКК");
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство("ПарольЦКК") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияПодсистемБТС.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ЗначенияПараметров.ПарольЦКК, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		ЗначенияПараметров.Удалить("ПарольЦКК");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ТипыИнцидентовЦККАктуальны.Установить(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив Из Строка - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1");
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт

	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.0.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ДанныеЦКК", МассивВерсий);
	
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик                  = Обработчики.Добавить();
	Обработчик.Версия           = "*";
	Обработчик.МонопольныйРежим = Ложь;
	Обработчик.ОбщиеДанные      = Истина;
	Обработчик.РежимВыполнения	= "Оперативно";
	Обработчик.Процедура        = "ИнцидентыЦККСлужебный.ПередатьТипыИнцидентовВЦКК";
	
КонецПроцедуры

Процедура ПередатьТипыИнцидентовВЦКК(ПараметрыОбработчика = Неопределено) Экспорт
	
	// Устанавливаем константу в Ложь, при первом открытии инцидента сначала будут переданы типы инцидентов в ЦКК.
	УстановитьПривилегированныйРежим(Истина);
	Константы.ТипыИнцидентовЦККАктуальны.Установить(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// См. событие СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриОпределенииИсключенийНеразделенныхДанных в РаботаВМоделиСервиса.
Процедура ПриОпределенииИсключенийНеразделенныхДанных(Исключения) Экспорт
	Исключения.Добавить(Метаданные.РегистрыСведений.ОграничениеСкоростиОтсылкиИнцидентов);
	Исключения.Добавить(Метаданные.РегистрыСведений.ИнцидентыОткрытые);
	Исключения.Добавить(Метаданные.РегистрыСведений.ИнцидентыОтложенныеПроверки);
	Исключения.Добавить(Метаданные.Константы.ТипыИнцидентовЦККАктуальны);
КонецПроцедуры

// См. событие ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки в ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	Типы.Добавить(Метаданные.РегистрыСведений.ОграничениеСкоростиОтсылкиИнцидентов);
	Типы.Добавить(Метаданные.РегистрыСведений.ИнцидентыОткрытые);
	Типы.Добавить(Метаданные.РегистрыСведений.ИнцидентыОтложенныеПроверки);
	Типы.Добавить(Метаданные.Константы.ТипыИнцидентовЦККАктуальны);
КонецПроцедуры

// Процедура заполняет список типов инцидентов СписокТипов
Процедура СписокТиповИнцидентовСлужебный(СписокТипов) Экспорт
	
	Описание = ИнцидентыЦККСервер.СоздатьОписаниеТипаИнцидента(ТарификацияСлужебный.ТипИнцидента_НеНайденаУслугаПоИдентификаторуУслугиИИдентификаторуПоставщика());
	Описание.УровеньИнцидента = "Предупреждение";
	Описание.Подсистема = "Тарификация";
	Описание.КонтекстИнформационнойБазы = Истина;
	Описание.ПроцедураПроверки = "";
	Описание.Теги.ПрикладнаяОшибка = Истина;
	ИнцидентыЦККСервер.СоздатьЗаписьТипа(СписокТипов, Описание);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.МониторингЦКК;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

#КонецОбласти
