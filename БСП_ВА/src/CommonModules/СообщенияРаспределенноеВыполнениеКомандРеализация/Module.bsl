////////////////////////////////////////////////////////////////////////////////
// РаспределенноеВыполнениеКомандРеализация: реализация части программного 
// интерфейса подсистемы РаспределенноеВыполнениеКоманд, которая используется 
// в обмене сообщениями.
////////////////////////////////////////////////////////////////////////////////

// Экспортные процедуры и функции для вызова из других модулей подсистемы.
// Важно! Служебный программный интерфейс может существенно изменяться со временем.
// 
#Область СлужебныйПрограммныйИнтерфейс

// Разбирает параметры запроса на передачу файла и передает файл прикладному коду.
//
// Параметры:
//	Сообщение - ОбъектXDTO - Входящий пакет.
//
// Возвращаемое значение:
//   Булево   - результат операции (Истина = сообщение отработано)
//
Функция ОтработатьПолучениеФайла(Сообщение) Экспорт

	ТелоСообщения = Сообщение.Body;
	
	ИдентификаторВызова = ТелоСообщения.Call_ID;
	КодОтправителя = ТелоСообщения.Sender;
	КодПолучателя = ТелоСообщения.Recipient;
	ИдентификаторФайла = ТелоСообщения.File_ID;
	ИмяФайла = РаботаВМоделиСервиса.ПолучитьФайлИзХранилищаМенеджераСервиса(ИдентификаторФайла);
	
	ПараметрыВызова = Новый Структура();
	ПараметрыВызова.Вставить("Код", ТелоСообщения.CallCode);
	ПараметрыВызова.Вставить("Тело", ТелоСообщения.CallBody);
	
	Ответ = РаспределенноеВыполнениеКомандПереопределяемый.ОбработатьЗапросНаПередачуФайла(ИмяФайла, 
												ИдентификаторВызова, КодОтправителя, ПараметрыВызова);
												
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	 											
	Событие = РаспределенноеВыполнениеКоманд.ИмяСобытияЖурналаРегистрации() + ".";
	Событие = Событие + НСтр("ru = 'Запрос на передачу файла'", КодЯзыка); 
	
	Комментарий = НСтр("ru = 'Обработан поступивший запрос на передачу файла. Параметры запроса:
	|Call_ID: %1
	|File_ID: %2
	|Sender: %3
	|Recipient: %4
	|
	|Файл сохранен под следующим именем:
	|%5
	|
	|Ответ прикладного обработчика: %6'", КодЯзыка); 
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ИдентификаторВызова,
												ИдентификаторФайла, КодОтправителя, КодПолучателя, ИмяФайла, Ответ);
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Информация,,, Комментарий);
	
	Возврат Ответ;										

КонецФункции // ОтработатьПолучениеФайла() 

// Разбирает параметры ответа на передачу файла и передает ответ прикладному коду.
//
// Параметры:
//	Сообщение - ОбъектXDTO - Входящий пакет.
//
// Возвращаемое значение:
//   Булево   - результат операции (Истина = сообщение отработано)
//
Функция ОтработатьКвитанциюПередачиФайла(Сообщение) Экспорт

	ТелоСообщения = Сообщение.Body;
	
	ИдентификаторВызова = ТелоСообщения.Call_ID;
	КодОтправителя = ТелоСообщения.Sender;
	КодПолучателя = ТелоСообщения.Recipient;

	ПараметрыВызова = Новый Структура();
	ПараметрыВызова.Вставить("Код", ТелоСообщения.CallCode);
	ПараметрыВызова.Вставить("Тело", ТелоСообщения.CallBody);
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();	 											
	Событие = РаспределенноеВыполнениеКоманд.ИмяСобытияЖурналаРегистрации() + ".";
	
	Если ТелоСообщения.Error Тогда
		
		Ответ = РаспределенноеВыполнениеКомандПереопределяемый.ОбработатьОшибкуПередачиФайла(ИдентификаторВызова, 
																				КодОтправителя, ТелоСообщения.CallBody);
 		Событие = Событие + НСтр("ru = 'Ошибка передачи файла'", КодЯзыка); 
		Уровень = УровеньЖурналаРегистрации.Ошибка;
		
		Комментарий = НСтр("ru = 'При передаче файла возникла ошибка. Параметры запроса:
		|Call_ID: %1
		|Sender: %2
		|Recipient: %3
		|CallCode: %4
		|
		|Ответ МС: 
		|%5
		|
		|Ответ прикладного обработчика: %6'", КодЯзыка); 
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ИдентификаторВызова,
									КодОтправителя, КодПолучателя, ТелоСообщения.CallCode, ТелоСообщения.CallBody, Ответ);
				
	Иначе
		
		Ответ = РаспределенноеВыполнениеКомандПереопределяемый.ОбработатьОтветНаПередачуФайла(ИдентификаторВызова, 
																					КодОтправителя, ПараметрыВызова);
		Событие = Событие + НСтр("ru = 'Квитанция о передаче файла'", КодЯзыка); 
		Уровень = УровеньЖурналаРегистрации.Информация;
		
		Комментарий = НСтр("ru = 'Обработана поступившая квитанция на передачу файла. Параметры запроса:
		|Call_ID: %1
		|Sender: %2
		|Recipient: %3
		|CallCode: %4
		|
		|Ответ прикладного обработчика: %5'", КодЯзыка); 
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ИдентификаторВызова,
													КодОтправителя, КодПолучателя, ТелоСообщения.CallCode, Ответ);
		
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации(Событие, Уровень,,, Комментарий);
	
	Возврат Ответ;																				
	
КонецФункции // ОтработатьКвитанциюПередачиФайла() 

// Разбирает параметры прямого вызова и запускает выполнение команды в фоновом задании.
// Важно! Фоновое задание выполняется через механизм очереди.
//
// Параметры:
//	Сообщение - ОбъектXDTO - Входящий пакет.
//
// Возвращаемое значение:
//   Булево   - результат операции (Истина = сообщение отработано)
//
Функция ОтработатьПрямойВызов(Сообщение) Экспорт

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ТелоСообщения = Сообщение.Body;
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(ТелоСообщения.Processor_ID);
	ПараметрыЗапуска.Добавить(ТелоСообщения.Function);
	ПараметрыЗапуска.Добавить(ТелоСообщения.Call_ID);
	ПараметрыЗапуска.Добавить(Истина);
	
	ПараметрыЗадания = Новый Структура; // см. ОчередьЗаданий.ДобавитьЗадание.ПараметрыЗадания
	ПараметрыЗадания.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
	ПараметрыЗадания.Вставить("ИмяМетода", "РаспределенноеВыполнениеКоманд.ВыполнитьКомандуДополнительнойОбработки");
	ПараметрыЗадания.Вставить(ОчередьЗаданий.ПолеПараметрыМетода(), ПараметрыЗапуска);
	ПараметрыЗадания.Вставить("Ключ", Строка(ТелоСообщения.Call_ID));
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 60);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
	
	Событие = РаспределенноеВыполнениеКоманд.ИмяСобытияЖурналаРегистрации() + ".";
	Событие = Событие + НСтр("ru = 'Задание поставлено в очередь'", КодЯзыка); 
	Комментарий = НСтр("ru = 'В очередь поставлено выполнение команды %1 (обработка %2, вызов %3).'"); 
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ТелоСообщения.Processor_ID, 
																	ТелоСообщения.Function, ТелоСообщения.Call_ID);
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Информация,,, Комментарий);
	
	ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
	
	Возврат Истина;
	
КонецФункции // ОтработатьПрямойВызов() 

#КонецОбласти  
