////////////////////////////////////////////////////////////////////////////////
// ПрограммныйИнтерфейсСервиса: выполнение штатных функций МС прикладным кодом
// через внешний API 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает свойства версии программного интерфейса менеджера сервиса.
// 
// Возвращаемое значение:
//  Структура - свойства версии внешнего программного интерфейса:
//   * Версия - Число - номер версии внешнего программного интерфейса.
//   * ВерсияМенеджераСервиса - Строка - номер версии менеджера сервиса.
//   * ЧасовойПоясМенеджераСервиса - Строка - часовой пояс менеджера сервиса.
//
Функция СвойстваВерсииИнтерфейса() Экспорт
	
	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.СвойстваВерсииИнтерфейса();
	
КонецФункции

#Область Account

// Возвращает список тарифов обслуживающей организации.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * КодБазовогоТарифа - Строка - код базового тарифа
//
Функция ТарифыОбслуживающейОрганизации(КодОО) Экспорт
	
    Метод = "account/servant_tariffs/list";	
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("servant", КодОО);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("tariff_id", "КодБазовогоТарифа");
    
    Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.servant_tariff, Переименования);
    
КонецФункции
 
// Возвращает HTML-страницу выбора тарифа обслуживающей организации абонента этого приложения.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Строка - HTML-страница выбора тарифа обслуживающей организации.
//
Функция СтраницаВыбораТарифаОбслуживающейОрганизации(КодОО, 
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
    
    Метод = "account/servants/tariff_selection_page";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("servant", КодОО);
    
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если ДанныеОтвета <> Неопределено Тогда
        Возврат ДанныеОтвета.html;
    Иначе 
        Возврат Неопределено;
    КонецЕсли; 
    
КонецФункции

// Возвращает список обслуживающих организаций абонента этого приложения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - обслуживающие организации абонента:
//   * Код - Число - код (номер) обслуживающей организации
//   * Наименование - Строка - наименование обслуживающей организации
//   * Город - Строка - город
//   * Сайт - Строка - сайт
//   * Почта - Строка - электронная почта
//   * Телефон - Строка - телефон
//   * РазрешеноПодписыватьНаТарифы - Булево - разрешено подписывать на тарифы
//   * РазрешеноАвтоматическоеВыставлениеСчетов - Булево - разрешено автоматическое выставление счетов
//   * РазрешеноПереопределениеТарифов - Булево - разрешено переопределение тарифов
//
Функция ОбслуживающиеОрганизацииАбонента() Экспорт
    
	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.ОбслуживающиеОрганизацииАбонента();
	
КонецФункции 

// Возвращает список пользователей абонента этого приложения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пользователи абонента:
//   * Логин - Строка - логин (имя) пользователя
//   * ПолноеИмя - Строка - полное имя пользователя
//   * Почта - Строка - электронная почта пользователя
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль пользователя
//   * РазрешенноеКоличествоСеансов - Число - разрешенное количество сеансов
//   * ВременныйДоступ - Булево - временный доступ
//
Функция ПользователиАбонента() Экспорт
	
    Метод = "account/users/list";
    Абонент = АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "role";
    Для Каждого Строка Из ДанныеОтвета.user  Цикл
        Строка[Поле] = Перечисления.РолиПользователейАбонентов.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
    
    Переименования = ПереименованияПолей(Метод);
    
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.user, Переименования);
	
КонецФункции  

// Возвращает свойства пользователя абонента по логину.
//
// Параметры:
//  Логин - Строка - Логин (Имя) пользователя.
// 
// Возвращаемое значение:
//  Структура - свойства пользователя абонента:
//   * Логин - Строка - логин (имя) пользователя
//   * ПолноеИмя - Строка - полное имя пользователя
//   * Почта - Строка - электронная почта пользователя
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роли пользователя
//   * РазрешенноеКоличествоСеансов - Число - разрешенное количество сеансов
//   * ВременныйДоступ - Булево - временный доступ
//
Функция СвойстваПользователяАбонента(Логин) Экспорт
	
    Метод = "account/users/info";
    Абонент = АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    ДанныеЗапроса.Вставить("login", Логин);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "role";
    ДанныеОтвета.user[Поле] = Перечисления.РолиПользователейАбонентов.ЗначениеПоИмени(ДанныеОтвета.user[Поле]);
    
    Переименования = ПереименованияПолей(Метод);
    
	Возврат ПереименоватьСвойства(ДанныеОтвета.user, Переименования);
	
КонецФункции

// Создает новую учетную запись пользователя сервиса и подключает созданного пользователя к абоненту этого приложения. 
//
// Параметры:
//  ПараметрыСоздания - Структура - см. метод ПрограммныйИнтерфейсСервиса.НовыйПараметрыСозданияПользователя
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - признак создания учетной записи Истина - создана, Ложь - произошла ошибка.
//
Функция СоздатьПользователяАбонента(ПараметрыСоздания,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
    
    Метод = "account/users/create";
    Абонент = АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    ДанныеЗапроса.Вставить("role", Перечисления.РолиПользователейАбонентов.ИмяПоЗначению(ПараметрыСоздания.РольПользователя));
    ДанныеЗапроса.Вставить("login", ПараметрыСоздания.Логин);
    ДанныеЗапроса.Вставить("password", ПараметрыСоздания.Пароль);
    ДанныеЗапроса.Вставить("email", ПараметрыСоздания.Почта);
    ДанныеЗапроса.Вставить("email_required ", ПараметрыСоздания.ПочтаОбязательна);
    ДанныеЗапроса.Вставить("name", ПараметрыСоздания.ПолноеИмя);
    ДанныеЗапроса.Вставить("phone", ПараметрыСоздания.Телефон);
    ДанныеЗапроса.Вставить("timezone", ПараметрыСоздания.ЧасовойПояс);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции

// Устанавливает указанному пользователю абонента этого приложения указанную роль.
//
// Параметры:
//  Логин - Строка - логин (имя) пользователя. 
//  Роль - Перечисления.РолиПользователейАбонентов - устанавливаемая роль пользователя.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - установки роли Истина - установлено, Ложь - произошла ошибка.
//
Функция УстановитьРольПользователяАбонента(Логин, Роль,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "account/users/set_role";
    Абонент = АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    ДанныеЗапроса.Вставить("login", Логин);
    ДанныеЗапроса.Вставить("role", Перечисления.РолиПользователейАбонентов.ИмяПоЗначению(Роль));
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции

// Возвращает список абонентов текущего пользователя.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список абонентов:
//    * Наименование - Строка - наименование абонента
//    * Код - Число - код абонента
//    * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль текущего пользователя абонента.
//
Функция Абоненты() Экспорт
	
	Метод = "account/list";
	ДанныеЗапроса = ШаблонЗапроса(Метод);
	Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
	ДанныеОтвета = РезультатВыполнения(Результат);
	
    Поле = "role";
    Для Каждого Строка Из ДанныеОтвета.account  Цикл
        Строка[Поле] = Перечисления.РолиПользователейАбонентов.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
	
	Переименования = Новый Соответствие;
    Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("id", "Код");
    Переименования.Вставить("role", "РольПользователя");
	
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.account, Переименования);
	
КонецФункции

// Возвращает дополнительные сведения (реквизиты и свойства) абонента этого приложения.
// Реализует метод внешнего программного интерфейса - account/attached_info.
// 
// Параметры:
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Структура - дополнительные реквизиты и свойства абонента:
//   * Реквизиты - ТаблицаЗначений - дополнительные реквизиты абонента:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//   * Свойства - ТаблицаЗначений - дополнительные свойства абонента:
//     ** Ключ - Строка - имя дополнительного свойства
//     ** Тип - Строка - тип значения
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного свойства
//
Функция ДополнительныеСведенияАбонента(ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "account/attached_info";
	
    Абонент = АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("key", "Ключ");
	Переименования.Вставить("type", "Тип");
	Переименования.Вставить("value", "Значение");
	
	Если ДанныеОтвета <> Неопределено Тогда
		Свойства = МассивСтруктурВТаблицуЗначений(ДанныеОтвета.properties, Переименования);
		Реквизиты = МассивСтруктурВТаблицуЗначений(ДанныеОтвета.fields, Переименования);
	Иначе
		Свойства = Новый ТаблицаЗначений();
		Реквизиты = Новый ТаблицаЗначений();
	КонецЕсли;
	
	Возврат Новый Структура("Свойства, Реквизиты", Свойства, Реквизиты);
	
КонецФункции

// Возвращает информацию о тарифе обслуживающей организаций.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  КодТарифа - Строка - код тарифа обслуживающей организации. 
// 
// Возвращаемое значение:
//  Структура - информация о тарифе:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * КодБазовогоТарифа - Строка - код базового тарифа
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ПериодыДействия - ТаблицаЗначений - периоды действия тарифа:
//     ** Код - Строка - код периода действия
//     ** Наименование - Строка - наименование периода действия
//     ** Сумма - Число - стоимость
//     ** Комментарий - Строка - комментарий к периоду действия
//
Функция ТарифОбслуживающейОрганизации(КодОО, КодТарифа) Экспорт
	
	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.ТарифОбслуживающейОрганизации(КодОО, КодТарифа);
	
КонецФункции
    
#КонецОбласти 

#Область Application
    
// Возвращает список прикладных конфигураций, доступных абоненту этого приложения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - доступные конфигурации:
//    * Код - Строка - код конфигурации
//    * Наименование - Строка - синоним конфигурации 
//    * Имя - Строка - имя конфигурации (как оно задано в конфигураторе).
//    * Описание - Строка - описание конфигурации 
//    * КодАбонента - Число - код абонента. 
//
Функция Конфигурации() Экспорт
	
    Метод = "application/list";
    Абонент = АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("account", Абонент.Код);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
    Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
    Переименования.Вставить("sysname", ОписаниеКолонки("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(255)));
    Переименования.Вставить("description", ОписаниеКолонки("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(0)));
	Переименования.Вставить("account", ОписаниеКолонки("КодАбонента", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
    
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.application, Переименования);
	
КонецФункции

#КонецОбласти 

#Область Tenant

// Возвращает данные абонента этого приложения.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - пользователь абонента которого требуется определить	
// 
// Возвращаемое значение:
//  Структура - данные абонента:
//    * Наименование - Строка - наименование абонента
//    * Код - Число - код абонента
//    * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль текущего пользователя абонента.
//
Функция АбонентЭтогоПриложения(Знач Пользователь = Неопределено) Экспорт
	
	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения(Пользователь);
    
КонецФункции

// Возвращает список приложений, доступных пользователю абонента этого приложения. 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - доступные приложения:
//   * Код - Число - код (номер) приложения
//   * Наименование - Строка - наименование
//   * КодАбонентаВладельца - Число - код абонента, владельца приложения
//   * КодКонфигурации - Число - код конфигурации
//   * ВерсияКонфигурации - Строка - версия конфигурации
//   * НаименованиеКонфигурации - Строка - наименование конфигурации
//   * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения
//   * АдресПриложения - Строка - URL-адрес приложения
//   * ЧасовойПояс - Строка - часовой пояс приложения
//
Функция Приложения() Экспорт
    
    Метод = "tenant/list";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "status";
    Для Каждого Строка Из ДанныеОтвета.tenant  Цикл
        Строка[Поле] = Перечисления.СостоянияПриложений.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
	Переименования = ПереименованияПолей(Метод);
    
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.tenant, Переименования);
	
КонецФункции

// Возвращает информацию об указанном приложении.
//
// Параметры:
//  КодПриложения - Строка - код приложения (номер области).
// 
// Возвращаемое значение:
//  Структура - свойства приложения:
//   * Код - Число - код (номер) приложения
//   * Наименование - Строка- наименование
//   * КодАбонентаВладельца - Число - код абонента, владельца приложения
//   * КодКонфигурации - Число - код конфигурации
//   * ВерсияКонфигурации - Строка - версия конфигурации
//   * НаименованиеКонфигурации - Строка - наименование конфигурации
//   * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения
//   * АдресПриложения - Строка - URL-адрес приложения
//   * ЧасовойПояс - Строка - часовой пояс приложения
//
Функция СвойстваПриложения(КодПриложения) Экспорт
	
    Метод = "tenant/info";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодПриложения);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "status";
    ДанныеОтвета.tenant[Поле] = Перечисления.СостоянияПриложений.ЗначениеПоИмени(ДанныеОтвета.tenant[Поле]);
	
	Переименования = ПереименованияПолей(Метод);
	
	Возврат ПереименоватьСвойства(ДанныеОтвета.tenant, Переименования);
	
КонецФункции
 
// Возвращает список пользователей, которым разрешен доступ к указанному приложению.
//
// Параметры:
//  КодПриложения - Число - код приложения (номер области)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пользователи, которым разрешен доступ:
//   * Логин - Строка - логин (имя) пользователя
//   * Роль - ПеречислениеСсылка.ПраваПользователяПриложения - право пользователя на текущее приложение в менеджере сервиса 
//
Функция ПользователиПриложения(КодПриложения) Экспорт
	
	Метод = "tenant/users/list";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", КодПриложения);
    
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "role";
    Для Каждого Строка Из ДанныеОтвета.user  Цикл
        Строка[Поле] = Перечисления.ПраваПользователяПриложения.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("login", "Логин");
	Переименования.Вставить("role", "Право");
    
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.user, Переименования);
	
КонецФункции

// Устанавливает пользователю с указанным логином доступ к указанному приложению и назначает указанную роль для работы в приложении.
//
// Параметры:
//  ПараметрыДобавления - Структура - см. метод ПрограммныйИнтерфейсСервиса.НовыйПараметрыДобавленияПользователяВПриложение
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат установки права доступа к приложению: Истина - право установлено, Ложь - произошла ошибка.
//
Функция ДобавитьПользователяВПриложение(ПараметрыДобавления,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "tenant/users/add";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", ПараметрыДобавления.КодПриложения);
    ДанныеЗапроса.Вставить("login", ПараметрыДобавления.Логин);
    ДанныеЗапроса.Вставить("role", Перечисления.ПраваПользователяПриложения.ИмяПоЗначению(ПараметрыДобавления.Право));
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции

// Отменяет пользователю с указанным логином доступ к указанному приложению.
//
// Параметры:
//  Логин - Строка - Логин (Имя) пользователя.
//  КодПриложения - Число - код приложения (номер области)
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат отмены права доступа к приложению: Истина - право отменено, Ложь - произошла ошибка.
//
Функция УдалитьПользователяИзПриложения(Логин, КодПриложения,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "tenant/users/delete";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", КодПриложения);
    ДанныеЗапроса.Вставить("login", Логин);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции

// Метод создает новое приложение с указанной прикладной конфигурацией.
//
// Параметры:
//  ПараметрыСоздания - Структура - см. метод ПрограммныйИнтерфейсСервиса.НовыйПараметрыСозданияПриложения
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Структура - результат создания приложения:
//  * Код - Число - код созданного приложения (номер области)
//  * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения после создания.
//  * АдресПриложения - Строка - адрес созданного приложения.
//
Функция СоздатьПриложение(ПараметрыСоздания,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Метод = "tenant/create";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("application", ПараметрыСоздания.КодКонфигурации);
    ДанныеЗапроса.Вставить("name", ПараметрыСоздания.Наименование);
    ДанныеЗапроса.Вставить("timezone", ПараметрыСоздания.ЧасовойПояс);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаЧисло(7, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("status", ОписаниеКолонки("СостояниеПриложения", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияПриложений")));
	Переименования.Вставить("url", ОписаниеКолонки("АдресПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	
	Если КодОтвета = 10200 Или КодОтвета = 10202 Тогда
		Результат = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеОтвета.tenant);
	    Поле = "status";
	    Результат[Поле] = Перечисления.СостоянияПриложений.ЗначениеПоИмени(Результат[Поле]);
		Результат = ПереименоватьСвойства(Результат, Переименования);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Код", 0);
		Результат.Вставить("СостояниеПриложения", Перечисления.СостоянияПриложений.ПустаяСсылка());
		Результат.Вставить("АдресПриложения", "");
	КонецЕсли; 
	
	Возврат Результат;
    
КонецФункции
    
#КонецОбласти 

#Область Tariff

// Возвращает информацию о тарифе сервиса по коду тарифа.
//
// Параметры:
//  КодТарифа - Строка - код тарифа.
//
// Возвращаемое значение:
//  Структура - информация о тарифе:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * ОписаниеДляОбслуживающихОрганизаций - Строка - описание тарифа для обслуживающей организации.
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ДатаНачалаДействия - Дата - дата начала действия тарифа.
//   * ДатаОкончанияДействия - Дата - дата окончания действия тарифа.
//   * ПериодДействияПродлевающейПодписки - Число - период (в днях), в течение которого действует продлевающая подписка (если разрешено продление).
//   * ПериодДействияРасширяющейПодписки - Число - период (в днях), в течение которого действует расширяющая подписка.
//   * ПериодДобавленияПродлевающейПодписки - Число - период (в днях) после завершения действия подписки, в течение которого можно создать продлевающую подписку.
//   * РасширениеТарифа - Булево - признак, что тариф является расширением
//   * Платный - Булево - признак, что тариф является платным (содержит платные периоды действия)
//   * Услуги - ТаблицаЗначений - услуги тарифа:
//     ** Код - Строка - код услуги
//     ** Наименование - Строка - Наименование услуги
//     ** ТипУслуги - ПеречислениеСсылка.ТипыУслугСервиса - тип услуги
//     ** Описание - Строка - Описание услуги
//     ** КоличествоЛицензий - Число - количество лицензий на услугу, включенное в тариф
//     ** КоличествоДопЛицензийРасширяющейПодписки - Число - количество лицензий на услугу, которое может быть предоставлено расширяющей подпиской
//     ** ИдентификаторПоставщика - Строка - идентификатор поставщика услуги
//     ** НаименованиеПоставщика - Строка - наименование поставщика услуги
//   * Расширения - ТаблицаЗначений - расширения тарифа:
//     ** Код - Строка - код тарифа-расширения
//     ** Наименование - Строка - наименование тарифа-расширения
//   * Конфигурации - ТаблицаЗначений - конфигурации тарифа:
//     ** Код - Строка - код конфигурации
//     ** Наименование - Строка - имя конфигурации
//     ** Описание - Строка - описание конфигурации
//   * ПериодыДействия - ТаблицаЗначений - периоды действия тарифа:
//     ** Код - Строка - код периода действия
//     ** Наименование - Строка - наименование периода действия
//     ** Сумма - Число - стоимость
//     ** Комментарий - Строка - комментарий к периоду действия
//
Функция ТарифСервиса(КодТарифа) Экспорт
    
	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.ТарифСервиса(КодТарифа);
	
КонецФункции

// Возвращает список тарифов сервиса, доступных абоненту этого приложения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов сервиса:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * ОписаниеДляОбслуживающихОрганизаций - Строка - описание тарифа для обслуживающей организации.
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ДатаНачалаДействия - Дата - дата начала действия тарифа.
//   * ДатаОкончанияДействия - Дата - дата окончания действия тарифа.
//   * ПериодДействияПродлевающейПодписки - Число - период (в днях), в течение которого действует продлевающая подписка (если разрешено продление).
//   * ПериодДействияРасширяющейПодписки - Число - период (в днях), в течение которого действует расширяющая подписка.
//   * ПериодДобавленияПродлевающейПодписки - Число - период (в днях) после завершения действия подписки, в течение которого можно создать продлевающую подписку.
//   * РасширениеТарифа - Булево - признак, что тариф является расширением
//   * Платный - Булево - признак, что тариф является платным (содержит платные периоды действия)
//
Функция ТарифыСервиса() Экспорт
	
	Метод = "tariff/list";
	ДанныеЗапроса = ШаблонЗапроса(Метод);
	Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
	ДанныеОтвета = РезультатВыполнения(Результат);
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("name", "Наименование");
	Переименования.Вставить("description", "ОписаниеДляОбслуживающихОрганизаций");
	Переименования.Вставить("description_for_subscribers", "ОписаниеДляАбонентов");
    Переименования.Вставить("start", "ДатаНачалаДействия");
    Переименования.Вставить("expiration","ДатаОкончанияДействия");
	Переименования.Вставить("prolongation_validity", "ПериодДействияПродлевающейПодписки");
	Переименования.Вставить("extension_validity", "ПериодДействияРасширяющейПодписки");
	Переименования.Вставить("prolongation_during", "ПериодДобавленияПродлевающейПодписки");
	Переименования.Вставить("is_extension", "РасширениеТарифа");
	Переименования.Вставить("is_payable", "Платный");
	
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.tariff, Переименования);
	
КонецФункции

#КонецОбласти 

#Область Subscription
    
// Возвращает список существующих подписок абонента текущего приложения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - существующие подписки абонента:
//   * КодАбонента - Число - код (номер) абонента
//   * Номер - Строка - номер подписки
//   * Дата - Дата - дата регистрации подписки
//   * ТипПодписки - ПеречислениеСсылка.ТипыПодписокСервиса - тип подписки
//   * КодОбслуживающейОрганизации - Число - код (номер) абонента обслуживающей организации
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * КодТарифа - Строка - код тарифа в подписке
//   * НомерОсновнойПодписки - Строка - номер основной подписки, если текущая подписка на тариф-расширение.
//
Функция ПодпискиАбонента() Экспорт
	
    Метод = "subscription/list";
    Абонент = АбонентЭтогоПриложения();
    КодАбонента = Абонент.Код;
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("account", КодАбонента);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "type";
    Для Каждого Строка Из ДанныеОтвета.subscription Цикл
        Строка[Поле] = Перечисления.ТипыПодписокСервиса.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
    
    Переименования = Новый Соответствие;
    Переименования.Вставить("account", "КодАбонента");
    Переименования.Вставить("id", "Номер");
    Переименования.Вставить("created", "Дата");
    Переименования.Вставить("type", "ТипПодписки");
    Переименования.Вставить("servant", "КодОбслуживающейОрганизации");
    Переименования.Вставить("start", "ДатаПодключения");
    Переименования.Вставить("completion", "ДатаОтключения");
    Переименования.Вставить("tariff", "КодТарифа");
    Переименования.Вставить("parent", "НомерОсновнойПодписки");
	
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.subscription, Переименования);
    
КонецФункции

#КонецОбласти 

#Область Promo_code
    
// Выполняет активацию указанного промо-кода для абонента текущего приложения.
//
// Параметры:
//  Промокод - Строка - используемый промокод.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат использования: Истина - промокод активирован, Ложь - произошла ошибка.
//
Функция ИспользоватьПромокод(Промокод,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "promo_code/activate";
    Абонент = АбонентЭтогоПриложения();
    КодАбонента = Абонент.Код;
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("account", КодАбонента);
    ДанныеЗапроса.Вставить("code", ПромоКод);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции
 
#КонецОбласти 

// Возвращает шаблон параметров создания пользователя для метода ПрограммныйИнтерфейсСервиса.СоздатьПользователяАбонента.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров создания пользователя:
//	 * Логин - Строка - логин (имя пользователя)
//	 * Пароль - Строка - пароль пользователя
//   * ПочтаОбязательна - Булево - признак обязательной установки почты (по умолчанию = Истина)
//   * Почта - Строка - электронная почта
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль пользователя (по умолчанию = ПользовательАбонента)
//   * ПолноеИмя - Строка - полное имя (наименование) пользователя
//   * Телефон - Строка - телефон пользователя
//   * ЧасовойПояс - Строка - рабочий часовой пояс пользователя
//
Функция НовыйПараметрыСозданияПользователя() Экспорт
	
    Параметры = Новый Структура;
    Параметры.Вставить("Логин", "");
    Параметры.Вставить("Пароль");
    Параметры.Вставить("ПочтаОбязательна", Истина);
    Параметры.Вставить("Почта");
    Параметры.Вставить("РольПользователя", Перечисления.РолиПользователейАбонентов.ПользовательАбонента);
    Параметры.Вставить("ПолноеИмя");
    Параметры.Вставить("Телефон");
    Параметры.Вставить("ЧасовойПояс");
    
    Возврат Параметры;
	
КонецФункции

// Возвращает шаблон параметров создания приложения для метода ПрограммныйИнтерфейсСервиса.СоздатьПриложение.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров создания приложения:
//	 * Наименование - Строка - наименование создаваемого приложения.
//	 * КодКонфигурации - Строка - кон конфигурации (вид приложения) 
//   * ЧасовойПояс - Строка - рабочий часовой пояс приложения
//
Функция НовыйПараметрыСозданияПриложения() Экспорт
    
    Параметры = Новый Структура;
    Параметры.Вставить("Наименование");
    Параметры.Вставить("КодКонфигурации");
    Параметры.Вставить("ЧасовойПояс");
    
    Возврат Параметры;

КонецФункции

// Возвращает шаблон параметров добавления пользователя в приложение для метода ПрограммныйИнтерфейсСервиса.ДобавитьПользователяВПриложение.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров добавления пользователя в приложение:
//	 * КодПриложения - Строка - наименование создаваемого приложения.
//	 * Логин - Строка - логин (имя пользователя) 
//   * Право - ПеречислениеСсылка.ПраваПользователяПриложения - право пользователя на приложение в менеджере сервиса 
//
Функция НовыйПараметрыДобавленияПользователяВПриложение() Экспорт
	
	Параметры = Новый Структура;
    Параметры.Вставить("КодПриложения", 0);
    Параметры.Вставить("Логин", "");
    Параметры.Вставить("Право", Перечисления.ПраваПользователяПриложения.ПустаяСсылка());
    
    Возврат Параметры;
	
КонецФункции

#КонецОбласти  

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает шаблон запроса к внешнему программному интерфейсу менеджера сервиса.
// Шаблон включает блок "general" с заполненными свойствами "type" и "method".
// Подробнее см. статью https://its.1c.ru/db/freshsm#content:15205582:1:issogl1_zicdv1s
//
// Параметры:
//  Метод - Строка - имя метода внешнего программного интерфейса менеджера сервиса.
// 
// Возвращаемое значение:
//  Структура - шаблон запроса.
//
Функция ШаблонЗапроса(Знач Метод) Экспорт
    
   	ОсновныеПараметрыМетода = Новый Структура;
    ОсновныеПараметрыМетода.Вставить("type", "ext");
    ОсновныеПараметрыМетода.Вставить("method", Метод);

    ШаблонЗапроса = Новый Структура;
    ШаблонЗапроса.Вставить("general", ОсновныеПараметрыМетода);
    
    Возврат ШаблонЗапроса;

КонецФункции

// Отправляет запрос к сервису внешнего программного интерфейса менеджера сервиса.
//
// Параметры:
//  ДанныеЗапроса - Структура - данные запроса, в соответствующем формате без раздела "auth"
//   Подробнее см. статью https://its.1c.ru/db/freshsm#content:15205582:hdoc
//   Данные авторизации добавляются непосредственно перед выполнением запроса.
//
// Возвращаемое значение:
//  HTTPОтвет - ответ HTTP-сервиса Менеджера сервиса. 
//
Функция ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса) Экспорт
    
    Адрес = АдресИсполненияВнешнегоПрограммногоИнтерфейса();
	Абонент = АбонентЭтогоПриложения();
	ДанныеЗапроса.Вставить("auth", ДанныеАвторизации(Абонент.Код));
    Возврат РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
    
КонецФункции

Процедура ЗавершитьСеансы(Знач НомераСеансов, Знач Пользователь = Неопределено) Экспорт
	
	Метод = "session/terminate";
	Абонент = АбонентЭтогоПриложения(Пользователь);
	Адрес = АдресИсполненияВнешнегоПрограммногоИнтерфейса();
	
	ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("account", Абонент.Код);
	ДанныеЗапроса.Вставить("tenant", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ДанныеЗапроса.Вставить("user", "ФиктивныйПользователь");
	ДанныеЗапроса.Вставить("id", НомераСеансов);
	ДанныеЗапроса.Вставить("auth", ДанныеАвторизации(Абонент.Код, Пользователь));
	
	Результат = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);	

КонецПроцедуры

Функция ЕстьПравоАдминистрированияПриложения(Знач КодПриложения, Знач АдресДанных = Неопределено) Экспорт 
	
	ПользователиПриложения = ПользователиПриложения(КодПриложения);
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Логин", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	СтруктураПоиска.Вставить("Право", Перечисления.ПраваПользователяПриложения.ЗапускИАдминистрирование);
	
	НайденныеСтроки = ПользователиПриложения.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ЕстьПравоЗапускИАдминистрирование = Ложь;
	Иначе
		ЕстьПравоЗапускИАдминистрирование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанных) Тогда
		ПоместитьВоВременноеХранилище(ЕстьПравоЗапускИАдминистрирование, АдресДанных);
	КонецЕсли;
	
	Возврат ЕстьПравоЗапускИАдминистрирование;
	
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур, ПереименованияКолонок = Неопределено) Экспорт
    
    Результат = Новый ТаблицаЗначений;
    
    Для Каждого Строка Из МассивСтруктур Цикл
        Для Каждого КлючЗначение Из Строка Цикл
            Если Результат.Колонки.Найти(КлючЗначение.Ключ) = Неопределено  Тогда
                ТипКолонки = Неопределено;
                Если ПереименованияКолонок <> Неопределено Тогда
                    ЗначениеПереименования = ПереименованияКолонок.Получить(КлючЗначение.Ключ);
                    Если ЗначениеЗаполнено(ЗначениеПереименования) И  ТипЗнч(ЗначениеПереименования) = Тип("Структура") Тогда
                        ТипКолонки = ЗначениеПереименования.Тип;
                    КонецЕсли; 
                КонецЕсли; 
                Результат.Колонки.Добавить(КлючЗначение.Ключ, ТипКолонки);
            КонецЕсли; 
        КонецЦикла;
        ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
    КонецЦикла;
    
    Если ПереименованияКолонок <> Неопределено Тогда
        Для Каждого Элемент Из ПереименованияКолонок Цикл
            Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
                ИмяКолонки = Элемент.Значение;
                ТипКолонки = Неопределено;
            Иначе
                ИмяКолонки = Элемент.Значение.Имя;
                ТипКолонки = Элемент.Значение.Тип;
            КонецЕсли;
            Если Результат.Колонки.Найти(Элемент.Ключ) <> Неопределено Тогда
                Результат.Колонки[Элемент.Ключ].Имя = ИмяКолонки;
            Иначе
                Результат.Колонки.Добавить(ИмяКолонки, ТипКолонки);
            КонецЕсли;
        КонецЦикла; 
    КонецЕсли; 
    
    Возврат Результат;
	
КонецФункции

Функция ПереименоватьСвойства(ДанныеОтвета, Знач Переименования) Экспорт
    
    Для Каждого Элемент Из Переименования Цикл
        Если ДанныеОтвета.Свойство(Элемент.Ключ) Тогда
            Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
                ИмяПоля = Элемент.Значение.Имя;
            Иначе
                ИмяПоля = Элемент.Значение;
            КонецЕсли; 
            ДанныеОтвета.Вставить(ИмяПоля, ДанныеОтвета[Элемент.Ключ]);
            ДанныеОтвета.Удалить(Элемент.Ключ);
        КонецЕсли; 	
    КонецЦикла;
    
    Возврат ДанныеОтвета; 

КонецФункции

Функция РезультатВыполнения(Ответ, ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
    
    КодСостояния = Ответ.КодСостояния;
    Если КодСостояния <> 200 Тогда
        Если ВызыватьИсключениеПриОшибке Тогда
            ВызватьИсключение СтрШаблон("%1 %2", КодСостояния, Ответ.ПолучитьТелоКакСтроку());
        Иначе
            Возврат Неопределено;
        КонецЕсли; 
    КонецЕсли;

    ПотокДанных = Ответ.ПолучитьТелоКакПоток();
    ИменаДат = СтрРазделить("start,completion,planned_date,created,activated,blocked,expiration", ",", Ложь);
    Данные = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокДанных, ИменаДат);
    
    КодОтвета = Данные.general.response;
    Сообщение = Данные.general.message;
	
	Если Не (КодОтвета = 10200 Или КодОтвета = 10202) Тогда
        Если ВызыватьИсключениеПриОшибке Тогда
            ВызватьИсключение СтрШаблон("%1 %2", КодОтвета, Сообщение);
        Иначе
            Возврат Неопределено;
        КонецЕсли; 
    КонецЕсли;
    
    Возврат Данные; 
    
КонецФункции

Функция АдресИсполненияВнешнегоПрограммногоИнтерфейса() Экспорт
	
	Возврат "hs/ext_api/execute";
	
КонецФункции

Функция ДанныеАвторизации(КодАбонента = Неопределено, Знач Пользователь = Неопределено) Экспорт  
	
	Если Пользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Иначе
		ИдентификаторПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
		ТекущийПользователь = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователя);
	КонецЕсли;
	
    НомерОбласти = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
    УстановленПривилегированныйРежим = Ложь;
	
	Если Не ПривилегированныйРежим() Тогда
        УстановитьПривилегированныйРежим(Истина);
        УстановленПривилегированныйРежим = Истина;
    КонецЕсли; 
	
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
    СохраняемоеЗначениеПароля = ТекущийПользователь.СохраняемоеЗначениеПароля;
	
	Если УстановленПривилегированныйРежим Тогда
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли; 

    РасположениеПриложения = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолучитьНавигационнуюСсылкуИнформационнойБазы());
    
    ДанныеАвторизации = Новый Структура;
    ДанныеАвторизации.Вставить("type", "smtl");
    ДанныеАвторизации.Вставить("host",РасположениеПриложения.Хост);
    ДанныеАвторизации.Вставить("login", ТекущийПользователь.Имя);
    ДанныеАвторизации.Вставить("hash", СохраняемоеЗначениеПароля);
    ДанныеАвторизации.Вставить("tenant", НомерОбласти);
    ДанныеАвторизации.Вставить("key", КлючДоступа);
    Если ЗначениеЗаполнено(КодАбонента) Тогда
        ДанныеАвторизации.Вставить("account", КодАбонента);
    КонецЕсли; 

    Возврат ДанныеАвторизации;
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции
    
Функция ПереименованияПолей(Метод)
	
    Переименования = Новый Соответствие;
	
	Если Метод = "tenant/info" Или Метод = "tenant/list" Тогда
		Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаЧисло(7, 0, ДопустимыйЗнак.Неотрицательный)));
		Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	    Переименования.Вставить("owner", ОписаниеКолонки("КодАбонентаВладельца", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
	    Переименования.Вставить("application", ОписаниеКолонки("КодКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	    Переименования.Вставить("app_version", ОписаниеКолонки("ВерсияКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(18)));
	    Переименования.Вставить("app_name", ОписаниеКолонки("НаименованиеКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
	    Переименования.Вставить("status", ОписаниеКолонки("СостояниеПриложения", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияПриложений")));
	    Переименования.Вставить("url", ОписаниеКолонки("АдресПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	    Переименования.Вставить("timezone", ОписаниеКолонки("ЧасовойПояс", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
		
	ИначеЕсли Метод = "account/users/list" Или Метод = "account/users/info" Тогда
		Переименования.Вставить("login", ОписаниеКолонки("Логин", ОбщегоНазначения.ОписаниеТипаСтрока(32)));
		Переименования.Вставить("name", ОписаниеКолонки("ПолноеИмя", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	    Переименования.Вставить("email", ОписаниеКолонки("Почта", ОбщегоНазначения.ОписаниеТипаСтрока(254)));
	    Переименования.Вставить("role", ОписаниеКолонки("РольПользователя", Новый ОписаниеТипов("ПеречислениеСсылка.РолиПользователейАбонентов")));
	    Переименования.Вставить("session_restriction", ОписаниеКолонки("РазрешенноеКоличествоСеансов", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный)));
	    Переименования.Вставить("is_temporary", ОписаниеКолонки("ВременныйДоступ", Новый ОписаниеТипов("Булево")));
		
	КонецЕсли; 
	
	Возврат Переименования;
	
КонецФункции
 
Функция ОписаниеКолонки(Имя, Тип)
	
	Возврат Новый Структура("Имя, Тип", Имя, Тип);
	
КонецФункции

#КонецОбласти  
