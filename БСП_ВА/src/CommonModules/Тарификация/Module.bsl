////////////////////////////////////////////////////////////////////////////////
// Общий модуль Тарификация.

// Получение/освобождение лицензий на уникальные услуги выполняется в два этапа:
// 1) Сначала выполняется запрос на получение/освобождение лицензии (например, в начале транзакции),
//    при этом системе тарификации передается уникальный идентификатор операции.
// 2) Затем выполняется либо подтверждение, либо отмена ранее запрошенной операции
//    (например, перед завершением транзакции).
//
// Важно! "Время жизни" незавершенной операции в системе тарификации БТС составляет 15 минут,
// по истечении этого времени незавершенные операции автоматически отменяются.
#Область ПрограммныйИнтерфейс

// Возвращает ссылку на услугу по ее идентификатору и идентификатору поставщика услуги.
//
// Параметры:
//  ИдентификаторУслуги - Строка - идентификатор услуги.
//  ИдентификаторПоставщика - Строка - идентификатор поставщика.
//	ВызыватьИсключение - Булево - флаг необходимости вызвать исключение в случае если услуга не найдена
//
// Возвращаемое значение:
//  СправочникСсылка.УслугиСервиса - ссылка на услугу.
//
Функция УслугаПоИдентификаторуИИдентификаторуПоставщика(Знач ИдентификаторУслуги, Знач ИдентификаторПоставщика, ВызыватьИсключение = Истина) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Услуги.Ссылка КАК Услуга
		|ИЗ
		|	Справочник.УслугиСервиса КАК Услуги
		|ГДЕ
		|	Услуги.Идентификатор = &ИдентификаторУслуги
		|	И Услуги.ПоставщикУслуги.Идентификатор = &ИдентификаторПоставщика");
	Запрос.УстановитьПараметр("ИдентификаторУслуги", ИдентификаторУслуги);
	Запрос.УстановитьПараметр("ИдентификаторПоставщика", ИдентификаторПоставщика);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Услуга;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Не найдена услуга по следующим полям:
                                        |- Идентификатор поставщика: %1
                                        |- Идентификатор услуги: %2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ИдентификаторПоставщика, ИдентификаторУслуги);
		
		ИнцидентыЦККСервер.ОткрытьИнцидент(ТарификацияСлужебный.ТипИнцидента_НеНайденаУслугаПоИдентификаторуУслугиИИдентификаторуПоставщика(),
			ИдентификаторПоставщика+ИдентификаторУслуги,
			ТекстОшибки);
			
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстОшибки;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Проверяет, позволяет ли система тарификации сервиса использование указанной безлимитной услуге
// указанному пользователю.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//
// Возвращаемое значение:
//  Булево - результат проверки (Истина = лицензия зарегистрирована).
//
Функция ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги) Экспорт
	
	// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
	Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если услуга не найдена, тогда возвращается ЛОЖЬ.
	Услуга = УслугаПоИдентификаторуИИдентификаторуПоставщика(ИдентификаторУслуги, ИдентификаторПоставщика, Ложь);
	Если Услуга = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если услуга не тарифицируется, тогда возвращается ИСТИНА.
	УслугаТарифицируется = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Услуга, "Тарифицируется");
	Если Не УслугаТарифицируется Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если есть подписка на услугу, тогда возвращается ИСТИНА, иначе - ЛОЖЬ.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоступныеЛицензии.ИдентификаторПодписки КАК ИдентификаторПодписки
		|ИЗ
		|	РегистрСведений.ДоступныеЛицензии КАК ДоступныеЛицензии
		|ГДЕ
		|	ДоступныеЛицензии.Услуга = &Услуга
		|	И &ДатаЗапроса МЕЖДУ ДоступныеЛицензии.ДатаНачалаДействия И ДоступныеЛицензии.ДатаОкончанияДействия");
	Запрос.УстановитьПараметр("Услуга", Услуга);
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяУниверсальнаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет, зарегистрирован ли в системе тарификации сервиса указанный идентификатор
// лицензии на использование указанной уникальной лимитированной услуги.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//  ИмяЛицензии - Строка - Строка(200) уникальное строковое представление лицензии, ПОНЯТНОЕ ПОЛЬЗОВАТЕЛЮ.
//  КонтекстЛицензии - Строка - Строка (200), контекст лицензии.
//
// Возвращаемое значение:
//  Булево - результат проверки (Истина = лицензия зарегистрирована).
//
Функция ЗарегистрированаЛицензияУникальнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги, ИмяЛицензии, КонтекстЛицензии = "") Экспорт
	
	Попытка
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Проверка наличия лицензии уникальной услуги из приложения'", КодЯзыка());
		ЗаголовокКомментария = ЗаголовокКомментария(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			ИмяЛицензии);
		
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Если услуга не найдена, тогда возвращается ЛОЖЬ.
		Услуга = УслугаПоИдентификаторуИИдентификаторуПоставщика(ИдентификаторУслуги, ИдентификаторПоставщика, Ложь);
		Если Услуга = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЗанятыеЛицензии.НомерПодписки КАК НомерПодписки
			|ИЗ
			|	РегистрСведений.ЗанятыеЛицензии КАК ЗанятыеЛицензии
			|ГДЕ
			|	ЗанятыеЛицензии.ИдентификаторЛицензии = &ИдентификаторЛицензии
			|	И ЗанятыеЛицензии.Услуга = &Услуга
			|	И ЗанятыеЛицензии.КонтекстЛицензии = &КонтекстЛицензии");
		Запрос.УстановитьПараметр("Услуга", Услуга);
		Запрос.УстановитьПараметр("ИдентификаторЛицензии", ИмяЛицензии);
		Запрос.УстановитьПараметр("КонтекстЛицензии", КонтекстЛицензии);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Не ПустаяСтрока(Выборка.НомерПодписки);
		КонецЕсли;
		
		Возврат Ложь;
		
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецФункции

// Выполняет попытку получить лицензию на использование уникальной услуги в системе тарификации сервиса.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//  ИмяЛицензии - Строка - Строка(200) уникальное строковое представление лицензии, ПОНЯТНОЕ ПОЛЬЗОВАТЕЛЮ.
//  ИдентификаторОперации - УникальныйИдентификатор - уникальный идентификатор операции, потребуется для подтверждения.
//  КонтекстЛицензии - Строка - Строка(200) контекст лицензия, указывающий уникальность лицензии.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * Результат - Булево - результат выполнения (Истина = лицензия успешно получена).
//    * ДоступноЛицензий - Число - максимально доступное абоненту количество лицензий на указанную услугу (если "-1", значит неограниченное количество).
//    * ЗанятоЛицензий - Число - количество уже полученных (использованных) лицензий на услугу.
//    * СвободноЛицензий - Число - количество свободных лицензий (если "-1", значит неограниченное количество).
//
Функция ЗанятьЛицензиюУникальнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги, ИмяЛицензии, ИдентификаторОперации, КонтекстЛицензии = "") Экспорт
	
	Попытка
		
		ОтветЗанятияУслуги = ОтветЗанятияЛицензий();
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Заем лицензии уникальной услуги из приложения'", КодЯзыка());
		ЗаголовокКомментария = ЗаголовокКомментария(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			ИмяЛицензии,
			,
			ИдентификаторОперации,
			,
			КонтекстЛицензии);
		
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			ОтветЗанятияУслуги.Результат = Результат;
			ОтветЗанятияУслуги.ДоступноЛицензий = -1;
			ОтветЗанятияУслуги.СвободноЛицензий = -1;
			Возврат ОтветЗанятияУслуги;
		КонецЕсли;
		
		Пользователь = Пользователи.ТекущийПользователь();
		
		ПараметрыПодключения = ПараметрыПодключенияКHTTPСервисуТарификацииДляПриложений();
		ПараметрыЗапроса = ПараметрыЗапросаЛицензииУникальнойУслуги(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			Пользователь,
			ИмяЛицензии,
			ИдентификаторОперации,
			,
			КонтекстЛицензии);
		
		Ответ = ПолучитьОтветОтHTTPСервиса(ПараметрыПодключения, "/UniqueServiceLicense", "POST", ПараметрыЗапроса);
		
		Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 400 Тогда
			СтруктураОтветаHTTP = СтруктураОтветаHTTP(Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
		Если Ответ.КодСостояния = 200 Тогда
			СформироватьОтветЗанятияЛицензий(ОтветЗанятияУслуги, СтруктураОтветаHTTP);
			ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Успех'"));
			Возврат ОтветЗанятияУслуги;
		ИначеЕсли Ответ.КодСостояния = 400 Тогда
			ВызватьИсключение СтруктураОтветаHTTP.ErrorMessage;
		Иначе
			ВызватьИсключение НСтр("ru = 'Код возврата веб-сервера:'") + Строка(Ответ.КодСостояния);
		КонецЕсли;
		
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецФункции

// Выполняет попытку освободить лицензию на уникальную услугу в системе тарификации сервиса.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//  ИмяЛицензии - Строка - Строка(200) уникальное строковое представление лицензии, ПОНЯТНОЕ ПОЛЬЗОВАТЕЛЮ.
//  ИдентификаторОперации - УникальныйИдентификатор - уникальный идентификатор операции, потребуется для подтверждения.
//  КодОбластиДанных - Число - код области данных (если мы вызываем функцию из неразделенного сеанса).
//  КонтекстЛицензии - Строка - Строка(200) контекст лицензия, указывающий уникальность лицензии.
//  УдалитьЛицензиюВоВсехОбластяхДанных - Булево - удалять или нет данную лицензию по областям данных.
//
// Возвращаемое значение:
//  Булево - результат выполнения (Истина = лицензия успешно освобождена, Ложь - данная лицензия не была найдена).
//
Функция ОсвободитьЛицензиюУникальнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги, ИмяЛицензии, ИдентификаторОперации, КодОбластиДанных = Неопределено,
	КонтекстЛицензии = "", УдалитьЛицензиюВоВсехОбластяхДанных = Ложь) Экспорт
	
	Попытка
		
		УстановитьРазделительСеанса(КодОбластиДанных);
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Освобождение лицензии уникальной услуги из приложения'", КодЯзыка());
		ЗаголовокКомментария = ЗаголовокКомментария(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			ИмяЛицензии,
			,
			ИдентификаторОперации,
			,
			КонтекстЛицензии);
		
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Пользователь = Пользователи.ТекущийПользователь();
		
		ПараметрыПодключения = ПараметрыПодключенияКHTTPСервисуТарификацииДляПриложений();
		ПараметрыЗапроса = ПараметрыЗапросаЛицензииУникальнойУслуги(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			Пользователь,
			ИмяЛицензии,
			ИдентификаторОперации,
			УдалитьЛицензиюВоВсехОбластяхДанных,
			КонтекстЛицензии);
		
		Ответ = ПолучитьОтветОтHTTPСервиса(ПараметрыПодключения, "/UniqueServiceLicense", "DELETE", ПараметрыЗапроса);
		
		Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 400 Тогда
			СтруктураОтветаHTTP = СтруктураОтветаHTTP(Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
		Если Ответ.КодСостояния = 200 Тогда
			ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Успех'"));
			СнятьРазделительСеанса(КодОбластиДанных);
			Возврат Истина;
		ИначеЕсли Ответ.КодСостояния = 410 Тогда
			ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Не найдена лицензия'"));
			СнятьРазделительСеанса(КодОбластиДанных);
			Возврат Ложь;
		ИначеЕсли Ответ.КодСостояния = 400 Тогда
			ВызватьИсключение СтруктураОтветаHTTP.ErrorMessage;
		Иначе
			ВызватьИсключение НСтр("ru = 'Код возврата веб-сервера:'") + Строка(Ответ.КодСостояния);
		КонецЕсли;
		
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		СнятьРазделительСеанса(КодОбластиДанных);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецФункции

// Выполняет попытку получить лицензии на использование лимитированной услуги в сервисе.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//  КоличествоЛицензий - Число - требуемое количество лицензий (натуральное число, 10 разрядов).
//  КодОбластиДанных - Число - код области данных (если мы вызываем функцию из неразделенного сеанса).
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * Результат - Булево - результат выполнения (Истина = лицензия успешно получена).
//    * ДоступноЛицензий - Число - максимально доступное абоненту количество лицензий на указанную услугу (если "-1", значит неограниченное количество).
//    * ЗанятоЛицензий - Число - количество уже полученных (использованных) лицензий на услугу.
//    * СвободноЛицензий - Число - количество свободных лицензий (если "-1", значит неограниченное количество).
//
Функция ЗанятьЛицензииЛимитированнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги, КоличествоЛицензий, КодОбластиДанных = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ОтветЗанятияУслуги = ОтветЗанятияЛицензий();
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Заем лицензий лимитированной услуги из приложения'", КодЯзыка());
		ЗаголовокКомментария = ЗаголовокКомментария(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			,
			КоличествоЛицензий,
			,
			КодОбластиДанных);
			
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			ОтветЗанятияУслуги.Результат = Результат;
			ОтветЗанятияУслуги.ДоступноЛицензий = -1;
			ОтветЗанятияУслуги.СвободноЛицензий = -1;
			ЗафиксироватьТранзакцию();
			Возврат ОтветЗанятияУслуги;
		КонецЕсли;
		
		Услуга = УслугаПоИдентификаторуИИдентификаторуПоставщика(ИдентификаторУслуги, ИдентификаторПоставщика);
		
		ЗначениеРазделителя = ЗначениеРазделителя(КодОбластиДанных);
		
		ЗаблокироватьЗанятыеЛицензии(Услуга, ЗначениеРазделителя);
		Результат = ЕстьДоступныеЛицензии(Услуга, КоличествоЛицензий, ЗначениеРазделителя);
		ЗаполнитьЗначенияСвойств(ОтветЗанятияУслуги, Результат);
		БылоЗанятоЛицензий = ?(ОтветЗанятияУслуги.Результат, КоличествоЛицензий, 0);
		
		УстановитьПривилегированныйРежим(Истина);
		ОбновитьКоличествоЗанятыхЛицензий(Услуга, КоличествоЛицензий, ЗначениеРазделителя);
		УстановитьПривилегированныйРежим(Ложь);
		ОтветЗанятияУслуги.ЗанятоЛицензий = ОтветЗанятияУслуги.ЗанятоЛицензий + БылоЗанятоЛицензий;
		
		Если Не ЛимитированнаяУслугаТарифицируется(Услуга) Тогда
			ОтветЗанятияУслуги.Результат = Истина;
			ОтветЗанятияУслуги.ДоступноЛицензий = -1;
			ОтветЗанятияУслуги.СвободноЛицензий = -1;
		КонецЕсли;
		
		ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Успех'"));
		
		ЗафиксироватьТранзакцию();
		
		Возврат ОтветЗанятияУслуги;
		
	Исключение
		ОтменитьТранзакцию();
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецФункции

// Выполняет попытку освободить лицензии на использование лимитированной услуги в сервисе.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//  КоличествоЛицензий - Число - требуемое количество лицензий (натуральное число, 10 разрядов).
//  КодОбластиДанных - Число - код области данных (если мы вызываем функцию из неразделенного сеанса).
//
// Возвращаемое значение:
//  Булево - результат выполнения (Истина = лицензия успешно освобождена).
//
Функция ОсвободитьЛицензииЛимитированнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги, КоличествоЛицензий, КодОбластиДанных = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Освобождение лицензий лимитированной услуги из приложения'", КодЯзыка());
		ЗаголовокКомментария = ЗаголовокКомментария(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			Новый УникальныйИдентификатор,
			КоличествоЛицензий,
			,
			КодОбластиДанных);
		
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Услуга = УслугаПоИдентификаторуИИдентификаторуПоставщика(ИдентификаторУслуги, ИдентификаторПоставщика);
		
		ЗначениеРазделителя = ЗначениеРазделителя(КодОбластиДанных);
		
		ЗаблокироватьЗанятыеЛицензии(Услуга, ЗначениеРазделителя);
		
		УстановитьПривилегированныйРежим(Истина);
		ОбновитьКоличествоЗанятыхЛицензий(Услуга, - КоличествоЛицензий, ЗначениеРазделителя);
		УстановитьПривилегированныйРежим(Ложь);
		ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Успех'"));
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
		
	Исключение
		ОтменитьТранзакцию();
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецФункции

// Выполняет подтверждение ранее запрошенной операции с лицензиями (получение или освобождение).
//
// Параметры:
//  ИдентификаторОперации - УникальныйИдентификатор - идентификатор операции, который передавался при запросе операции.
//
// Возвращаемое значение:
//  Булево - результат операции (Истина = операция подтверждена).
//
Функция ПодтвердитьОперацию(ИдентификаторОперации) Экспорт
	
	Попытка
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Фиксация операции'", КодЯзыка());
		ЗаголовокКомментария = НСтр("ru = 'Идентификатор операции:'") + Строка(ИдентификаторОперации);
		
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ПараметрыПодключения = ПараметрыПодключенияКHTTPСервисуТарификацииДляПриложений();
		ПараметрыЗапроса = Новый Структура("OperationID", Строка(ИдентификаторОперации));
		Ответ = ПолучитьОтветОтHTTPСервиса(ПараметрыПодключения, "/Operation", "POST", ПараметрыЗапроса);
		
		СтруктураОтветаHTTP = СтруктураОтветаHTTP(Ответ.ПолучитьТелоКакСтроку());
		
		Если Ответ.КодСостояния = 200 Тогда
			ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Успех'"));
			ИзменитьЗанятыеЛицензии(СтруктураОтветаHTTP);
			Возврат Истина;
		ИначеЕсли Ответ.КодСостояния = 400 Тогда
			ВызватьИсключение СтруктураОтветаHTTP.ErrorMessage;
		Иначе
			ВызватьИсключение НСтр("ru = 'Код возврата веб-сервера:'") + Строка(Ответ.КодСостояния);
		КонецЕсли;
		
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецФункции

// Выполняет отмену ранее запрошенной операции с лицензиями (получение или освобождение).
//
// Параметры:
//  ИдентификаторОперации - УникальныйИдентификатор - идентификатор операции, который передавался при запросе операции.
//
// Возвращаемое значение:
//    Булево - результат операции (Истина = операция отменена).
//
Функция ОтменитьОперацию(ИдентификаторОперации) Экспорт
	
	Попытка
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Отмена операции'", КодЯзыка());
		ЗаголовокКомментария = НСтр("ru = 'Идентификатор операции:'") + Строка(ИдентификаторОперации);
		
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ПараметрыПодключения = ПараметрыПодключенияКHTTPСервисуТарификацииДляПриложений();
		ПараметрыЗапроса = Новый Структура("OperationID", Строка(ИдентификаторОперации));
		Ответ = ПолучитьОтветОтHTTPСервиса(ПараметрыПодключения, "/Operation", "DELETE", ПараметрыЗапроса);
		
		СтруктураОтветаHTTP = СтруктураОтветаHTTP(Ответ.ПолучитьТелоКакСтроку());
		
		Если Ответ.КодСостояния = 200 Тогда
			ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Успех'"));
			Возврат Истина;
		ИначеЕсли Ответ.КодСостояния = 400 Тогда
			ВызватьИсключение СтруктураОтветаHTTP.ErrorMessage;
		Иначе
			ВызватьИсключение НСтр("ru = 'Код возврата веб-сервера:'") + Строка(Ответ.КодСостояния);
		КонецЕсли;
		
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет попытку получить количество свободных лицензий на использование уникальной услуги в системе тарификации сервиса.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//
// Возвращаемое значение:
//  Структура с ключами:
//    * ДоступноЛицензий - Число - максимально доступное абоненту количество лицензий на указанную услугу (если "-1", значит неограниченное количество).
//    * ЗанятоЛицензий - Число - количество уже полученных (использованных) лицензий на услугу.
//    * СвободноЛицензий - Число - количество свободных лицензий (если "-1", значит неограниченное количество).
//
Функция КоличествоЛицензийУникальнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги) Экспорт
	
	Попытка
		
		ОтветЗанятияУслуги = ОтветЗанятияЛицензий();
		
		ИмяЛицензии = Новый УникальныйИдентификатор;
		ИдентификаторОперации = Новый УникальныйИдентификатор;
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Получение количества свободных лицензий уникальной услуги из приложения'", КодЯзыка());
		ЗаголовокКомментария = ЗаголовокКомментария(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			ИмяЛицензии,
			,
			ИдентификаторОперации);
		
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			ОтветЗанятияУслуги.Результат = Результат;
			ОтветЗанятияУслуги.ДоступноЛицензий = -1;
			ОтветЗанятияУслуги.СвободноЛицензий = -1;
			Возврат ОтветЗанятияУслуги;
		КонецЕсли;
		
		Пользователь = Пользователи.ТекущийПользователь();
		
		ПараметрыПодключения = ПараметрыПодключенияКHTTPСервисуТарификацииДляПриложений();
		ПараметрыЗапроса = ПараметрыЗапросаЛицензииУникальнойУслуги(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			Пользователь,
			ИмяЛицензии,
			ИдентификаторОперации);
		
		Ответ = ПолучитьОтветОтHTTPСервиса(ПараметрыПодключения, "/ServiceLicenseStat", "POST", ПараметрыЗапроса);
		
		СтруктураОтветаHTTP = СтруктураОтветаHTTP(Ответ.ПолучитьТелоКакСтроку());
		
		Если Ответ.КодСостояния = 200 Тогда
			СформироватьОтветЗанятияЛицензий(ОтветЗанятияУслуги, СтруктураОтветаHTTP);
			ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Успех'"));
			Возврат ОтветЗанятияУслуги;
		ИначеЕсли Ответ.КодСостояния = 400 Тогда
			ВызватьИсключение СтруктураОтветаHTTP.ErrorMessage;
		Иначе
			ВызватьИсключение НСтр("ru = 'Код возврата веб-сервера:'") + Строка(Ответ.КодСостояния);
		КонецЕсли;
		
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецФункции

// Выполняет попытку получить количество лицензий лимитированной услуги в сервисе.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//  КодОбластиДанных - Число - код области данных (если мы вызываем функцию из неразделенного сеанса).
//
// Возвращаемое значение:
//  Структура с ключами:
//    * ДоступноЛицензий - Число - максимально доступное абоненту количество лицензий на указанную услугу (если "-1", значит неограниченное количество).
//    * ЗанятоЛицензий - Число - количество уже полученных (использованных) лицензий на услугу.
//    * СвободноЛицензий - Число - количество свободных лицензий (если "-1", значит неограниченное количество).
//
Функция КоличествоЛицензийЛимитированнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги, КодОбластиДанных = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ОтветЗанятияУслуги = ОтветЗанятияЛицензий();
		
		КоличествоЛицензий = 0;
		
		ИмяСобытия = ИмяСобытияЖР() + НСтр("ru = 'Получение количества доступных лицензий лимитированной услуги из приложения'", КодЯзыка());
		ЗаголовокКомментария = ЗаголовокКомментария(ИдентификаторПоставщика,
			ИдентификаторУслуги,
			,
			КоличествоЛицензий,
			,
			КодОбластиДанных);
			
		// Предопределенные проверки, которые сразу помогают определить: есть доступ к услуге или нет.
		Результат = РезультатПредопределенныхПроверокОперацийСЛицензиями();
		Если Результат <> Неопределено Тогда
			ОтветЗанятияУслуги.Результат = Результат;
			ОтветЗанятияУслуги.ДоступноЛицензий = -1;
			ОтветЗанятияУслуги.СвободноЛицензий = -1;
			ЗафиксироватьТранзакцию();
			Возврат ОтветЗанятияУслуги;
		КонецЕсли;
		
		Услуга = УслугаПоИдентификаторуИИдентификаторуПоставщика(ИдентификаторУслуги, ИдентификаторПоставщика);
		
		ЗначениеРазделителя = ЗначениеРазделителя(КодОбластиДанных);
		
		ЗаблокироватьЗанятыеЛицензии(Услуга, ЗначениеРазделителя);
		Результат = ЕстьДоступныеЛицензии(Услуга, КоличествоЛицензий, ЗначениеРазделителя);
		ЗаполнитьЗначенияСвойств(ОтветЗанятияУслуги, Результат);
		
		Если Не ЛимитированнаяУслугаТарифицируется(Услуга) Тогда
			ОтветЗанятияУслуги.Результат = Истина;
			ОтветЗанятияУслуги.ДоступноЛицензий = -1;
			ОтветЗанятияУслуги.СвободноЛицензий = -1;
		КонецЕсли;
		
		ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, НСтр("ru = 'Успех'"));
		
		ЗафиксироватьТранзакцию();
		
		Возврат ОтветЗанятияУслуги;
		
	Исключение
		ОтменитьТранзакцию();
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецФункции

// Обновляет значение константы "ИспользоватьКонтрольТарификации".
//
// Параметры:
//  Значение - Булево - значение константы.
//
Процедура ОбновитьИспользованиеКонтроляТарификации(Знач Значение) Экспорт
	
	Константы.ИспользоватьКонтрольТарификации.Установить(Значение);
	
КонецПроцедуры

// Обновляет поставщика услуги по идентификатору.
// Ключом поиска поставщика является реквизит "Идентификатор".
//
// Параметры:
//  Код - Число - код поставщика.
//  Наименование - Строка - наименование поставщика.
//  Идентификатор - Строка - идентификатор поставщика.
//  ПометкаУдаления - Булево - пометка удаления.
//
// Возвращаемое значение:
//  СправочникСсылка.ПоставщикиУслугСервиса - поставщик услуг.
//
Функция ОбновитьПоставщикаУслуг(Знач Код, Знач Наименование, Знач Идентификатор, Знач ПометкаУдаления) Экспорт
	
	ПоставщикСсылка = Справочники.ПоставщикиУслугСервиса.НайтиПоРеквизиту("Идентификатор", Идентификатор);
	Если ПоставщикСсылка.Пустая() Тогда 
		Поставщик = Справочники.ПоставщикиУслугСервиса.СоздатьЭлемент();
		Если Код = Неопределено Тогда 
			Поставщик.УстановитьНовыйКод();
		КонецЕсли;
	Иначе
		Поставщик = ПоставщикСсылка.ПолучитьОбъект();
		Если Код = Неопределено Тогда 
			ВызватьИсключение НСтр("ru = 'При обновлении поставщика поле ""Код"" должно быть установлено'");
		КонецЕсли;
	КонецЕсли;
	
	Поставщик.Код = Код;
	Поставщик.Наименование = Наименование;
	Поставщик.Идентификатор = Идентификатор;
	Поставщик.ПометкаУдаления = ПометкаУдаления;
	Поставщик.ОбменДанными.Загрузка = Истина;
	Поставщик.Записать();
	
	Возврат Поставщик.Ссылка;
	
КонецФункции

// Возвращает реквизиты услуги для заполнения.
//
// Возвращаемое значение:
//  Структура - реквизиты услуги.
//
Функция СоставРеквизитовУслуги() Экспорт
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("Идентификатор");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("ТипУслуги");
	Реквизиты.Вставить("ПоставщикУслуги");
	Реквизиты.Вставить("Тарифицируется");
	Реквизиты.Вставить("ПометкаУдаления");
	Реквизиты.Вставить("ПоказыватьПриДобавленииВТариф");
	
	Возврат Реквизиты;
	
КонецФункции

// Обновляет поставщика услуги по коду.
// Ключом поиска услуги является реквизит "Код".
//
// Параметры:
//  Код - Число - код услуги.
//  Наименование - Строка - наименование услуги.
//  ТипУслуги - ПеречислениеСсылка - типыУслуг - тип услуги.
//  ПоставщикУслуги - СправочникСсылкаПоставщикиУслугСервиса - поставщик услуги.
//  Активна - Булево - происходит контроль тарификации данной услуги или нет.
//  ПометкаУдаления - Булево - пометка удаления.
//  ИспользоватьВТарификации - Булево - можно ли данную услугу хранить в тарифах.
//
Процедура ОбновитьУслугу(ЗначенияРеквизитов) Экспорт
	
	ИдентификаторПоставщика = ИнтеграцияПодсистемБТС.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.ПоставщикУслуги, "Идентификатор");
	
	УслугаСсылка = УслугаПоИдентификаторуИИдентификаторуПоставщика(ЗначенияРеквизитов.Идентификатор, ИдентификаторПоставщика, Ложь);
	Если Не ЗначениеЗаполнено(УслугаСсылка) Тогда 
		Услуга = Справочники.УслугиСервиса.СоздатьЭлемент();
		Услуга.УстановитьНовыйКод();
	Иначе
		Услуга = УслугаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Услуга.Идентификатор = ЗначенияРеквизитов.Идентификатор;
	Услуга.Наименование = ЗначенияРеквизитов.Наименование;
	Услуга.ПоставщикУслуги = ЗначенияРеквизитов.ПоставщикУслуги;
	Услуга.ТипУслуги = ЗначенияРеквизитов.ТипУслуги;
	Услуга.Тарифицируется = ЗначенияРеквизитов.Тарифицируется;
	Услуга.ПометкаУдаления = ЗначенияРеквизитов.ПометкаУдаления;
	Услуга.ПоказыватьПриДобавленииВТариф = ЗначенияРеквизитов.ПоказыватьПриДобавленииВТариф;
	Услуга.ОбменДанными.Загрузка = Истина;
	Услуга.Записать();
	
КонецПроцедуры

// Возвращает тип услуги по ее "внутреннему" идентификатору, который используется в обменах.
// СоответствиеТипаУслугиИЕеИдентификатора
//
// Параметры:
//  ИдентификаторТипаУслуги - Строка - идентификатор типа услуг.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыУслуг - тип услуги.
//
Функция ТипУслугиПоИдентификатору(Знач ИдентификаторТипаУслуги) Экспорт
	
	Для Каждого КлючИЗначение Из СоответствиеТипаУслугиИЕеИдентификатора() Цикл 
		
		Если КлючИЗначение.Значение = ИдентификаторТипаУслуги Тогда
			Возврат КлючИЗначение.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение НСтр("ru = 'Неизвестный код услуги:'") + ИдентификаторТипаУслуги;
	
КонецФункции

// Хранит в себе соответствие между идентификатором типа услуг и фактическим значением.
//
// Возвращаемое значение:
//  Соответствие - Ключ (ПеречислениеСсылка.ТипыУслуг), Значение (идентификатор типа услуг).
//
Функция СоответствиеТипаУслугиИЕеИдентификатора() Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.ТипыУслуг.Безлимитная, "unlimited");
	Соответствие.Вставить(Перечисления.ТипыУслуг.Лимитированная, "limited");
	Соответствие.Вставить(Перечисления.ТипыУслуг.Уникальная, "unique");
	Возврат Соответствие;
	
КонецФункции

// Очищает данные (разделенные) по тарификации в текущей области данных.
//
Процедура ОчиститьДанныеАбонентаПоТарификацииВОбласти() Экспорт
	
	// Подстраховка, чтобы из неразделенного сеанса не удалить все данные.
	Если Не ИнтеграцияПодсистемБТС.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ДоступныеЛицензии.СоздатьНаборЗаписей();
	Набор.Записать();
	
КонецПроцедуры

// Создает запись в РС "ДоступныеЛицензии".
//
// Параметры:
//  ИдентификаторПодписки - УникальныйИдентификатор - идентификатор подписки.
//  Услуга - СправочникСсылка.Услуги - услуга.
//  ДатаНачалаДействия - Дата - дата начала действия услуги.
//  ДатаОкончанияДействия - Дата - дата окончания действия подписки.
//  НомерПодписки - Строка - номер подписки.
//  КоличествоДоступныхЛицензий - Число - количество доступных лицензий (если "-1", значит количество доступных лицензий
//                                        неограниченно).
//
Процедура СоздатьЗаписьДоступныеЛицензии(Знач ИдентификаторПодписки, Знач Услуга, Знач ДатаНачалаДействия, 
	Знач ДатаОкончанияДействия, Знач НомерПодписки, Знач КоличествоДоступныхЛицензий = 0) Экспорт
	
	Запись = РегистрыСведений.ДоступныеЛицензии.СоздатьМенеджерЗаписи();
	Запись.ИдентификаторПодписки = ИдентификаторПодписки;
	Запись.Услуга = Услуга;
	Запись.ДатаНачалаДействия = ДатаНачалаДействия;
	Запись.ДатаОкончанияДействия = ДатаОкончанияДействия;
	Запись.НомерПодписки = НомерПодписки;
	Запись.КоличествоЛицензий = КоличествоДоступныхЛицензий;
	Запись.ДатаИзменения = ТекущаяДатаСеанса();
	Запись.Записать();
	
	ПараметрыЛицензии = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Запись, Метаданные.РегистрыСведений.ДоступныеЛицензии);
	ТарификацияПереопределяемый.ПриОбновленииДоступныхЛицензий(ПараметрыЛицензии);
	
КонецПроцедуры

// Удаляет данные по подписке в текущей области данных.
//
// Параметры:
//  ИдентификаторПодписки - УникальныйИдентификатор - идентификатор подписки.
//
Процедура УдалитьДанныеПоПодписке(Знач ИдентификаторПодписки) Экспорт
	
	// Подстраховка, чтобы из неразделенного сеанса не удалить все данные.
	Если Не ИнтеграцияПодсистемБТС.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ДоступныеЛицензии.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПодписки.Установить(ИдентификаторПодписки);
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл
		ПараметрыЛицензии = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Запись, Метаданные.РегистрыСведений.ДоступныеЛицензии);
		ТарификацияПереопределяемый.ПриУдаленииДоступныхЛицензий(ПараметрыЛицензии);
	КонецЦикла;
	Набор.Очистить();
	Набор.Записать();
	
КонецПроцедуры

// Очищает данные по лицензиям в разрезе области данных. В РС "ЗанятыеЛицензии".
//
Процедура ОчиститьДанныеПоЛицензиям() Экспорт
	
	ТипыУслуг = Новый Массив;
	ТипыУслуг.Добавить(Перечисления.ТипыУслуг.Уникальная);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УслугиСервиса.Ссылка КАК Услуга
		|ИЗ
		|	Справочник.УслугиСервиса КАК УслугиСервиса
		|ГДЕ
		|	УслугиСервиса.ТипУслуги В(&ТипыУслуг)
		|	И НЕ УслугиСервиса.ПометкаУдаления");
	Запрос.УстановитьПараметр("ТипыУслуг", ТипыУслуг);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ЗанятыеЛицензии.СоздатьНаборЗаписей();
		Набор.Отбор.Услуга.Установить(Выборка.Услуга);
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление валюты оплаты услуг сервиса.
// 
// Возвращаемое значение:
//  Строка - представление валюты оплаты. 
//
Функция ПредставлениеВалютыОплаты() Экспорт
	
	ПредставлениеВалютыОплаты = НСтр("ru = 'руб.'"); 
	ТарификацияПереопределяемый.ПриУстановкеПредставленияВалютыОплаты(ПредставлениеВалютыОплаты);
	
	Возврат ПредставлениеВалютыОплаты;
	
КонецФункции

// Возвращает имя формы обработки ответа на запрос счета на оплату.
// 
// Возвращаемое значение:
//  Строка - имя формы обработки ответа.
//
Функция ИмяФормыОбработкиОтвета()Экспорт
	
	ИмяФормыОбработкиОтвета = "Обработка.ОплатаСервиса.Форма.ОбработкаОтвета";
	ТарификацияПереопределяемый.ПриПолученииИмениФормыОбработкиОтвета(ИмяФормыОбработкиОтвета);
	
	
	Возврат ИмяФормыОбработкиОтвета;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает значение константы "ИспользоватьКонтрольТарификации".
//
// Параметры:
//  Булево - Истина, если включена тарификация, Ложь - иначе.
//
Функция ИспользоватьКонтрольТарификации()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьКонтрольТарификации.Получить();
	
КонецФункции

// Предопределенные проверки при операциях с лицензиями.
//
// Возвращаемое значение:
//  Булево - действие разрешено.
//
Функция РезультатПредопределенныхПроверокОперацийСЛицензиями()
	
	// Проверка того, что Менеджер сервиса поддерживает нужную версию тарификации.
	Результат = ТарификацияСлужебный.МенеджерСервисаПоддерживаетУправлениеТарифамиВПриложении_1_0_1_2();
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Результат Тогда
		ЗаголовокКомментария = НСтр("ru = 'Менеджер сервиса не поддерживает версию тарификации ""1.0.1.2""'");
		ЗаписатьОшибку(ИмяСобытияЖР(), ЗаголовокКомментария, "");
		Возврат Истина;
	КонецЕсли;
	
	// Если контроль тарификации выключен, тогда возвращается ИСТИНА.
	Если Не ИспользоватьКонтрольТарификации() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область РаботаСЖурналомРегистрации

// Возвращает имя события для Журнала регистрации.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖР()
	
	Возврат ТарификацияСлужебный.ИмяСобытияТарификации() + НСтр("ru = 'Операции с лицензиями.'", КодЯзыка());
	
КонецФункции

// Записывает ошибку в ЖР при операциях с лицензиями.
//
// Параметры:
//  ИмяСобытия - Строка - имя события ЖР.
//  ЗаголовокКомментария - Строка - заголовок комментария ошибки.
//  Комментарий - Строка - комментарий ошибки.
//
Процедура ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий)
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ЗаголовокКомментария + Символы.ПС + Символы.ПС + Комментарий);
	
КонецПроцедуры

// Записывает информацию в ЖР при операциях с лицензиями.
//
// Параметры:
//  ИмяСобытия - Строка - имя события ЖР.
//  ЗаголовокКомментария - Строка - заголовок комментария ошибки.
//  Комментарий - Строка - комментарий ошибки.
//
Процедура ЗаписатьИнформацию(ИмяСобытия, ЗаголовокКомментария, Комментарий)
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ЗаголовокКомментария + Комментарий);

КонецПроцедуры

// Заголовок комментария для ЖР.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - идентификатор поставщика.
//  ИдентификаторУслуги - Строка - идентификатор услуги.
//  ИдентификаторЛицензии - Строка - идентификатор лицензии.
//  КоличествоЛицензий - Число - количество занимаемых лицензий.
//  ИдентификаторОперации  - Строка - идентификатор операции.
//  КодОбластиДанных - Число - код области данных.
//
// Возвращаемое значение:
//  строка - заголовок комментария.
//
Функция ЗаголовокКомментария(ИдентификаторПоставщика, ИдентификаторУслуги, ИдентификаторЛицензии = Неопределено, 
	КоличествоЛицензий = 1, ИдентификаторОперации = Неопределено, КодОбластиДанных = Неопределено, КонтекстЛицензии = "")
	
	Шаблон = НСтр("ru = 'Идентификатор поставщика: %1
                                              |Идентификатор услуги: %2
                                              |Идентификатор лицензии: %3
                                              |Количество лицензий: %4
                                              |Идентификатор операции: %5
                                              |Код области данных: %6
                                              |Контекст лицензии: %7'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИдентификаторПоставщика, ИдентификаторУслуги,
		ИдентификаторЛицензии, КоличествоЛицензий, ИдентификаторОперации, КодОбластиДанных, КонтекстЛицензии);
	
КонецФункции

#КонецОбласти

// Возвращает структуру ответа занятия услуги со значениями по умолчанию.
//
// Возвращаемое значение:
//  Структура - структура ответа.
//
Функция ОтветЗанятияЛицензий()
	
	Ответ = Новый Структура;
	Ответ.Вставить("Результат", Ложь);
	Ответ.Вставить("ДоступноЛицензий", 0);
	Ответ.Вставить("ЗанятоЛицензий", 0);
	Ответ.Вставить("СвободноЛицензий", 0);
	
	Возврат Ответ;
	
КонецФункции

// Заполняет структуру ответа занятия лицензии.
//
// Параметры:
//  Ответ - Структура - структуру ответа занятия лицензии (см. ОтветЗанятияЛицензий()).
//  СтруктураОтветаHTTP - Соответствие - структура ответа HTTP-запроса.
//
Процедура СформироватьОтветЗанятияЛицензий(Ответ, СтруктураОтветаHTTP)
	
	Ответ.Результат = СтруктураОтветаHTTP.LicenseTaked;
	Ответ.ДоступноЛицензий = СтруктураОтветаHTTP.AvailableLicenses;
	Ответ.ЗанятоЛицензий = СтруктураОтветаHTTP.TakingLicenses;
	Ответ.СвободноЛицензий = ?(Ответ.ДоступноЛицензий = -1, -1, Ответ.ДоступноЛицензий - Ответ.ЗанятоЛицензий);
	
КонецПроцедуры

// Из HTTP-ответа получает структуру.
//
// Параметры:
//  ОтветСтрокой - Строка - ответ на HTTP-запрос.
//
// Возвращаемое значение:
//  Структура - структура из JSON.
//
Функция СтруктураОтветаHTTP(ОтветСтрокой)
	
	// Определение тела ответа на запрос.
	Если ПустаяСтрока(ОтветСтрокой) Тогда
		ВызватьИсключение(НСтр("ru = 'Пустое тело ответа системы тарификации'"));
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON.Закрыть();
	
	Возврат Данные;
	
КонецФункции

// Возвращает параметры (URL, логи и пароль) подключения к HTTP-сервису тарификации (в Менеджере сервиса).
//
// Возвращаемое значение:
//  Структура - параметры подключения.
//
Функция ПараметрыПодключенияКHTTPСервисуТарификацииДляПриложений()
	
	УстановитьПривилегированныйРежим(Истина);
	МодульРаботаВМоделиСервиса = ИнтеграцияПодсистемБТС.ОбщийМодуль("РаботаВМоделиСервиса");
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL", РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса()+ "/hs/ApplicationTariffControl_1_0_1_3");
	ПараметрыПодключения.Вставить("Login", МодульРаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса());
	ПараметрыПодключения.Вставить("Password", МодульРаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса());
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// Выполняет запрос к HTTP-запросу.
//
// Параметры:
//  ПараметрыПодключения - Структура - URL, логин и пароль подключения к HTTP-сервису.
//  ШаблонURL - Строка - шаблон URL.
//  Метод - Строка - метод HTTP-запроса.
//  ПараметрыЗапроса - Структура - параметры запроса.
//
// Возвращаемое значение:
//  HTTPОтвет - ответ на HTTP-запрос.
//
Функция ПолучитьОтветОтHTTPСервиса(ПараметрыПодключения, ШаблонURL, Метод, ПараметрыЗапроса)
	
	ПараметрыПодключения.URL = ПараметрыПодключения.URL + ШаблонURL;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыПодключения.URL );
	ЗащищенноеСоединение = ?(ВРег(СтруктураURI.Схема) = "HTTPS", ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС), Неопределено);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, ПараметрыПодключения.Login, ПараметрыПодключения.Password, , 10, ЗащищенноеСоединение);
	
	URLМетода = URLЗапроса(СтруктураURI.ПутьНаСервере, ПараметрыЗапроса);
	Возврат HTTPСоединение.ВызватьHTTPМетод(Метод, Новый HTTPЗапрос(URLМетода));
	
КонецФункции

// Возвращает URL запроса.
//
// Параметры:
//  ПутьНаСервере - Строка - URL на веб-сервере.
//  ПараметрыЗапроса - Структура - параметры для запроса.
//
// Возвращаемое значение:
//  Строка - URL запроса.
//
Функция URLЗапроса(ПутьНаСервере, ПараметрыЗапроса)
	
	ШаблонURLМетода = ПутьНаСервере;
	
	Префикс = "?";
	Для Каждого КлючЗначение Из ПараметрыЗапроса Цикл
		
		ШаблонURLМетода = ШаблонURLМетода + Префикс + КлючЗначение.Ключ + "=" + КлючЗначение.Значение;
		Префикс = "&";
		
	КонецЦикла;
	
	Возврат ШаблонURLМетода;
	
КонецФункции

// Возвращает параметры запроса для лицензии уникальной услуги.
//
// Параметры:
//  ИдентификаторПоставщикаУслуги - Строка - идентификатор поставщика услуги.
//  ИдентификаторУслуги - Строка - идентификатор услуги.
//  ИдентификаторЛицензии - Строка - идентификатор лицензии.
//  Пользователь - СправочникСсылка.Пользователи - пользователь.
//
// Возвращаемое значение:
//  Структура - параметры запроса.
//
Функция ПараметрыЗапросаЛицензииУникальнойУслуги(ИдентификаторПоставщикаУслуги, ИдентификаторУслуги, Пользователь, ИдентификаторЛицензии = Неопределено, 
	ИдентификаторОперации = Неопределено, УдалитьЛицензиюВоВсехОбластяхДанных = Неопределено, КонтекстЛицензии = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Zone", Строка(Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧН=0; ЧГ=0")));
	ПараметрыЗапроса.Вставить("ZoneKey", Строка(Константы.КлючОбластиДанных.Получить()));
	ПараметрыЗапроса.Вставить("UserID", Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяСервиса")));
	ПараметрыЗапроса.Вставить("ServiceProviderID", ИдентификаторПоставщикаУслуги);
	ПараметрыЗапроса.Вставить("ServiceID", Строка(ИдентификаторУслуги));
	ПараметрыЗапроса.Вставить("LicenseContext", КонтекстЛицензии);
	Если ИдентификаторЛицензии <> Неопределено Тогда 
		ПараметрыЗапроса.Вставить("LicenseID", Строка(ИдентификаторЛицензии));
	КонецЕсли;
	Если ИдентификаторОперации <> Неопределено Тогда 
		ПараметрыЗапроса.Вставить("OperationID", Строка(ИдентификаторОперации));
	КонецЕсли;
	Если УдалитьЛицензиюВоВсехОбластяхДанных <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("DeleteInAllZones", XMLСтрока(УдалитьЛицензиюВоВсехОбластяхДанных));
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Устанавливает исключительную блокировку по занятым лицензии услуги.
//
// Параметры:
//  Услуга - СправочникСсылка.УслугиСервиса - услуга.
//  ЗначениеРазделителя - Число - значение разделителя.
//
Процедура ЗаблокироватьЗанятыеЛицензии(Знач Услуга, ЗначениеРазделителя)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЗанятыеЛицензии");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ОбластьДанныхВспомогательныеДанные", ЗначениеРазделителя);
	ЭлементБлокировки.УстановитьЗначение("Услуга", Услуга);
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

// Возвращает: есть ли доступные лицензии определенной услуги.
//
// Параметры:
//  Услуга - СправочникСсылка.УслугиСервиса - услуга.
//  КоличествоЗанимаемыхЛицензий - Число - количество занимаемых лицензий.
//  ЗначениеРазделителя - Число - значение разделителя.
//
// Возвращаемое значение:
//  Структура - ответ занятия лицензий (см. ОтветЗанятияЛицензий())
Функция ЕстьДоступныеЛицензии(Услуга, КоличествоЗанимаемыхЛицензий, ЗначениеРазделителя)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ДоступныеЛицензии.КоличествоЛицензий), 0) КАК КоличествоНеограниченныхЛицензий,
		|	0 КАК ДоступноЛицензий,
		|	0 КАК ЗанятоЛицензий
		|ПОМЕСТИТЬ ЛицензииОбластиДанных
		|ИЗ
		|	РегистрСведений.ДоступныеЛицензии КАК ДоступныеЛицензии
		|ГДЕ
		|	ДоступныеЛицензии.Услуга = &Услуга
		|	И ДоступныеЛицензии.КоличествоЛицензий = -1
		|	И ДоступныеЛицензии.ОбластьДанныхВспомогательныеДанные = &ЗначениеРазделителя
		|	И &ТекущаяДата МЕЖДУ ДоступныеЛицензии.ДатаНачалаДействия И ДоступныеЛицензии.ДатаОкончанияДействия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ЕСТЬNULL(СУММА(ДоступныеЛицензии.КоличествоЛицензий), 0),
		|	0
		|ИЗ
		|	РегистрСведений.ДоступныеЛицензии КАК ДоступныеЛицензии
		|ГДЕ
		|	ДоступныеЛицензии.Услуга = &Услуга
		|	И ДоступныеЛицензии.КоличествоЛицензий <> -1
		|	И ДоступныеЛицензии.ОбластьДанныхВспомогательныеДанные = &ЗначениеРазделителя
		|	И &ТекущаяДата МЕЖДУ ДоступныеЛицензии.ДатаНачалаДействия И ДоступныеЛицензии.ДатаОкончанияДействия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	ЕСТЬNULL(СУММА(ЗанятыеЛицензии.КоличествоЛицензий), 0)
		|ИЗ
		|	РегистрСведений.ЗанятыеЛицензии КАК ЗанятыеЛицензии
		|ГДЕ
		|	ЗанятыеЛицензии.Услуга = &Услуга
		|	И ЗанятыеЛицензии.ОбластьДанныхВспомогательныеДанные = &ЗначениеРазделителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|			КОГДА СУММА(ЛицензииОбластиДанных.КоличествоНеограниченныхЛицензий) < 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|		ИЛИ ВЫБОР
		|			КОГДА СУММА(ЛицензииОбластиДанных.ДоступноЛицензий) - СУММА(ЛицензииОбластиДанных.ЗанятоЛицензий) >= &КоличествоЗанимаемыхЛицензий
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА СУММА(ЛицензииОбластиДанных.КоличествоНеограниченныхЛицензий) < 0
		|			ТОГДА -1
		|		ИНАЧЕ СУММА(ЛицензииОбластиДанных.ДоступноЛицензий)
		|	КОНЕЦ КАК ДоступноЛицензий,
		|	СУММА(ЛицензииОбластиДанных.ЗанятоЛицензий) КАК ЗанятоЛицензий
		|ИЗ
		|	ЛицензииОбластиДанных КАК ЛицензииОбластиДанных");
	Запрос.УстановитьПараметр("Услуга", Услуга);
	Запрос.УстановитьПараметр("КоличествоЗанимаемыхЛицензий", КоличествоЗанимаемыхЛицензий);
	Запрос.УстановитьПараметр("ЗначениеРазделителя", ЗначениеРазделителя);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяУниверсальнаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Ответ = ОтветЗанятияЛицензий();
	ЗаполнитьЗначенияСвойств(Ответ, Выборка);
	Ответ.СвободноЛицензий = ?(Ответ.ДоступноЛицензий = -1, -1, Ответ.ДоступноЛицензий - Ответ.ЗанятоЛицензий);
	
	Возврат Ответ;
	
КонецФункции

// Обновляет количество занятых лицензий в РС "ЗанятыеЛицензии".
//
// Параметры:
//  Услуга - СправочникСсылка.УслугиСервиса - услуга.
//  КоличествоЗанимаемыхЛицензий - Число - количество занимаемых лицензий.
//
Процедура ОбновитьКоличествоЗанятыхЛицензий(Услуга, КоличествоЗанимаемыхЛицензий, ЗначениеРазделителя)
	
	Запись = РегистрыСведений.ЗанятыеЛицензии.СоздатьМенеджерЗаписи();
	Запись.Услуга = Услуга;
	Запись.ОбластьДанныхВспомогательныеДанные = ЗначениеРазделителя;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда 
		Запись.КоличествоЛицензий = Запись.КоличествоЛицензий + КоличествоЗанимаемыхЛицензий;
	Иначе
		Запись.Услуга = Услуга;
		Запись.ОбластьДанныхВспомогательныеДанные = ЗначениеРазделителя;
		Запись.КоличествоЛицензий = КоличествоЗанимаемыхЛицензий;
	КонецЕсли;
	
	Запись.ДатаИзменения = ТекущаяДатаСеанса();
	
	Если Запись.КоличествоЛицензий <= 0 Тогда
		Запись.Удалить();
	Иначе
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение разделителя, по которому будут получаться данные.
//
// Параметры:
//  КодОбластиДанных - Число - код области данных.
//
// Возвращаемое значение:
//  Число - значение разделителя.
//
Функция ЗначениеРазделителя(КодОбластиДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ИнтеграцияПодсистемБТС.ИспользованиеРазделителяСеанса() Тогда
		Возврат ИнтеграцияПодсистемБТС.ЗначениеРазделителяСеанса();
	Иначе
		Если Не ЗначениеЗаполнено(КодОбластиДанных) Тогда
			ВызватьИсключение НСтр("ru = 'Для получения данных в неразделенном сеансе не указан код области данных'", КодЯзыка());
		Иначе
			Возврат КодОбластиДанных;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Устанавливает разделитель сеанса.
//
// Параметры:
//  КодОбластиДанных - Число - код области данных.
//
Процедура УстановитьРазделительСеанса(КодОбластиДанных)
	
	Если КодОбластиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияПодсистемБТС.ИспользованиеРазделителяСеанса() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияПодсистемБТС.УстановитьРазделениеСеанса(Истина, КодОбластиДанных);
	
КонецПроцедуры

// Сбрасывает разделитель сеанса.
//
// Параметры:
//  КодОбластиДанных - Число - код области данных.
//
Процедура СнятьРазделительСеанса(КодОбластиДанных)
	
	Если КодОбластиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияПодсистемБТС.ИспользованиеРазделителяСеанса() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияПодсистемБТС.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

// Возвращает: тарифицируется ли лимитированная услуга в сервисе.
//
// Параметры:
//  Услуга - СправочникСсылка.УслугиСервиса - услуга.
//
// Возвращаемое значение:
//  Булево - Истина, если тарифицируется, Ложь - иначе.
//
Функция ЛимитированнаяУслугаТарифицируется(Услуга)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Услуга, "Тарифицируется");
	
КонецФункции

// Изменяет занятые лицензии.
//
Процедура ИзменитьЗанятыеЛицензии(СтруктураЗанятыхЛицензий)
	
	Если Не СтруктураЗанятыхЛицензий.Свойство("content") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТелоСообщения Из СтруктураЗанятыхЛицензий.content Цикл
		
		Сообщение = СообщенияВМоделиСервиса.ПрочитатьСообщениеИзНетипизированногоТела(ТелоСообщения);
		КаналСообщений = СообщенияВМоделиСервиса.ИмяКаналаПоТипуСообщения(Сообщение.Body.Тип());
		
		Обработчик = ПолучитьОбработчикКаналаСообщенийСервиса(КаналСообщений);
		Если Обработчик <> Неопределено Тогда
			СообщениеОбработано = Ложь;
			Обработчик.ОбработатьСообщениеМоделиСервиса(Сообщение, Неопределено, СообщениеОбработано);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбработчикКаналаСообщенийСервиса(КаналСообщений)
	
	ОбработчикиИнтерфейсов = ИнтерфейсыСообщенийВМоделиСервиса.ПолучитьОбработчикиИнтерфейсовПринимаемыхСообщений();
	
	Для Каждого ОбработчикИнтерфейса Из ОбработчикиИнтерфейсов Цикл
		
		ОбработчикиКаналовИнтерфейса  = Новый Массив();
		ОбработчикИнтерфейса.ОбработчикиКаналовСообщений(ОбработчикиКаналовИнтерфейса);
		
		Для Каждого ОбработчикКаналаИнтерфейса Из ОбработчикиКаналовИнтерфейса Цикл
			
			Пакет = ОбработчикКаналаИнтерфейса.Пакет();
			БазовыйТип = ОбработчикКаналаИнтерфейса.БазовыйТип();
			
			ИменаКаналов = ИнтерфейсыСообщенийВМоделиСервиса.ПолучитьКаналыПакета(Пакет, БазовыйТип);
			
			Для Каждого ИмяКанала Из ИменаКаналов Цикл
				Если ИмяКанала = КаналСообщений Тогда
					
					Возврат ОбработчикКаналаИнтерфейса;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции


// Возвращает: код языка.
//
// Возвращаемое значение:
//  Строка - код языка.
//
Функция КодЯзыка()
	
	Возврат ОбщегоНазначения.КодОсновногоЯзыка();
	
КонецФункции

#КонецОбласти