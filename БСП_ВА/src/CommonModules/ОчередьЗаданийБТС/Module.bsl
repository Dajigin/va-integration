#Область СлужебныйПрограммныйИнтерфейс

// Регламентное задание ОбработкаОчередиЗаданийБТС.
//
// Параметры:
//   ПараметрыЗадания - СправочникСсылка.ДополнительныеОбработчикиОчередиЗаданий
//
Процедура ОбработкаОчередиЗаданий(ПараметрыЗадания) Экспорт
	
	ДатаЗавершения = ТекущаяУниверсальнаяДата() + ПараметрыЗадания.ДлительностьЗадания;
	
	Если ПараметрыЗадания.КоличествоЗаданий = 1 Тогда
		ТекстЗапроса = ТекстЗапросаЗаданияВОчереди();
		ОбработатьОчередьЗаданий(ПараметрыЗадания, ДатаЗавершения, ТекстЗапроса);
	Иначе
		ТекстЗапроса = ТекстЗапросаКоличествоЗаданийВОчереди();
		ЗапуститьФоновыеЗадания(ПараметрыЗадания, ТекстЗапроса);
	КонецЕсли;
	
	ЭтоЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	Если ЭтоЗадание = Неопределено Или ПараметрыЗадания.ДлительностьЗадания = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗадание.РегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодОжидания = ЭтоЗадание.РегламентноеЗадание.Расписание.ПериодПовтораВТечениеДня;
	Если ПериодОжидания = 0 Или ПериодОжидания > 20 Тогда
		Возврат;
	КонецЕсли;
	
	Пока ДатаЗавершения > ТекущаяУниверсальнаяДата() Цикл
		
		ЭтоЗадание.ОжидатьЗавершенияВыполнения(ПериодОжидания);
		
		Если ПараметрыЗадания.КоличествоЗаданий = 1 Тогда
			ОбработатьОчередьЗаданий(ПараметрыЗадания, ДатаЗавершения, ТекстЗапроса);
		Иначе
			ЗапуститьФоновыеЗадания(ПараметрыЗадания, ТекстЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает очередь заданий.
//
// Параметры:
//   ПараметрыЗадания - СправочникСсылка.ДополнительныеОбработчикиОчередиЗаданий
//   ДатаЗавершения - Дата - дата завершения
//   ТекстЗапроса - Строка - текст запроса
//
Процедура ОбработатьОчередьЗаданий(ПараметрыЗадания, ДатаЗавершения = Неопределено, ТекстЗапроса = Неопределено) Экспорт
	
	ИсполняющееФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	
	Если ДатаЗавершения = Неопределено Тогда
		ДатаЗавершения = ТекущаяУниверсальнаяДата() + ПараметрыЗадания.ДлительностьЗадания;
	КонецЕсли;
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = ТекстЗапросаЗаданияВОчереди();
	КонецЕсли;
	
	РазмерВыборкиТекст = Формат(ПараметрыЗадания.КоличествоЗаданий * 3, "ЧН=; ЧГ=");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "111", РазмерВыборкиТекст);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Методы", ПараметрыЗадания.Методы.ВыгрузитьКолонку("Метод"));
	Запрос.УстановитьПараметр("Задания", Истина);
	Запрос.Текст = ТекстЗапроса;
	
	МассивЗаданийИсключений = Новый Массив;
	
	БлокировкаУстановлена = Неопределено;
	// Цикл должен выполниться хотя бы один раз.
	Пока БлокировкаУстановлена = Неопределено Или ТекущаяУниверсальнаяДата() < ДатаЗавершения Цикл
		
		Если МассивЗаданийИсключений.Количество() <> 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Задания", "НЕ ВложенныйЗапрос.Ссылка В (&Задания)");
			Запрос.УстановитьПараметр("Задания", МассивЗаданийИсключений);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		Выборка = РаботаВМоделиСервиса.ВыполнитьЗапросВнеТранзакции(Запрос).Выбрать();
		
		БлокировкаУстановлена = Ложь;
		Пока Выборка.Следующий() Цикл 
			Попытка
				
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				
				// Проверка блокировки области.
				Если Выборка.ОбластьДанных <> -1 
					И РаботаВМоделиСервиса.ОбластьДанныхЗаблокирована(Выборка.ОбластьДанных) Тогда
					
					РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
					
					// Область заблокирована, перейти к следующей записи.
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Шаблон) И Выборка.СсылкаШаблона = Неопределено Тогда
					
					ШаблонСообщения = НСтр("ru = 'На найден шаблон задания очереди с идентификатором %1'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Шаблон);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь заданий.Выполнение'", 
						ОбщегоНазначения.КодОсновногоЯзыка()), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ТекстСообщения);
					
					РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
					Продолжить;
				КонецЕсли;
				
				БлокировкаУстановлена = Истина;
				Прервать;
			Исключение
				// Не удалось установить блокировку.
				БлокировкаУстановлена = Ложь;
			КонецПопытки;
		КонецЦикла;
		
		Если Не БлокировкаУстановлена Тогда
			Возврат;
		КонецЕсли;
		
		Расписание = Выборка.Расписание.Получить();
		Если Расписание <> Неопределено Тогда
			// Проверка попадания в допустимые интервалы очереди.
			ЧасовойПояс = Выборка.ЧасовойПояс;
			
			Если ПустаяСтрока(ЧасовойПояс) Тогда
				ЧасовойПояс = Неопределено;
			КонецЕсли;
			
			ВремяОбласти = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
			Просрочено = Не Расписание.ТребуетсяВыполнение(ВремяОбласти);
		Иначе
			Просрочено = Ложь;
		КонецЕсли;
		
		Если Просрочено Тогда
			
			// Требуется перепланировать задание.
			
			Задание = Выборка.Ссылка.ПолучитьОбъект();
			Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеЗапланировано;
			
			ЗапланироватьЗадание(Задание, 
				Выборка.Расписание.Получить(), 
				Выборка.КоличествоПовторовПриАварийномЗавершении, 
				Выборка.ИнтервалПовтораПриАварийномЗавершении, 
				Выборка.ЧасовойПояс);
				
		Иначе
			
			Если Выборка.ВыполнятьЧерезРегламентноеЗадание Тогда		
				ОчередьЗаданийСлужебный.СоздатьНовоеРегламетноеЗаданиеОбработки(Выборка.Ссылка);
				РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				
				МассивЗаданийИсключений.Добавить(Выборка.Ссылка);
				
				Если Выборка.ОжидатьЗавершенияВыполненияРегламентногоЗадания Тогда
					ОчередьЗаданийСлужебный.ОжидатьЗавершенияЗадания(Выборка.Идентификатор);
				КонецЕсли;
				
				Продолжить;
			Иначе
				ВыполнитьЗаданиеОчереди(Выборка.Ссылка, ИсполняющееФоновоеЗадание, Выборка.Шаблон, Выборка.ИмяМетода);
			КонецЕсли;
			
			ЗапланироватьЗадание(Выборка.Ссылка.ПолучитьОбъект(), 
				Выборка.Расписание.Получить(), 
				Выборка.КоличествоПовторовПриАварийномЗавершении, 
				Выборка.ИнтервалПовтораПриАварийномЗавершении, 
				Выборка.ЧасовойПояс);
			
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает список обработчиков сообщений, которые обрабатывают подсистемы библиотеки.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений.
// 
Процедура ПриОпределенииОбработчиковКаналовСообщений(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Канал = "ОчередьЗаданийБТС\ОбновлениеНастроек";
	Обработчик.Обработчик = ОчередьЗаданийБТС;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Канал = "ОчередьЗаданийБТС\ПолучениеНастроек";
	Обработчик.Обработчик = ОчередьЗаданийБТС;
	
КонецПроцедуры

// Выполняет обработку тела сообщения из канала в соответствии с алгоритмом текущего канала сообщений.
//
// Параметры:
//  КаналСообщений - Строка - идентификатор канала сообщений, из которого получено сообщение.
//  ТелоСообщения - Произвольный - тело сообщения, полученное из канала, которое подлежит обработке.
//  Отправитель - ПланОбменаСсылка.ОбменСообщениями - конечная точка, которая является отправителем сообщения.
//
Процедура ОбработатьСообщение(Знач КаналСообщений, Знач ТелоСообщения, Знач Отправитель) Экспорт
	
	Если КаналСообщений = "ОчередьЗаданийБТС\ОбновлениеНастроек" Тогда
		ОбновлениеНастроек(ТелоСообщения);
	ИначеЕсли КаналСообщений = "ОчередьЗаданийБТС\ПолучениеНастроек" Тогда
		ОтправкаНастроек(ТелоСообщения, Отправитель);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает возможные методы, которые обрабатываются очередью заданий.
//
// Возвращаемое значение:
//   Массив - массив имен методов.
//
Функция ВозможныеМетоды() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныЗаданийОчереди.ИмяМетода КАК ИмяМетода
	|ИЗ
	|	Справочник.ШаблоныЗаданийОчереди КАК ШаблоныЗаданийОчереди
	|ГДЕ
	|	НЕ ШаблоныЗаданийОчереди.ПометкаУдаления";
	Методы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Для Каждого КлючИЗначение Из ОчередьЗаданийСлужебныйПовтИсп.СоответствиеИменМетодовПсевдонимам() Цикл
		Если Методы.Найти(КлючИЗначение.Значение) = Неопределено Тогда
			Методы.Добавить(КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Методы);
	Список.СортироватьПоЗначению();
	Методы = Список.ВыгрузитьЗначения();
	
	Возврат Методы;
	
КонецФункции

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов.
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.0.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ОчередьЗаданийБТС", МассивВерсий);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Планирует задание и сохраняет результат.
//
// Параметры:
//   Задание - СправочникОбъект.ОчередьЗаданий, СправочникОбъект.ОчередьЗаданийОбластейДанных
//   Расписание - РасписаниеРегламентногоЗадания 
//   КоличествоПовторовПриАварийномЗавершении - Число
//   ИнтервалПовтораПриАварийномЗавершении - Число
//   ЧасовойПояс - Строка
//
Процедура ЗапланироватьЗадание(Задание, Расписание, КоличествоПовторовПриАварийномЗавершении, ИнтервалПовтораПриАварийномЗавершении, ЧасовойПояс)
	
	Если Задание = Неопределено Или Задание.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗаданиеОбласти = РаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация() И РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(Задание.Метаданные().ПолноеИмя(), РаботаВМоделиСервиса.РазделительВспомогательныхДанных());
	
	Если ЭтоЗаданиеОбласти Тогда
		
		Попытка
		
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, Задание.ОбластьДанныхВспомогательныеДанные);
		
		Исключение
			
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			
			ШаблонСообщения = НСтр("ru = 'Задание очереди с именем метода %1 в области %2 не запланировано по причине:
				|%3'");
				
			Если ЭтоЗаданиеОбласти И ЗначениеЗаполнено(Задание.Шаблон) Тогда
				ИмяМетода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание.Шаблон, "ИмяМетода");
			Иначе
				ИмяМетода = Задание.ИмяМетода;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяМетода, Задание.ОбластьДанныхВспомогательныеДанные, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
			    НСтр("ru = 'Очередь заданий.Планирование'",
			    ОбщегоНазначения.КодОсновногоЯзыка()), 
			    УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Задание.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задание.Ссылка);
		Блокировка.Заблокировать();
		
		Если Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.ОшибкаВыполнения
			И Задание.НомерПопытки < КоличествоПовторовПриАварийномЗавершении Тогда // Попытка повторного запуска
			
			Если ЗначениеЗаполнено(Задание.ДатаЗавершенияПоследнегоЗапуска) Тогда
				ТочкаОтсчетаПерезапуска = Задание.ДатаЗавершенияПоследнегоЗапуска;
			Иначе
				ТочкаОтсчетаПерезапуска = Задание.ДатаНачалаПоследнегоЗапуска;
			КонецЕсли;
			
			Задание.ЗапланированныйМоментЗапуска = ТочкаОтсчетаПерезапуска + ИнтервалПовтораПриАварийномЗавершении;
			Задание.НомерПопытки                 = Задание.НомерПопытки + 1;
			Задание.СостояниеЗадания             = Перечисления.СостоянияЗаданий.Запланировано;
			Задание.ИсполняющееФоновоеЗадание    = Неопределено;
			РаботаВМоделиСервиса.ЗаписатьВспомогательныеДанные(Задание);
			
		// Задание не было выполнено, запланируем обработчик ошибки.
		ИначеЕсли Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется Тогда
			
			ЗаписьКонтроляВыполнения(НСтр("ru = 'Очередь регламентных заданий.Завершено с ошибками'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), Задание.Ссылка, 
				НСтр("ru = 'Исполняющее задание было принудительно завершено'"));
				
			// Запланируем разовое задание для выполнения обработчика ошибок.
			ПараметрыОбработчика = ПолучитьПараметрыОбработчикаОшибок(Задание);
			Если ПараметрыОбработчика.ОбработчикСуществует Тогда
				
				НовоеЗадание = Справочники[Задание.Метаданные().Имя].СоздатьЭлемент();
				НовоеЗадание.ЗапланированныйМоментЗапуска = ТекущаяУниверсальнаяДата();
				НовоеЗадание.Использование = Истина;
				НовоеЗадание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
				ПараметрыВызова = Новый Массив;
				ПараметрыВызова.Добавить(Задание.Ссылка);
				НовоеЗадание.Параметры = Новый ХранилищеЗначения(ПараметрыВызова);
				НовоеЗадание.ИмяМетода = "ОчередьЗаданийСлужебный.ОбработатьОшибку";
				Если РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(Задание.Метаданные(),"ОбластьДанныхВспомогательныеДанные") Тогда
					НовоеЗадание.ОбластьДанныхВспомогательныеДанные = Задание.ОбластьДанныхВспомогательныеДанные;
				КонецЕсли;
				РаботаВМоделиСервиса.ЗаписатьВспомогательныеДанные(НовоеЗадание);
				
				// Останавливаем выполнение задания пока не будет выполнен обработчик ошибок.
				Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.ОбработкаОшибкиПриАварийномЗавершении;
				
			Иначе
				
				Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
				
			КонецЕсли;
			
				РаботаВМоделиСервиса.ЗаписатьВспомогательныеДанные(Задание);
			
		ИначеЕсли Расписание = Неопределено 
			ИЛИ (Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Завершено 
				И Расписание.ПериодПовтораДней = 0 
				И Расписание.ПериодПовтораВТечениеДня = 0) Тогда
				
			Если ЭтоЗаданиеОбласти Тогда
				Если Расписание = Неопределено И ЗначениеЗаполнено(Задание.Шаблон) Тогда // Задание по шаблону без расписания.
					
					ШаблонСообщения = НСтр("ru = 'Для шаблон заданий очереди  %1 не найдено расписание'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Задание.Шаблон);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь заданий.Планирование'", 
						ОбщегоНазначения.КодОсновногоЯзыка()), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ТекстСообщения);
					
					РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
					ОтменитьТранзакцию();
					Возврат;
					
				КонецЕсли;
			КонецЕсли;
			
			// Разовое задание
			Задание.ОбменДанными.Загрузка = Истина;
			Задание.Удалить();
			
		Иначе
				
			Задание.ЗапланированныйМоментЗапуска = ОчередьЗаданийСлужебный.ПолучитьЗапланированныйМоментЗапускаЗадания(
				Расписание, ЧасовойПояс, Задание.ДатаНачалаПоследнегоЗапуска, Задание.ДатаЗавершенияПоследнегоЗапуска);
			Задание.НомерПопытки = 0;
			Если ЗначениеЗаполнено(Задание.ЗапланированныйМоментЗапуска) Тогда
				Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
			Иначе
				Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеАктивно;
			КонецЕсли;
			Задание.ИсполняющееФоновоеЗадание = Неопределено;
			РаботаВМоделиСервиса.ЗаписатьВспомогательныеДанные(Задание);
			
		КонецЕсли;
		
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		ЗафиксироватьТранзакцию();
		
	Исключение

		ОтменитьТранзакцию();
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		
		ШаблонСообщения = НСтр("ru = 'Задание очереди с именем метода %1 не запланировано по причине:
			|%2'");
			
		Если ЭтоЗаданиеОбласти И ЗначениеЗаполнено(Задание.Шаблон) Тогда
			ИмяМетода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание.Шаблон, "ИмяМетода");
		Иначе
			ИмяМетода = Задание.ИмяМетода;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяМетода, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
		    НСтр("ru = 'Очередь заданий.Планирование'",
		    ОбщегоНазначения.КодОсновногоЯзыка()), 
		    УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписьКонтроляВыполнения(Знач ИмяСобытия, Знач ЗаписьЗадания, Знач Комментарий = "")
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		
		Комментарий = Комментарий + Символы.ПС;
		
	КонецЕсли;
	
	Если ТипЗнч(ЗаписьЗадания) = Тип("СправочникСсылка.ОчередьЗаданий") Тогда
		
		ИмяМетода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьЗадания, "ИмяМетода");
		
	Иначе
		
		ОписаниеМетода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьЗадания, "ИмяМетода, Шаблон");
		
		Если ЗначениеЗаполнено(ОписаниеМетода.Шаблон) Тогда
			
			ИмяМетода = НСтр("ru = 'Шаблон:'") + ОписаниеМетода.Шаблон;
			
		Иначе
			
			ИмяМетода = ОписаниеМетода.ИмяМетода;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, ,
		Строка(ЗаписьЗадания.УникальныйИдентификатор()), Комментарий + ИмяМетода + ";"
			+ ?(РаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация() И РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ЗаписьЗадания.Метаданные().ПолноеИмя(),
				РаботаВМоделиСервиса.РазделительВспомогательныхДанных()),
				Формат(ЗаписьЗадания.ОбластьДанныхВспомогательныеДанные, "ЧН=0; ЧГ="), "-1"));
	
КонецПроцедуры

// Получает по ссылке на задание параметры для запуска обработчика ошибок.
//
// Параметры:
//  Задание  - СправочникСсылка.ОчередьЗаданий или СправочникСсылка.ОчередьЗаданийОбластейДанных - 
//             Ссылка на задание, по которой необходимо получить параметры обработчика ошибок.
//
// Возвращаемое значение:
//   Структура - Параметры для запуска обработчика ошибок.
//      ИмяМетода - Строка, имя метода обработчика ошибок, который должен быть запущен.
//      ИмяМетодаЗадания - Строка, имя метода задания, который должен был выполниться,
//      ПараметрыВызоваОбработчика - массив с параметрами, которые будут переданы процедуре обработки ошибок.
//      ОбработчикСуществует - Булево, обработчик ошибок для данного задания существует.
//      Задание - СправочникСсылка.ОчередьЗаданий или СправочникСсылка.ОчередьЗаданийОбластейДанных -
//                Ссылка на задание, которое было передано как входящий параметр.
//
Функция ПолучитьПараметрыОбработчикаОшибок(Знач Задание,Знач ИнформацияОбОшибкеВыполненияЗадания = Неопределено)

	Результат = Новый Структура("ИмяМетода,ИмяМетодаЗадания,ПараметрыВызоваОбработчика,ОбработчикСуществует,Задание");
	Результат.Задание = Задание.Ссылка;
	
	Если РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(Задание.Метаданные().ПолноеИмя(), 
			РаботаВМоделиСервиса.РазделительВспомогательныхДанных()) 
		И ЗначениеЗаполнено(Задание.Шаблон) Тогда
		
		Результат.ИмяМетодаЗадания = Задание.Шаблон.ИмяМетода;
		
	Иначе
		
		Результат.ИмяМетодаЗадания = Задание.ИмяМетода;
		
	КонецЕсли;
	
	ИмяМетодаОбработчикаОшибки = 
		ОчередьЗаданийСлужебныйПовтИсп.СоответствиеОбработчиковОшибокПсевдонимам().Получить(ВРег(Результат.ИмяМетодаЗадания));
	Результат.ИмяМетода = ИмяМетодаОбработчикаОшибки;
	Результат.ОбработчикСуществует = ЗначениеЗаполнено(Результат.ИмяМетода);
	Если Результат.ОбработчикСуществует Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Параметры", Задание.Параметры.Получить());
		ПараметрыЗадания.Вставить("НомерПопытки", Задание.НомерПопытки);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", Задание.КоличествоПовторовПриАварийномЗавершении);
		ПараметрыЗадания.Вставить("ДатаНачалаПоследнегоЗапуска", Задание.ДатаНачалаПоследнегоЗапуска);
		
		Если ИнформацияОбОшибкеВыполненияЗадания = Неопределено Тогда
			
			ИсполняющееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Задание.ИсполняющееФоновоеЗадание);
			
			Если ИсполняющееФоновоеЗадание <> Неопределено И ИсполняющееФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
				
				ИнформацияОбОшибкеВыполненияЗадания = ИсполняющееФоновоеЗадание.ИнформацияОбОшибке;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИнформацияОбОшибкеВыполненияЗадания = Неопределено Тогда
			
			ИнформацияОбОшибкеВыполненияЗадания = КонструкторИнформацииОбОшибке(НСтр("ru = 'Задание завершилось с неизвестной ошибкой, возможно вызванной падением рабочего процесса.'"));
			
		КонецЕсли;
		
		ПараметрыВызоваОбработчика = Новый Массив;
		ПараметрыВызоваОбработчика.Добавить(ПараметрыЗадания);
		ПараметрыВызоваОбработчика.Добавить(ИнформацияОбОшибкеВыполненияЗадания);
		
		Результат.ПараметрыВызоваОбработчика = ПараметрыВызоваОбработчика;
	Иначе
		Результат.ПараметрыВызоваОбработчика = Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Формирует и возвращает информацию об ошибке по тексту ее описания.
Функция КонструкторИнформацииОбОшибке(ТекстОшибки)

	Попытка
			
		ВызватьИсключение ТекстОшибки;
			
	Исключение
		Информация = ИнформацияОбОшибке();
	КонецПопытки;
	
	Возврат Информация;

КонецФункции

Процедура ВыполнитьЗаданиеОчереди(Знач Ссылка, Знач ИсполняющееФоновоеЗадание, Знач Шаблон, Знач ИмяМетода)
	
	ОбластьДанных = Неопределено;
	Если РаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация() Тогда
		МодульОчередьЗаданийСлужебныйРазделениеДанных = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийСлужебныйРазделениеДанных");
		ПереопределеннаяОбластьДанных = МодульОчередьЗаданийСлужебныйРазделениеДанных.ОпределитьОбластьДанныхДляЗадания(Ссылка);
		Если ПереопределеннаяОбластьДанных <> Неопределено Тогда
			ОбластьДанных = ПереопределеннаяОбластьДанных;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластьДанных = Неопределено Тогда
		ОбластьДанных = -1;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбластьДанных <> -1 Тогда
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		Задание = Ссылка.ПолучитьОбъект();
		
		Если Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано
			И Задание.Использование
			И Задание.ЗапланированныйМоментЗапуска <= ТекущаяУниверсальнаяДата() Тогда 
			
			Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется;
			Задание.ИсполняющееФоновоеЗадание = ИсполняющееФоновоеЗадание.УникальныйИдентификатор;
			Задание.ДатаНачалаПоследнегоЗапуска = ТекущаяУниверсальнаяДата();
			Задание.ДатаЗавершенияПоследнегоЗапуска = Неопределено;
			РаботаВМоделиСервиса.ЗаписатьВспомогательныеДанные(Задание);
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			ЗафиксироватьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Выполнение задания
	ВыполненоУспешно = Ложь;
	ИнформацияОбОшибкеВыполненияЗадания = Неопределено;
	Попытка
		ЗаписьКонтроляВыполнения(НСтр("ru = 'Очередь регламентных заданий.Старт'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), Ссылка);
		
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ВыполнитьМетодКонфигурации(ИмяМетода);
		Иначе
			ВыполнитьОбработчикЗадания(Шаблон, ИмяМетода, Задание.Параметры.Получить());
		КонецЕсли;
		
		ВыполненоУспешно = Истина;
		
		ЗаписьКонтроляВыполнения(НСтр("ru = 'Очередь регламентных заданий.Завершено успешно'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), Ссылка);
		
	Исключение
			
		Пока ТранзакцияАктивна() Цикл
			
			ОтменитьТранзакцию();
			
		КонецЦикла;
		
		ШаблонКомментария =
			НСтр("ru = 'Не удалось выполнить обработчик %1 по причине:
			           |%2'");
		
		ИнформацияОбОшибкеВыполненияЗадания = ИнформацияОбОшибке();
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, ИмяМетода, ПодробноеПредставлениеОшибки(ИнформацияОбОшибкеВыполненияЗадания));
		
		ЗаписьКонтроляВыполнения(НСтр("ru = 'Очередь регламентных заданий.Завершено с ошибками'",
			ОбщегоНазначения.КодОсновногоЯзыка()), Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибкеВыполненияЗадания));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь регламентных заданий.Завершено с ошибками'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ИсполняющееФоновоеЗадание,
			ТекстСообщенияОбОшибке);
		
	КонецПопытки;
		
	Если Не ВыполненоУспешно Тогда
		
		// Вызов обработчиков ошибок
		ОчередьЗаданийСлужебный.ОбработатьОшибку(Ссылка, ИнформацияОбОшибкеВыполненияЗадания);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда // Иначе - задание могло быть удалено внутри обработчика.
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Блокировка.Заблокировать();
			
			Задание = Ссылка.ПолучитьОбъект();
			Задание.ДатаЗавершенияПоследнегоЗапуска = ТекущаяУниверсальнаяДата();
			
			Если ВыполненоУспешно Тогда
				Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Завершено;
			Иначе
				Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
			КонецЕсли;
			РаботаВМоделиСервиса.ЗаписатьВспомогательныеДанные(Задание);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		ВызватьИсключение;
		
	КонецПопытки;
	
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

// Метод предназначен для вызова методов обработчиков задания и ошибок.
//
// Параметры: 
// ИмяМетода - Строка - Имя вызываемого метода.
// Параметры - Массив - Значение параметров, передаваемых методу, в порядке
//                       их следования в вызываемом методе.
//
Процедура ВыполнитьМетодКонфигурации(ИмяМетода, Параметры = Неопределено)

	Если РаботаВМоделиСервиса.РазделениеВключено() И РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных() Тогда
		РазделительУстановлен = Истина;
		ЗначениеРазделителя = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	Иначе
		РазделительУстановлен = Ложь;
	КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Перед стартом выполнения обработчика %1 есть активные транзакции.'"),
				ИмяМетода);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь регламентных заданий.Выполнение'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщенияОбОшибке);
			
		ВызватьИсключение ТекстСообщенияОбОшибке;
		
	КонецЕсли;
	
	Попытка
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);
		
		Если ТранзакцияАктивна() Тогда
		
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
			
			ШаблонСообщения = НСтр("ru = 'По завершении выполнения обработчика %1 не была закрыта транзакция'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяМетода);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь регламентных заданий.Выполнение'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, 
				,
				, 
				ТекстСообщения);
			
		КонецЕсли;
		
		Если Не(РазделительУстановлен) И РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса() Тогда
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По завершении выполнения обработчика %1 не было выключено разделение сеанса.'"),
				ИмяМетода);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь регламентных заданий.Выполнение'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщенияОбОшибке);
			
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			
		ИначеЕсли РазделительУстановлен И ЗначениеРазделителя <> РаботаВМоделиСервиса.ЗначениеРазделителяСеанса() Тогда
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По завершении выполнения обработчика %1 было изменено значение разделителя сеанса.'"),
				ИмяМетода);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь регламентных заданий.Выполнение'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщенияОбОшибке);
			
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина,ЗначениеРазделителя);
			
		КонецЕсли;
		
	Исключение
		
		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;
		
		Если Не(РазделительУстановлен) И РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса() Тогда
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		ИначеЕсли РазделительУстановлен И ЗначениеРазделителя <> РаботаВМоделиСервиса.ЗначениеРазделителяСеанса() Тогда
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина,ЗначениеРазделителя);
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет обработчик задания созданного не на основе шаблона.
// 
// Параметры: 
// Псевдоним - Строка - псевдоним метода, который необходимо выполнить.
// Параметры - Массив - параметры передаются в ИмяМетода 
// в порядке расположения элементов массива.
// 
Процедура ВыполнитьОбработчикЗадания(Шаблон, Псевдоним, Параметры)
	
	ИмяМетода = ОчередьЗаданийСлужебныйПовтИсп.СоответствиеИменМетодовПсевдонимам().Получить(ВРег(Псевдоним));
	Если ИмяМетода = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Метод %1 не разрешен к вызову через очередь заданий.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Псевдоним);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ВыполнитьМетодКонфигурации(ИмяМетода,Параметры);
	
КонецПроцедуры

Функция ТекстЗапросаЗаданияВОчереди()
	
	ТекстЗапросаБлокировки = "";
	ТекстыЗапросовЗаданий = Новый Массив;
	
	Для Каждого СправочникЗаданий Из ОчередьЗаданийСлужебныйПовтИсп.ПолучитьСправочникиЗаданий() Цикл
		
		ПолноеИмяОбъекта = СправочникЗаданий.ПустаяСсылка().Метаданные().ПолноеИмя();
		
		Если РаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация() И РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ПолноеИмяОбъекта, РаботаВМоделиСервиса.РазделительВспомогательныхДанных()) Тогда
			
			Если ПустаяСтрока(ТекстЗапросаБлокировки) Тогда
				
				ТекстЗапросаБлокировки = 
				"ВЫБРАТЬ
				|	Блокировки.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные
				|ПОМЕСТИТЬ Блокировки
				|ИЗ
				|	РегистрСведений.БлокировкиСеансовОбластейДанных КАК Блокировки
				|ГДЕ
				|	(Блокировки.НачалоБлокировки = ДАТАВРЕМЯ(1, 1, 1)
				|			ИЛИ Блокировки.НачалоБлокировки <= &ТекущаяУниверсальнаяДата)
				|	И (Блокировки.КонецБлокировки = ДАТАВРЕМЯ(1, 1, 1)
				|			ИЛИ Блокировки.КонецБлокировки >= &ТекущаяУниверсальнаяДата)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
				
			КонецЕсли;
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Очередь.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
			|	Очередь.Ссылка КАК Ссылка,
			|	Очередь.ЗапланированныйМоментЗапуска КАК ЗапланированныйМоментЗапуска,
			|	Очередь.ЭксклюзивноеВыполнение КАК ЭксклюзивноеВыполнение,
			|	Очередь.ВыполнятьЧерезРегламентноеЗадание КАК ВыполнятьЧерезРегламентноеЗадание,
			|	Очередь.ОжидатьЗавершенияВыполненияРегламентногоЗадания КАК ОжидатьЗавершенияВыполненияРегламентногоЗадания,
			|	Очередь.НомерПопытки КАК НомерПопытки,
			|	Очередь.Шаблон КАК Шаблон,
			|	ЕСТЬNULL(Очередь.Шаблон.Ссылка, НЕОПРЕДЕЛЕНО) КАК СсылкаШаблона,
			|	ЕСТЬNULL(ЧасовыеПояса.Значение, """") КАК ЧасовойПояс,
			|	ВЫБОР
			|		КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|			ТОГДА Очередь.Расписание
			|		ИНАЧЕ Очередь.Шаблон.Расписание
			|	КОНЕЦ КАК Расписание,
			|	ВЫБОР
			|		КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|			ТОГДА Очередь.ИмяМетода
			|		ИНАЧЕ Очередь.Шаблон.ИмяМетода
			|	КОНЕЦ КАК ИмяМетода,
			|	ВЫБОР
			|		КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|			ТОГДА Очередь.КоличествоПовторовПриАварийномЗавершении
			|		ИНАЧЕ Очередь.Шаблон.КоличествоПовторовПриАварийномЗавершении
			|	КОНЕЦ КАК КоличествоПовторовПриАварийномЗавершении,
			|	ВЫБОР
			|		КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|			ТОГДА Очередь.ИнтервалПовтораПриАварийномЗавершении
			|		ИНАЧЕ Очередь.Шаблон.ИнтервалПовтораПриАварийномЗавершении
			|	КОНЕЦ КАК ИнтервалПовтораПриАварийномЗавершении,
			|	Очередь.Параметры КАК Параметры,
			|	Очередь.ДатаНачалаПоследнегоЗапуска КАК ДатаНачалаПоследнегоЗапуска,
			|	Очередь.ДатаЗавершенияПоследнегоЗапуска КАК ДатаЗавершенияПоследнегоЗапуска
			|ИЗ
			|	ТаблицаСправочникЗаданий КАК Очередь
			|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ЧасовойПоясОбластиДанных КАК ЧасовыеПояса
			|		ПО Очередь.ОбластьДанныхВспомогательныеДанные = ЧасовыеПояса.ОбластьДанныхВспомогательныеДанные
			|ГДЕ
			|	Очередь.Использование
			|	И Очередь.ЗапланированныйМоментЗапуска <= &ТекущаяУниверсальнаяДата
			|	И Очередь.СостояниеЗадания = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Запланировано)
			|	И Очередь.ЭксклюзивноеВыполнение
			|	И ВЫБОР
			|			КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|				ТОГДА Очередь.ИмяМетода
			|			ИНАЧЕ Очередь.Шаблон.ИмяМетода
			|		КОНЕЦ В (&Методы)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Очередь.ОбластьДанныхВспомогательныеДанные,
			|	Очередь.Ссылка,
			|	Очередь.ЗапланированныйМоментЗапуска,
			|	Очередь.ЭксклюзивноеВыполнение,
			|	Очередь.ВыполнятьЧерезРегламентноеЗадание,
			|	Очередь.ОжидатьЗавершенияВыполненияРегламентногоЗадания,
			|	Очередь.НомерПопытки,
			|	Очередь.Шаблон,
			|	ЕСТЬNULL(Очередь.Шаблон.Ссылка, НЕОПРЕДЕЛЕНО),
			|	ЕСТЬNULL(ЧасовыеПояса.Значение, """"),
			|	ВЫБОР
			|		КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|			ТОГДА Очередь.Расписание
			|		ИНАЧЕ Очередь.Шаблон.Расписание
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|			ТОГДА Очередь.ИмяМетода
			|		ИНАЧЕ Очередь.Шаблон.ИмяМетода
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|			ТОГДА Очередь.КоличествоПовторовПриАварийномЗавершении
			|		ИНАЧЕ Очередь.Шаблон.КоличествоПовторовПриАварийномЗавершении
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|			ТОГДА Очередь.ИнтервалПовтораПриАварийномЗавершении
			|		ИНАЧЕ Очередь.Шаблон.ИнтервалПовтораПриАварийномЗавершении
			|	КОНЕЦ,
			|	Очередь.Параметры,
			|	Очередь.ДатаНачалаПоследнегоЗапуска,
			|	Очередь.ДатаЗавершенияПоследнегоЗапуска
			|ИЗ
			|	ТаблицаСправочникЗаданий КАК Очередь
			|		ЛЕВОЕ СОЕДИНЕНИЕ Блокировки КАК Блокировки
			|		ПО Очередь.ОбластьДанныхВспомогательныеДанные = Блокировки.ОбластьДанныхВспомогательныеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ЧасовойПоясОбластиДанных КАК ЧасовыеПояса
			|		ПО Очередь.ОбластьДанныхВспомогательныеДанные = ЧасовыеПояса.ОбластьДанныхВспомогательныеДанные
			|ГДЕ
			|	Очередь.Использование
			|	И Очередь.ЗапланированныйМоментЗапуска <= &ТекущаяУниверсальнаяДата
			|	И Очередь.СостояниеЗадания = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Запланировано)
			|	И НЕ Очередь.ЭксклюзивноеВыполнение
			|	И Блокировки.ОбластьДанныхВспомогательныеДанные ЕСТЬ NULL
			|	И ВЫБОР
			|			КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|				ТОГДА Очередь.ИмяМетода
			|			ИНАЧЕ Очередь.Шаблон.ИмяМетода
			|		КОНЕЦ В (&Методы)";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	-1 КАК ОбластьДанных,
			|	Очередь.Ссылка КАК Ссылка,
			|	Очередь.ЗапланированныйМоментЗапуска КАК ЗапланированныйМоментЗапуска,
			|	Очередь.ЭксклюзивноеВыполнение КАК ЭксклюзивноеВыполнение,
			|	Очередь.ВыполнятьЧерезРегламентноеЗадание КАК ВыполнятьЧерезРегламентноеЗадание,
			|	Очередь.ОжидатьЗавершенияВыполненияРегламентногоЗадания КАК ОжидатьЗавершенияВыполненияРегламентногоЗадания,
			|	Очередь.НомерПопытки КАК НомерПопытки,
			|	НЕОПРЕДЕЛЕНО КАК Шаблон,
			|	НЕОПРЕДЕЛЕНО КАК СсылкаШаблона,
			|	"""" КАК ЧасовойПояс,
			|	Очередь.Расписание КАК Расписание,
			|	Очередь.ИмяМетода КАК ИмяМетода,
			|	Очередь.КоличествоПовторовПриАварийномЗавершении КАК КоличествоПовторовПриАварийномЗавершении,
			|	Очередь.ИнтервалПовтораПриАварийномЗавершении КАК ИнтервалПовтораПриАварийномЗавершении,
			|	Очередь.Параметры КАК Параметры,
			|	Очередь.ДатаНачалаПоследнегоЗапуска КАК ДатаНачалаПоследнегоЗапуска,
			|	Очередь.ДатаЗавершенияПоследнегоЗапуска КАК ДатаЗавершенияПоследнегоЗапуска
			|ИЗ ТаблицаСправочникЗаданий КАК Очередь
			|ГДЕ
			|	Очередь.Использование
			|	И Очередь.ЗапланированныйМоментЗапуска <= &ТекущаяУниверсальнаяДата
			|	И Очередь.СостояниеЗадания = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Запланировано)
			|	И Очередь.ИмяМетода В (&Методы)";
			
		КонецЕсли;
		
		ТекстыЗапросовЗаданий.Добавить(СтрЗаменить(ТекстЗапроса, "ТаблицаСправочникЗаданий", ПолноеИмяОбъекта));
		
	КонецЦикла;
	
	ТекстЗапросаЗаданий = СтрСоединить(ТекстыЗапросовЗаданий, Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	
	ТекстЗапроса = ТекстЗапросаБлокировки +
	"ВЫБРАТЬ ПЕРВЫЕ 111
	|	ВложенныйЗапрос.ОбластьДанных КАК ОбластьДанных,
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.ЗапланированныйМоментЗапуска КАК ЗапланированныйМоментЗапуска,
	|	ВложенныйЗапрос.ЭксклюзивноеВыполнение КАК ЭксклюзивноеВыполнение,
	|	ВложенныйЗапрос.ВыполнятьЧерезРегламентноеЗадание КАК ВыполнятьЧерезРегламентноеЗадание,
	|	ВложенныйЗапрос.ОжидатьЗавершенияВыполненияРегламентногоЗадания КАК ОжидатьЗавершенияВыполненияРегламентногоЗадания,
	|	ВложенныйЗапрос.НомерПопытки КАК НомерПопытки,
	|	ВложенныйЗапрос.Шаблон КАК Шаблон,
	|	ВложенныйЗапрос.СсылкаШаблона КАК СсылкаШаблона,
	|	ВложенныйЗапрос.ЧасовойПояс КАК ЧасовойПояс,
	|	ВложенныйЗапрос.Расписание КАК Расписание,
	|	ВложенныйЗапрос.ИмяМетода КАК ИмяМетода,
	|	ВложенныйЗапрос.КоличествоПовторовПриАварийномЗавершении КАК КоличествоПовторовПриАварийномЗавершении,
	|	ВложенныйЗапрос.ИнтервалПовтораПриАварийномЗавершении КАК ИнтервалПовтораПриАварийномЗавершении,
	|	ВложенныйЗапрос.Параметры КАК Параметры,
	|	ВложенныйЗапрос.ДатаНачалаПоследнегоЗапуска КАК ДатаНачалаПоследнегоЗапуска,
	|	ВложенныйЗапрос.ДатаЗавершенияПоследнегоЗапуска КАК ДатаЗавершенияПоследнегоЗапуска
	|ИЗ
	|	(" +  ТекстЗапросаЗаданий + ") КАК ВложенныйЗапрос
	|ГДЕ
	|	&Задания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭксклюзивноеВыполнение УБЫВ,
	|	ЗапланированныйМоментЗапуска,
	|	ВложенныйЗапрос.ДатаЗавершенияПоследнегоЗапуска,
	|	Ссылка"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКоличествоЗаданийВОчереди()
	
	ТекстыЗапросов = Новый Массив;
	
	Для Каждого СправочникЗаданий Из ОчередьЗаданийСлужебныйПовтИсп.ПолучитьСправочникиЗаданий() Цикл
		
		ПолноеИмяОбъекта = СправочникЗаданий.ПустаяСсылка().Метаданные().ПолноеИмя();
		
		Если РаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация() 
			И РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ПолноеИмяОбъекта, РаботаВМоделиСервиса.РазделительВспомогательныхДанных()) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ТаблицаСправочникЗаданий КАК Очередь
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСеансовОбластейДанных КАК Блокировки
			|		ПО Очередь.ОбластьДанныхВспомогательныеДанные = Блокировки.ОбластьДанныхВспомогательныеДанные
			|			И (Блокировки.НачалоБлокировки = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ Блокировки.НачалоБлокировки <= &ТекущаяУниверсальнаяДата)
			|			И (Блокировки.КонецБлокировки = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ Блокировки.КонецБлокировки >= &ТекущаяУниверсальнаяДата)
			|ГДЕ
			|	Очередь.Использование
			|	И Очередь.ЗапланированныйМоментЗапуска <= &ТекущаяУниверсальнаяДата
			|	И Очередь.СостояниеЗадания = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Запланировано)
			|	И ВЫБОР
			|			КОГДА Очередь.Шаблон = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаданийОчереди.ПустаяСсылка)
			|				ТОГДА Очередь.ИмяМетода
			|			ИНАЧЕ Очередь.Шаблон.ИмяМетода
			|		КОНЕЦ В (&Методы)
			|	И (Очередь.ЭксклюзивноеВыполнение
			|			ИЛИ Блокировки.ОбластьДанныхВспомогательныеДанные ЕСТЬ NULL)";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ ТаблицаСправочникЗаданий КАК Очередь
			|ГДЕ
			|	Очередь.Использование
			|	И Очередь.ЗапланированныйМоментЗапуска <= &ТекущаяУниверсальнаяДата
			|	И Очередь.СостояниеЗадания = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Запланировано)
			|	И Очередь.ИмяМетода В (&Методы)";
			
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(СтрЗаменить(ТекстЗапроса, "ТаблицаСправочникЗаданий", ПолноеИмяОбъекта));
		
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
КонецФункции

Процедура ЗапуститьФоновыеЗадания(ПараметрыЗадания, ТекстЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Методы", ПараметрыЗадания.Методы.ВыгрузитьКолонку("Метод"));
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	Запрос.Текст = ТекстЗапроса;
	Данные = Запрос.Выполнить().Выгрузить();
	Данные.Свернуть(, "Количество");
	ЗаданийВОчереди = Данные[0].Количество;
	
	Если ЗаданийВОчереди > 0 Тогда
		
		Идентификатор = Строка(ПараметрыЗадания.УникальныйИдентификатор());
		Синоним = Метаданные.РегламентныеЗадания.ОбработкаОчередиЗаданийБТС.Синоним;
		
		// Формирование списка всех заданий.
		НужныеЗадания = Новый СписокЗначений;
		Для НомерЗадания = 1 По ПараметрыЗадания.КоличествоЗаданий Цикл
			ПредставлениеНомера = Формат(НомерЗадания, "ЧЦ=2; ЧВН=");
			Ключ = СтрШаблон("%1 - %2", Идентификатор, ПредставлениеНомера);
			Наименование = СтрШаблон("%1 (%2 - %3)", Синоним, ПараметрыЗадания.Наименование, ПредставлениеНомера);
			НужныеЗадания.Добавить(Ключ, Наименование);		
		КонецЦикла;
		
		// Удаление уже запущенных заданий.
		Отбор = Новый Структура("ИмяМетода, Состояние", "ОчередьЗаданийБТС.ОбработатьОчередьЗаданий", СостояниеФоновогоЗадания.Активно);
		Для Каждого Задание Из ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор) Цикл
			НайденноеЗадание = НужныеЗадания.НайтиПоЗначению(Задание.Ключ);
			Если НайденноеЗадание <> Неопределено Тогда
				НужныеЗадания.Удалить(НайденноеЗадание);
			КонецЕсли;
		КонецЦикла;
		
		Если НужныеЗадания.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Удаление излишних заданий.
		Пока НужныеЗадания.Количество() > ЗаданийВОчереди Цикл
			НужныеЗадания.Удалить(НужныеЗадания.Количество() - 1);
		КонецЦикла;
		
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗадания);
		Для Каждого НужноеЗадание Из НужныеЗадания Цикл
			ФоновыеЗадания.Выполнить("ОчередьЗаданийБТС.ОбработатьОчередьЗаданий", Параметры, НужноеЗадание.Значение, НужноеЗадание.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеНастроек(Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Блокируется весь справочник, сценарий не частый, поэтому избыточная блокировка не критична.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ДополнительныеОбработчикиОчередиЗаданий");
		Блокировка.Заблокировать();
		
		Для Каждого Настройка Из Параметры.Действия Цикл
			
			Если Настройка.Действие = "УдалитьВсеОбработчики" Тогда
				
				Выборка = Справочники.ДополнительныеОбработчикиОчередиЗаданий.Выбрать();
	            Пока Выборка.Следующий() Цикл
					ОбработчикОбъект = Выборка.ПолучитьОбъект();
					ОбработчикОбъект.ОбменДанными.Загрузка = Истина;
					ОбработчикОбъект.Удалить();
				КонецЦикла;
				
				// Проверка если "зависли" задания.
				Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ОбработкаОчередиЗаданийБТС);
				Для Каждого Задание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор) Цикл
					Задание.Удалить();
				КонецЦикла;				
				
			ИначеЕсли Настройка.Действие = "ОбновитьОбработчик" Тогда
				
				Обработчик = Справочники.ДополнительныеОбработчикиОчередиЗаданий.ПолучитьСсылку(Настройка.Идентификатор);
				ОбработчикОбъект = Обработчик.ПолучитьОбъект();
				Если ОбработчикОбъект = Неопределено Тогда
					ОбработчикОбъект = Справочники.ДополнительныеОбработчикиОчередиЗаданий.СоздатьЭлемент();
					ОбработчикОбъект.УстановитьСсылкуНового(Обработчик);
				КонецЕсли;
				ОбработчикОбъект.Авто = Истина;
				ОбработчикОбъект.Наименование = Настройка.Наименование;
				ОбработчикОбъект.КоличествоЗаданий = Настройка.КоличествоЗаданий;
				ОбработчикОбъект.ДлительностьЗадания = Настройка.ДлительностьЗадания;
				ОбработчикОбъект.Методы.Очистить();
				Для Каждого Метод Из Настройка.Методы Цикл
					ОбработчикОбъект.Методы.Добавить().Метод = Метод;
				КонецЦикла;
				ОбработчикОбъект.ДополнительныеСвойства.Вставить("Использование", Настройка.Использование);
				ОбработчикОбъект.ДополнительныеСвойства.Вставить("Расписание", Настройка.Расписание);
				ОбработчикОбъект.ОбменДанными.Загрузка = Истина;
				ОбработчикОбъект.Записать();
				
			ИначеЕсли Настройка.Действие = "УдалитьОбработчик" Тогда
				
				Обработчик = Справочники.ДополнительныеОбработчикиОчередиЗаданий.ПолучитьСсылку(Настройка.Идентификатор);
				ОбработчикОбъект = Обработчик.ПолучитьОбъект();
				Если ОбработчикОбъект <> Неопределено Тогда
					ОбработчикОбъект.ДополнительныеСвойства.Вставить("Авто", Истина);
					ОбработчикОбъект.ОбменДанными.Загрузка = Истина;
					ОбработчикОбъект.Удалить();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправкаНастроек(Параметры, Получатель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИдентификаторЗапроса", Параметры.ИдентификаторЗапроса);
	Настройки.Вставить("Дата", ТекущаяУниверсальнаяДата());
	
	ДобавитьВНастройкиЗначениеКонстанты(Настройки, "МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания");
	ДобавитьВНастройкиЗначениеКонстанты(Настройки, "МаксимальноеКоличествоИсполняющихФоновыхЗаданий");
	ДобавитьВНастройкиПланированиеОбработкиЗаданий(Настройки);
	Настройки.Вставить("Методы", ВозможныеМетоды());
	ДобавитьВНастройкиОбработчики(Настройки);
	
	НачатьТранзакцию();
	Попытка
		ОбменСообщениями.ОтправитьСообщениеСейчас("ОчередьЗаданийБТС\ТекущиеНастройки", Настройки, Получатель);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ФоновыеЗадания.Выполнить("ОбменСообщениями.ДоставитьСообщения");
	
КонецПроцедуры

Процедура ДобавитьВНастройкиЗначениеКонстанты(Настройки, ИмяКонстанты)
	
	Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено Тогда
		Значение = Константы[ИмяКонстанты].Получить();
		Настройки.Вставить(ИмяКонстанты, Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВНастройкиПланированиеОбработкиЗаданий(Настройки)
	
	Если Метаданные.РегламентныеЗадания.Найти("ПланированиеОбработкиЗаданий") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное("ПланированиеОбработкиЗаданий");
	
	Настройки.Вставить("ПланированиеОбработкиЗаданий", Новый Структура);
	Настройки.ПланированиеОбработкиЗаданий.Вставить("Использование", РеглЗадание.Использование);
	Настройки.ПланированиеОбработкиЗаданий.Вставить("Расписание", РеглЗадание.Расписание);
	
КонецПроцедуры
	
Процедура ДобавитьВНастройкиОбработчики(Настройки)
	
	Обработчики = Новый Массив;
	Настройки.Вставить("Обработчики", Обработчики);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.ДополнительныеОбработчикиОчередиЗаданий
	|ГДЕ
	|	НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РеглЗадание = Справочники.ДополнительныеОбработчикиОчередиЗаданий.РегламентноеЗадание(Выборка.Ссылка);
		
		Обработчик = Новый Структура;
		Обработчик.Вставить("Идентификатор", Выборка.Ссылка.УникальныйИдентификатор());
		Обработчик.Вставить("Наименование", Выборка.Наименование);
		Обработчик.Вставить("Авто", Выборка.Авто);
		Обработчик.Вставить("КоличествоЗаданий", Выборка.КоличествоЗаданий);
		Обработчик.Вставить("ДлительностьЗадания", Выборка.ДлительностьЗадания);
		Обработчик.Вставить("Использование", ?(РеглЗадание = Неопределено, Ложь, РеглЗадание.Использование));
		Обработчик.Вставить("Расписание", ?(РеглЗадание = Неопределено, Неопределено, РеглЗадание.Расписание));
		Обработчик.Вставить("Методы", Выборка.Методы.Выгрузить().ВыгрузитьКолонку("Метод"));
		
		Обработчики.Добавить(Обработчик);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
