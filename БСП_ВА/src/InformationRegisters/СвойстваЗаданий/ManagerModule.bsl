#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс
    
// Устанавливает свойства с результатами выполнения задания, сохраняемые после выполнения задания и его удаления.
//
// Параметры:
//  Задание  - СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - задание.
//  Свойства - Структура - значения свойств для установки (см. функцию НовыйСвойстваЗадания()).
//
Процедура Установить(Знач Задание, Свойства = Неопределено) Экспорт
    
    Словарь = ОчередьЗаданийВнешнийИнтерфейсСловарь;
    ИдентификаторЗадания = ИдентификаторЗадания(Задание);
    Запись = СоздатьМенеджерЗаписи();
    Запись.ИдентификаторЗадания = ИдентификаторЗадания;
    Запись.Прочитать();
    Если Не Запись.Выбран() Тогда
        Запись.ИдентификаторЗадания = ИдентификаторЗадания;
        Задание = Справочники.ОчередьЗаданийОбластейДанных.ПолучитьСсылку(ИдентификаторЗадания);
        Если ОбщегоНазначения.СсылкаСуществует(Задание) Тогда
            Запись.Задание = Задание;
        КонецЕсли;
    Иначе
        // Если у задания были результаты или сообщения об ошибках, их нужно пометить временными (к удалению).
        Если ЗначениеЗаполнено(Запись.ИдентификаторСообщенияОбОшибке) Тогда
            ФайлыОбластейДанных.УстановитьПризнакВременного(Запись.ИдентификаторСообщенияОбОшибке);
        КонецЕсли; 
        Если ЗначениеЗаполнено(Запись.ИдентификаторРезультата) Тогда
            ФайлыОбластейДанных.УстановитьПризнакВременного(Запись.ИдентификаторРезультата);
        КонецЕсли; 
    КонецЕсли;
    Если Свойства <> Неопределено Тогда
        Если ЗначениеЗаполнено(Свойства.Результат) Тогда
            ИмяФайла = Словарь.ПолеРезультат() + "-" + Строка(ИдентификаторЗадания);
            Данные = ПолучитьДвоичныеДанныеИзСтроки(Свойства.Результат);
            ИдентификаторРезультата = ФайлыОбластейДанных.ЗагрузитьФайл(ИмяФайла, Данные); 
        Иначе
            ИдентификаторРезультата = ПустойИдентификатор();
        КонецЕсли; 
        Если ЗначениеЗаполнено(Свойства.СообщениеОбОшибке) Тогда
            ИмяФайла = Словарь.ПолеСообщениеОбОшибке() + "-" + Строка(ИдентификаторЗадания);
            Данные = ПолучитьДвоичныеДанныеИзСтроки(Свойства.СообщениеОбОшибке);
            ИдентификаторСообщенияОбОшибке = ФайлыОбластейДанных.ЗагрузитьФайл(ИмяФайла, Данные); 
        Иначе
            ИдентификаторСообщенияОбОшибке = ПустойИдентификатор();     
        КонецЕсли; 
        Запись.КодСостояния = Свойства.КодСостояния;
        Запись.ИдентификаторРезультата = ИдентификаторРезультата;
        Запись.ИдентификаторСообщенияОбОшибке = ИдентификаторСообщенияОбОшибке;
    КонецЕсли; 
    
    Если Запись.КодСостояния = Словарь.КодСостоянияОшибкаДанных() Или Запись.КодСостояния = Словарь.КодСостоянияВнутренняяОшибка() Тогда
        Запись.Ошибка = Истина;
    КонецЕсли; 
    
    Запись.Записать();
	
КонецПроцедуры

// Очищает свойство "Задание" при необходимости. Вызывается, если объект задания удаляется.
// Если в данных записи нет результатов или ошибки (КодСостояния = Ожидание), тогда удаляется запись о свойствах. 
//
// Параметры:
//  Задание  - СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - задание.
//
Процедура ОчиститьСвойствоЗадание(Знач Задание) Экспорт
    
    Словарь = ОчередьЗаданийВнешнийИнтерфейсСловарь;
    ИдентификаторЗадания = ИдентификаторЗадания(Задание);
    
    Запись = СоздатьМенеджерЗаписи();
    Запись.ИдентификаторЗадания = ИдентификаторЗадания;
    Запись.Прочитать();
    Если Запись.Выбран() Тогда
        Если Запись.КодСостояния = Словарь.КодСостоянияОжидание() Тогда
            Запись.Удалить();
        Иначе
            Запись.Задание = Неопределено;
            Запись.Записать();
        КонецЕсли; 
    КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с пустыми значениями свойств задания. 
// Может использоваться как шаблон для заполнения свойств.
// 
// Возвращаемое значение:
//   - Структура - свойства задания:
//     * КодСостояния - Строка - код состояния задания (см. функцию ОчередьЗаданийВнешнийИнтерфейсСловарь.КодыСостояний())
//     * Ошибка - Булево - признак возникновения ошибки в процессе выполнения задания.
//     * СообщениеОбОшибке - Строка - сообщение об ошибке в процессе выполнения задания.
//     * Результат - Строка - описание результата выполнения задания. Если передана строка в формате JSON, 
//                            то она будет интегрирована в результирующий ответ в составе JSON.
//
Функция НовыйСвойстваЗадания() Экспорт
	
	СвойстваЗадания = Новый Структура;
    СвойстваЗадания.Вставить("КодСостояния", 0);
    СвойстваЗадания.Вставить("Ошибка", Ложь);
    СвойстваЗадания.Вставить("СообщениеОбОшибке", "");
    СвойстваЗадания.Вставить("Результат", "");
    Возврат СвойстваЗадания;
	
КонецФункции

// Возвращает структуру с именами кодов состояний обработки заданий.
// 
// Возвращаемое значение:
//   - Структура - имена состояний с значениями кодов состояний.
//
Функция КодыСостояний() Экспорт
    
    Словарь = ОчередьЗаданийВнешнийИнтерфейсСловарь;
    
	КодыСостояний = Новый Структура;
    КодыСостояний.Вставить("Выполнено", Словарь.КодСостоянияВыполнено());
    КодыСостояний.Вставить("Ожидание", Словарь.КодСостоянияОжидание());
    КодыСостояний.Вставить("ВыполненоСПредупреждениями", Словарь.КодСостоянияВыполненоСПредупреждениями());
    КодыСостояний.Вставить("ОшибкаДанных", Словарь.КодСостоянияОшибкаДанных());
    КодыСостояний.Вставить("НеНайдено", Словарь.КодСостоянияНеНайдено());
    КодыСостояний.Вставить("ВнутренняяОшибка", Словарь.КодСостоянияВнутренняяОшибка());
    
    Возврат КодыСостояний;
    
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция УдалитьНеАктуальныеЗаписи(Параметры) Экспорт
    
    Словарь = ОчередьЗаданийВнешнийИнтерфейсСловарь;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
        |   СвойстваЗаданий.ИдентификаторЗадания КАК ИдентификаторЗадания
        |ИЗ
        |   РегистрСведений.СвойстваЗаданий КАК СвойстваЗаданий
        |ГДЕ
        |   СвойстваЗаданий.КодСостояния = &СостояниеОжидание
        |   И (СвойстваЗаданий.Задание = НЕОПРЕДЕЛЕНО
        |           ИЛИ СвойстваЗаданий.Задание ЕСТЬ NULL
        |           ИЛИ СвойстваЗаданий.Задание = &ПустоеЗадание)";
	Запрос.УстановитьПараметр("СостояниеОжидание", Словарь.КодСостоянияОжидание());
    Запрос.УстановитьПараметр("ПустоеЗадание", Справочники.ОчередьЗаданийОбластейДанных.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЗадания.Установить(Выборка.ИдентификаторЗадания, Истина);
		Набор.Записать();
	КонецЦикла;

КонецФункции

Функция ИдентификаторЗадания(Знач Задание)
	
    Если ТипЗнч(Задание) = Тип("УникальныйИдентификатор") Тогда
        ИдентификаторЗадания = Задание;
    Иначе
        ИдентификаторЗадания = Задание.УникальныйИдентификатор();
    КонецЕсли;
    Возврат ИдентификаторЗадания;
	
КонецФункции

Функция ПустойИдентификатор()
	
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
КонецФункции
 
#КонецОбласти 

#КонецЕсли
 
 